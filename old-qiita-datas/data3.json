[{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"config\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#config\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003econfig\u003c/h1\u003e\n\n\u003cp\u003epackage.json の config に項目を追加すると npm-scripts 実行時に環境変数として \u003ccode\u003e$npm_package_config_xxx\u003c/code\u003e ( \u003ccode\u003exxx\u003c/code\u003e はプロパティ名) という形で使用できるようになります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"サンプル\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eサンプル\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"npm-scripts-で使用する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#npm-scripts-%E3%81%A7%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enpm-scripts で使用する\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"json\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003epackage.json\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"name\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"foo\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"config\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"foo\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"bar\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"dev\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n      \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"port\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e8080\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"scripts\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"start\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"node ./index.js\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"dev\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"http-server -p $npm_package_config_dev_port\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこの場合、 \u003ccode\u003e$ npm run dev\u003c/code\u003e と実行すると \u003ccode\u003e$npm_package_config_dev_port\u003c/code\u003e が \u003ccode\u003e8080\u003c/code\u003e と解釈されます。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"javascript-のプログラムから使用する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#javascript-%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%81%8B%E3%82%89%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eJavaScript のプログラムから使用する\u003c/h2\u003e\n\n\u003cp\u003enpm-scripts だけではなく、JavaScript のプログラムからも以下のように使用することができます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eindex.js\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003econsole.log\u003cspan class=\"o\"\u003e(\u003c/span\u003eprocess.env.npm_package_config_dev_port\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c\"\u003e# 8080 と出力される\u003c/span\u003e\nconsole.log\u003cspan class=\"o\"\u003e(\u003c/span\u003eprocess.env.npm_package_config_foo_bar\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c\"\u003e# baz と出力される\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"使い所\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%BF%E3%81%84%E6%89%80\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e使い所\u003c/h1\u003e\n\n\u003cp\u003e正直、使い所はあんまり思いつきません。\u003c/p\u003e\n\n\u003cp\u003e可能であれば npm-scripts はコマンドライン引数を \u003ccode\u003e--\u003c/code\u003e のオプションでコマンドに渡せるため、そっちのコマンドライン引数を使ったほうがいいと思います。\u003c/p\u003e\n\n\u003cp\u003e環境設定の外部ファイルで環境変数を読み込ませるよりは良さそうですが、 ローカルでの環境情報を package.json に書き込むことになってしまい、git で package.json が競合することになりそうです。\u003c/p\u003e\n\n\u003cp\u003eどうしても npm-scripts のコマンドライン引数で連携できないケース（連携しようとすると npm-scripts がやたら複雑になるケース）や npm-all-run などで複数箇所の設定を同時に行いたい時など、かなり使用するケースは限られると思います。\u003c/p\u003e\n","body":"# config\n\npackage.json の config に項目を追加すると npm-scripts 実行時に環境変数として `$npm_package_config_xxx` ( `xxx` はプロパティ名) という形で使用できるようになります。\n\n# サンプル\n\n## npm-scripts で使用する\n\n```json:package.json\n{\n  \"name\": \"foo\",\n  \"config\": {\n    \"foo\": \"bar\",\n    \"dev\": {\n      \"port\": 8080\n    }\n  },\n  \"scripts\": {\n    \"start\": \"node ./index.js\",\n    \"dev\": \"http-server -p $npm_package_config_dev_port\"\n  }\n}\n```\n\nこの場合、 `$ npm run dev` と実行すると `$npm_package_config_dev_port` が `8080` と解釈されます。\n\n## JavaScript のプログラムから使用する\n\nnpm-scripts だけではなく、JavaScript のプログラムからも以下のように使用することができます。\n\n```shell:index.js\nconsole.log(process.env.npm_package_config_dev_port); # 8080 と出力される\nconsole.log(process.env.npm_package_config_foo_bar); # baz と出力される\n```\n\n# 使い所\n\n正直、使い所はあんまり思いつきません。\n\n可能であれば npm-scripts はコマンドライン引数を `--` のオプションでコマンドに渡せるため、そっちのコマンドライン引数を使ったほうがいいと思います。\n\n環境設定の外部ファイルで環境変数を読み込ませるよりは良さそうですが、 ローカルでの環境情報を package.json に書き込むことになってしまい、git で package.json が競合することになりそうです。\n\nどうしても npm-scripts のコマンドライン引数で連携できないケース（連携しようとすると npm-scripts がやたら複雑になるケース）や npm-all-run などで複数箇所の設定を同時に行いたい時など、かなり使用するケースは限られると思います。\n","coediting":false,"comments_count":0,"created_at":"2020-10-18T19:04:12+09:00","group":null,"id":"357fc6c2ae04f48b2076","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"npm","versions":[]},{"name":"package.json","versions":[]}],"title":"package.json の config の使い方について","updated_at":"2020-11-04T00:54:00+09:00","url":"https://qiita.com/ikuraikura/items/357fc6c2ae04f48b2076","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"npx--p---c-commond\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#npx--p---c-commond\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enpx -p  -c \"commond\"\u003c/h1\u003e\n\n\u003cp\u003e例えば \u003ccode\u003eexpress-generator\u003c/code\u003e のパッケージでは使用するコマンドは \u003ccode\u003eexpress\u003c/code\u003e というように、パッケージ名とコマンドが異なる場合は \u003ccode\u003enpx -p \u0026lt;package\u0026gt; -c \"\u0026lt;commond\u0026gt;\"\u003c/code\u003e とします。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# express というコマンドは存在しないため失敗する\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpx express \u003cspan class=\"nt\"\u003e--version\u003c/span\u003e\nnpx: 50個のパッケージを1.814秒でインストールしました。\nコマンドが見つかりません： express\n\n\u003cspan class=\"c\"\u003e# -p で express-generator パッケージ、-c で express コマンドを指定すると実行できる\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpx \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e express-generator \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"express --version\"\u003c/span\u003e\nnpx: 10個のパッケージを1.277秒でインストールしました。\n4.16.1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eちなみに、挙動をみると \u003ccode\u003enpx -p \u0026lt;package\u0026gt; -c \"\u0026lt;commond\u0026gt;\"\u003c/code\u003e と実行する場合は、そのパッケージがローカルインストールされているのかどうかに関わらず、リモートのパッケージをインストールするみたいです。\u003c/p\u003e\n","body":"\n# npx -p \u003cpackage\u003e -c \"commond\"\n\n例えば `express-generator` のパッケージでは使用するコマンドは `express` というように、パッケージ名とコマンドが異なる場合は `npx -p \u003cpackage\u003e -c \"\u003ccommond\u003e\"` とします。\n\n```shell\n# express というコマンドは存在しないため失敗する\n$ npx express --version\nnpx: 50個のパッケージを1.814秒でインストールしました。\nコマンドが見つかりません： express\n\n# -p で express-generator パッケージ、-c で express コマンドを指定すると実行できる\n$ npx -p express-generator -c \"express --version\"\nnpx: 10個のパッケージを1.277秒でインストールしました。\n4.16.1\n```\n\nちなみに、挙動をみると `npx -p \u003cpackage\u003e -c \"\u003ccommond\u003e\"` と実行する場合は、そのパッケージがローカルインストールされているのかどうかに関わらず、リモートのパッケージをインストールするみたいです。\n","coediting":false,"comments_count":0,"created_at":"2020-10-18T18:07:10+09:00","group":null,"id":"329e0cdbaf337edb81d3","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"npm","versions":[]},{"name":"npm-scripts","versions":[]},{"name":"npx","versions":[]}],"title":"npx でパッケージ名とコマンドが異なる場合（npx -p \u003cpackage\u003e -c \"\u003ccommond\u003e\"）","updated_at":"2020-10-19T00:12:26+09:00","url":"https://qiita.com/ikuraikura/items/329e0cdbaf337edb81d3","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003enpm でローカルインストールしたパッケージを CLI でコマンド実行する方法が複数あるようなので、それぞれについて比較しました。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"どうして-npm-インストールしただけではコマンド実行できないの\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A9%E3%81%86%E3%81%97%E3%81%A6-npm-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%9F%E3%81%A0%E3%81%91%E3%81%A7%E3%81%AF%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E5%AE%9F%E8%A1%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%81%AE\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eどうして npm インストールしただけではコマンド実行できないの？\u003c/h1\u003e\n\n\u003cp\u003e例えば cowsay というパッケージを \u003ccode\u003enpm install cowsay\u003c/code\u003e でローカルインストールをした場合、いきなり \u003ccode\u003ecowsay\u003c/code\u003e とコマンドを実行することができません。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ecowsay\u003c/code\u003e と実行すると、以下のように \u003ccode\u003ecommand not found: cowsay\u003c/code\u003e と怒られます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# cowsay パッケージのローカルインストール\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm \u003cspan class=\"nb\"\u003einstall \u003c/span\u003ecowsay\n+ cowsay@1.4.0\n\n\u003cspan class=\"c\"\u003e# ローカルインストールされたパッケージの確認\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm list \u003cspan class=\"nt\"\u003e--depth\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\ntypescript-node-base@1.0.0 /Users/sugurutakahashi/git/typescript-node-base\n└── cowsay@1.4.0\n\n\u003cspan class=\"c\"\u003e# cowsay コマンドの実行（パスが通っていないのでエラーになる）\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecowsay \u003cspan class=\"s2\"\u003e\"hoge\"\u003c/span\u003e\nzsh: \u003cspan class=\"nb\"\u003ecommand \u003c/span\u003enot found: cowsay\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eこのように実行できない理由は単純で、ローカルインストールしただけではパッケージにパスが通っていないためです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"コマンド実行する方法\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eコマンド実行する方法\u003c/h1\u003e\n\n\u003cp\u003eローカルインストールしたパッケージのコマンドを実行するには以下の3つ（4つ目はグローバルインストールなのでカウント外）が挙げられます。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e方法1：パスを通す\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e./node_modules/.bin/\u0026lt;package\u0026gt;\u003c/code\u003e のようにパスを通しながら実行する\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e方法2：npm-srcipts\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003epackage.json の npm-srcipts を登録して \u003ccode\u003enpm run \u0026lt;key\u0026gt;\u003c/code\u003e と実行する\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e方法3：npx（おすすめ！）\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003enpx \u0026lt;package\u0026gt;\u003c/code\u003e とコマンドを実行する\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e（方法4：グローバルインストール）\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003enpm install -g  \u0026lt;package\u0026gt;\u003c/code\u003e 後に \u003ccode\u003e\u0026lt;package\u0026gt;\u003c/code\u003e とコマンド実行する\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"実行してみる\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実行してみる\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"方法1-パスを通す\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%96%B9%E6%B3%951-%E3%83%91%E3%82%B9%E3%82%92%E9%80%9A%E3%81%99\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e方法1： パスを通す\u003c/h2\u003e\n\n\u003cp\u003enpm によってローカルインストールすると \u003ccode\u003e./node_modules/.bin/\u003c/code\u003e にパッケージがインストールされるのでパスを指定してあげるだけです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# ローカルインストール先のパスを指定した cowsay コマンドの実行\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./node_modules/.bin/cowsay \u003cspan class=\"s2\"\u003e\"hoge\"\u003c/span\u003e \n ______\n\u0026lt; hoge \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n \u003cspan class=\"nt\"\u003e------\u003c/span\u003e\n        \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e  ^__^\n         \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003eoo\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\_\u003c/span\u003e______\n            \u003cspan class=\"o\"\u003e(\u003c/span\u003e__\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\ \u003c/span\u003e      \u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\/\\\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"nt\"\u003e----w\u003c/span\u003e |\n                \u003cspan class=\"o\"\u003e||\u003c/span\u003e     \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# $(npm bin) を使用しても同様にローカルインストール先のパスを指定したことになる（./node_modules/.bin/\u0026lt;package\u0026gt; = $(npm bin)/\u0026lt;package\u0026gt;）\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"si\"\u003e$(\u003c/span\u003enpm bin\u003cspan class=\"si\"\u003e)\u003c/span\u003e/cowsay \u003cspan class=\"s2\"\u003e\"hoge\"\u003c/span\u003e   \n ______\n\u0026lt; hoge \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n \u003cspan class=\"nt\"\u003e------\u003c/span\u003e\n        \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e  ^__^\n         \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003eoo\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\_\u003c/span\u003e______\n            \u003cspan class=\"o\"\u003e(\u003c/span\u003e__\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\ \u003c/span\u003e      \u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\/\\\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"nt\"\u003e----w\u003c/span\u003e |\n                \u003cspan class=\"o\"\u003e||\u003c/span\u003e     \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"方法2-npm-srcipts\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%96%B9%E6%B3%952-npm-srcipts\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e方法2： npm-srcipts\u003c/h2\u003e\n\n\u003cp\u003epackage.json の \u003ccode\u003escripts\u003c/code\u003e の項目に \u003ccode\u003e{ \"scripts\" : { \"key\" : \"value\" }}\u003c/code\u003e と \u003ccode\u003e\"value\"\u003c/code\u003e にコマンドを指定したのちに \u003ccode\u003e$ npm run \u0026lt;key\u0026gt;\u003c/code\u003e と実行します。\u003c/p\u003e\n\n\u003cp\u003e今回、 \u003ccode\u003ekey\u003c/code\u003e と \u003ccode\u003evalue\u003c/code\u003e を同じ値にしておりますが、\u003ccode\u003ekey\u003c/code\u003e に設定する値はなんでも良いです。\u003c/p\u003e\n\n\u003cp\u003eまた、\u003ccode\u003evalue\u003c/code\u003e に設定するコマンドに引数のオプションを指定したい場合は \u003ccode\u003e--\u003c/code\u003e のあとに指定します。\u003cbr\u003e\nex） \u003ccode\u003e$ npm run \u0026lt;key\u0026gt; -- \u0026lt;valueで指定したコマンドに対する引数\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# package.json の scripts に cowsay を追加（npm run scripts\u0026lt;key\u0026gt; とコマンドを実行するとローカルインストール先のパスを通しながら scripts\u0026lt;value\u0026gt; コマンドを実行する）\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi package.json\n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e(\u003c/span\u003e省略\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\"dependencies\"\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\"cowsay\"\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\"^1.4.0\"\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n  \u003cspan class=\"s2\"\u003e\"scripts\"\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n+   \u003cspan class=\"s2\"\u003e\"cowsay\"\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\"cowsay\"\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n  \u003cspan class=\"o\"\u003e(\u003c/span\u003e省略\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# npm-scripts での cowsay コマンドの実行\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm run cowsay \u003cspan class=\"nt\"\u003e--\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"hoge\"\u003c/span\u003e \u003cspan class=\"c\"\u003e# npm-scripts の引数のオプションは -- のあとに指定する（-- なくても大丈夫な場合もあるがつけた方が無難）\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e typescript-node-base@1.0.0 cowsay /Users/sugurutakahashi/git/typescript-node-base\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e cowsay \u003cspan class=\"s2\"\u003e\"hoge\"\u003c/span\u003e\n\n ______\n\u0026lt; hoge \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n \u003cspan class=\"nt\"\u003e------\u003c/span\u003e\n        \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e  ^__^\n         \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003eoo\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\_\u003c/span\u003e______\n            \u003cspan class=\"o\"\u003e(\u003c/span\u003e__\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\ \u003c/span\u003e      \u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\/\\\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"nt\"\u003e----w\u003c/span\u003e |\n                \u003cspan class=\"o\"\u003e||\u003c/span\u003e     \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# npm run 実行時に -s (= --silent) の オプションをつけると出力がすっきりします\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm run \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e cowsay \u003cspan class=\"nt\"\u003e--\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"hoge\"\u003c/span\u003e\n ______\n\u0026lt; hoge \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n \u003cspan class=\"nt\"\u003e------\u003c/span\u003e\n        \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e  ^__^\n         \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003eoo\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\_\u003c/span\u003e______\n            \u003cspan class=\"o\"\u003e(\u003c/span\u003e__\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\ \u003c/span\u003e      \u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\/\\\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"nt\"\u003e----w\u003c/span\u003e |\n                \u003cspan class=\"o\"\u003e||\u003c/span\u003e     \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"方法3-npx\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%96%B9%E6%B3%953-npx\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e方法3： npx\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e公式:\u003ca href=\"https://www.npmjs.com/package/npx\" rel=\"nofollow noopener\" target=\"_blank\"\u003enpx\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ccode\u003enpx \u0026lt;package\u0026gt;\u003c/code\u003e とコマンドを実行するとローカルにインストールした npm パッケージを実行することができます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# npx \u0026lt;package\u0026gt; コマンドでもローカルインストール先のパスを通しながら \u0026lt;package\u0026gt; のコマンドを実行できる（ローカルインストールしている場合は ./node_modules/.bin/\u0026lt;package\u0026gt; = npx \u0026lt;package\u0026gt;）\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpx cowsay \u003cspan class=\"s2\"\u003e\"hoge\"\u003c/span\u003e\n ______\n\u0026lt; hoge \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n \u003cspan class=\"nt\"\u003e------\u003c/span\u003e\n        \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e  ^__^\n         \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003eoo\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\_\u003c/span\u003e______\n            \u003cspan class=\"o\"\u003e(\u003c/span\u003e__\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\ \u003c/span\u003e      \u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\/\\\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"nt\"\u003e----w\u003c/span\u003e |\n                \u003cspan class=\"o\"\u003e||\u003c/span\u003e     \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eまた、ローカルに存在しないパッケージは一時的にパッケージをインストールしてコマンド実行を実行してくれます。\u003cbr\u003e\nそのようにインストールしたパッケージはコマンド実行に削除されます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# node_modules のない適当なディレクトリに移動\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ../\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm list \u003cspan class=\"nt\"\u003e--depth\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\n/Users/sugurutakahashi/git\n└── \u003cspan class=\"o\"\u003e(\u003c/span\u003eempty\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# npx \u0026lt;package\u0026gt; コマンド実行時にローカルインストール先（node_modules）にパッケージが存在しない場合は、一時的にローカルにパッケージをインストールして実行する（実行後は一時的にインストールしたパッケージは削除される）\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpx cowsay \u003cspan class=\"s2\"\u003e\"hoge\"\u003c/span\u003e\nnpx: 10個のパッケージを1.636秒でインストールしました。\n ______\n\u0026lt; hoge \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n \u003cspan class=\"nt\"\u003e------\u003c/span\u003e\n        \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e  ^__^\n         \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003eoo\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\_\u003c/span\u003e______\n            \u003cspan class=\"o\"\u003e(\u003c/span\u003e__\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\ \u003c/span\u003e      \u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\/\\\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"nt\"\u003e----w\u003c/span\u003e |\n                \u003cspan class=\"o\"\u003e||\u003c/span\u003e     \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eローカルにパッケージがあってもなくても使用できるのは便利ですね。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"方法4-グローバルインストール\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%96%B9%E6%B3%954-%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e方法4： グローバルインストール\u003c/h2\u003e\n\n\u003cp\u003eもちろんグローバルインストールすればローカルインストールする必要もないし npm-scripts に登録する必要もないし、npx と指定する必要もありませんが、その環境でしか実行できなくなります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# もちろん実行できない\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecowsay \u003cspan class=\"s2\"\u003e\"hoge\"\u003c/span\u003e\nzsh: \u003cspan class=\"nb\"\u003ecommand \u003c/span\u003enot found: cowsay\n\n\u003cspan class=\"c\"\u003e# グローバルインストール\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e cowsay\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecowsay \u003cspan class=\"s2\"\u003e\"hoge\"\u003c/span\u003e\n ______\n\u0026lt; hoge \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n \u003cspan class=\"nt\"\u003e------\u003c/span\u003e\n        \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e  ^__^\n         \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003eoo\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\_\u003c/span\u003e______\n            \u003cspan class=\"o\"\u003e(\u003c/span\u003e__\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\ \u003c/span\u003e      \u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\/\\\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"nt\"\u003e----w\u003c/span\u003e |\n                \u003cspan class=\"o\"\u003e||\u003c/span\u003e     \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"考察\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%80%83%E5%AF%9F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e考察\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"これらの方法の使い分けについて\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%93%E3%82%8C%E3%82%89%E3%81%AE%E6%96%B9%E6%B3%95%E3%81%AE%E4%BD%BF%E3%81%84%E5%88%86%E3%81%91%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eこれらの方法の使い分けについて\u003c/h2\u003e\n\n\u003cp\u003e基本的に \u003ccode\u003enpm-srcipts\u003c/code\u003e または \u003ccode\u003enpx\u003c/code\u003e での実行をお勧めします。\u003c/p\u003e\n\n\u003cp\u003eまず、パスを通して実行するのであれば \u003ccode\u003enpx\u003c/code\u003e で実行することができます。\u003cbr\u003e\nなので、わざわざパスを通しながら実行する機会はないと思われます。\u003c/p\u003e\n\n\u003cp\u003eローカルインストールしたパッケージのコマンドを頻繁に実行するコマンドであったりプロジェクトで共有すべきコマンドであれば \u003ccode\u003enpm-srcipts\u003c/code\u003e に登録したほうがいいと思います。\u003c/p\u003e\n\n\u003cp\u003e一方で、たまにしか実行しないコマンドであったり、動作の検証であれば、わざわざ \u003ccode\u003enpm-srcipts\u003c/code\u003e に登録せずに \u003ccode\u003enpx\u003c/code\u003e での実行でいいと思います。\u003c/p\u003e\n\n\u003cp\u003eむしろ、むやみに \u003ccode\u003enpm-srcipts\u003c/code\u003e に登録すると管理する対象が増えるのでお勧めしません。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"npx-のみローカルインストールの有無にかかわらず実行できる\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#npx-%E3%81%AE%E3%81%BF%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%AE%E6%9C%89%E7%84%A1%E3%81%AB%E3%81%8B%E3%81%8B%E3%82%8F%E3%82%89%E3%81%9A%E5%AE%9F%E8%A1%8C%E3%81%A7%E3%81%8D%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enpx のみローカルインストールの有無にかかわらず実行できる\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003enpx\u003c/code\u003e の機能としてローカルインストールされていないパッケージは、一時的にパッケージをインストールして実行してくれます。\u003c/p\u003e\n\n\u003cp\u003eたまにしか実行しないコマンドであったり、動作の検証であれば、ローカルインストールすらせず \u003ccode\u003enpx\u003c/code\u003e 経由で毎回インストールしながらコマンド実行するのもありだと思います。\u003c/p\u003e\n\n\u003cp\u003e時間はかかりますが、検証の結果、不要になったパッケージのアンインストールのし忘れなどがないというメリットがあります。\u003c/p\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\n\u003ca href=\"https://qiita.com/tatakahashiap/items/1c4ab221c4993e7c4ebf\" id=\"reference-69e5ac29dac52e6e9616\"\u003enpxでnodeモジュールを実行する\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"それって本当にグローバルインストールする必要がありますか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%9D%E3%82%8C%E3%81%A3%E3%81%A6%E6%9C%AC%E5%BD%93%E3%81%AB%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E5%BF%85%E8%A6%81%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eそれって本当にグローバルインストールする必要がありますか？\u003c/h2\u003e\n\n\u003cp\u003eよくネットに転がっている記事はやたらとグローバルインストールさせてきます。\u003cbr\u003e\nそのとき安易にグローバルインストールしないほうがいいです。\u003c/p\u003e\n\n\u003cp\u003eグローバルインストールされたパッケージは環境が異なると使用することができません。\u003c/p\u003e\n\n\u003cp\u003e大抵の場合、\u003ccode\u003enpx\u003c/code\u003e を使って一時的にインストールするだけで済むケースがほとんどです。\u003c/p\u003e\n\n\u003cp\u003e無闇にグローバルインストールせずに \u003ccode\u003enpx\u003c/code\u003e を使ってみてはいかがでしょうか？\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h1\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: left\"\u003eケース\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eインストール先\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eCLIでの実行方法\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003e・よく実行する \u003cbr\u003e・プロジェクトで共有して管理したい\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003eローカルインストール\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e・npm-srcipts\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003e・まあまあ実行する\u003cbr\u003e・今のところ自分だけ知っていればいい\u003cbr\u003e・バージョンを管理したい\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003eローカルインストール\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e・npx\u003cbr\u003e・パスを指定する\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003e・たまにしか実行しない\u003cbr\u003e・検証中である\u003cbr\u003e・ちょっと時間がかかってもよい\u003cbr\u003e・環境に影響をかけたくない\u003cbr\u003e・とりあえず実行させたい\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003enpx による一時的インストール\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e・npx\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003e・それ以外\u003cbr\u003e・どうしてもグローバルインストールしたい\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003eグローバルインストール\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e・普通に実行する\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n","body":"# はじめに\nnpm でローカルインストールしたパッケージを CLI でコマンド実行する方法が複数あるようなので、それぞれについて比較しました。\n\n# どうして npm インストールしただけではコマンド実行できないの？\n\n例えば cowsay というパッケージを `npm install cowsay` でローカルインストールをした場合、いきなり `cowsay` とコマンドを実行することができません。\n\n`cowsay` と実行すると、以下のように `command not found: cowsay` と怒られます。\n\n```shell\n# cowsay パッケージのローカルインストール\n$ npm install cowsay\n+ cowsay@1.4.0\n\n# ローカルインストールされたパッケージの確認\n$ npm list --depth=0\ntypescript-node-base@1.0.0 /Users/sugurutakahashi/git/typescript-node-base\n└── cowsay@1.4.0\n\n# cowsay コマンドの実行（パスが通っていないのでエラーになる）\n$ cowsay \"hoge\"\nzsh: command not found: cowsay\n```\n\n**このように実行できない理由は単純で、ローカルインストールしただけではパッケージにパスが通っていないためです。**\n\n# コマンド実行する方法\n\nローカルインストールしたパッケージのコマンドを実行するには以下の3つ（4つ目はグローバルインストールなのでカウント外）が挙げられます。\n\n- **方法1：パスを通す**\n  - `./node_modules/.bin/\u003cpackage\u003e` のようにパスを通しながら実行する\n\n- **方法2：npm-srcipts**\n  - package.json の npm-srcipts を登録して `npm run \u003ckey\u003e` と実行する\n\n- **方法3：npx（おすすめ！）**\n  - `npx \u003cpackage\u003e` とコマンドを実行する\n\n- **（方法4：グローバルインストール）**\n  - `npm install -g  \u003cpackage\u003e` 後に `\u003cpackage\u003e` とコマンド実行する\n\n# 実行してみる\n\n## 方法1： パスを通す\n\nnpm によってローカルインストールすると `./node_modules/.bin/` にパッケージがインストールされるのでパスを指定してあげるだけです。\n\n```shell\n# ローカルインストール先のパスを指定した cowsay コマンドの実行\n$ ./node_modules/.bin/cowsay \"hoge\" \n ______\n\u003c hoge \u003e\n ------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n\n# $(npm bin) を使用しても同様にローカルインストール先のパスを指定したことになる（./node_modules/.bin/\u003cpackage\u003e = $(npm bin)/\u003cpackage\u003e）\n$ $(npm bin)/cowsay \"hoge\"   \n ______\n\u003c hoge \u003e\n ------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n```\n\n## 方法2： npm-srcipts\n\npackage.json の `scripts` の項目に `{ \"scripts\" : { \"key\" : \"value\" }}` と `\"value\"` にコマンドを指定したのちに `$ npm run \u003ckey\u003e` と実行します。\n\n今回、 `key` と `value` を同じ値にしておりますが、`key` に設定する値はなんでも良いです。\n\nまた、`value` に設定するコマンドに引数のオプションを指定したい場合は `--` のあとに指定します。\nex） `$ npm run \u003ckey\u003e -- \u003cvalueで指定したコマンドに対する引数\u003e`\n\n\n```shell\n# package.json の scripts に cowsay を追加（npm run scripts\u003ckey\u003e とコマンドを実行するとローカルインストール先のパスを通しながら scripts\u003cvalue\u003e コマンドを実行する）\n$ vi package.json\n{\n  (省略)\n  \"dependencies\": {\n    \"cowsay\": \"^1.4.0\"\n  },\n  \"scripts\": {\n+   \"cowsay\": \"cowsay\"\n  },\n  (省略)\n}\n\n# npm-scripts での cowsay コマンドの実行\n$ npm run cowsay -- \"hoge\" # npm-scripts の引数のオプションは -- のあとに指定する（-- なくても大丈夫な場合もあるがつけた方が無難）\n\n\u003e typescript-node-base@1.0.0 cowsay /Users/sugurutakahashi/git/typescript-node-base\n\u003e cowsay \"hoge\"\n\n ______\n\u003c hoge \u003e\n ------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n\n# npm run 実行時に -s (= --silent) の オプションをつけると出力がすっきりします\n$ npm run -s cowsay -- \"hoge\"\n ______\n\u003c hoge \u003e\n ------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n```\n\n## 方法3： npx\n\n\u003e 公式:[npx](https://www.npmjs.com/package/npx)\n\n`npx \u003cpackage\u003e` とコマンドを実行するとローカルにインストールした npm パッケージを実行することができます。\n\n```shell\n# npx \u003cpackage\u003e コマンドでもローカルインストール先のパスを通しながら \u003cpackage\u003e のコマンドを実行できる（ローカルインストールしている場合は ./node_modules/.bin/\u003cpackage\u003e = npx \u003cpackage\u003e）\n$ npx cowsay \"hoge\"\n ______\n\u003c hoge \u003e\n ------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n```\n\nまた、ローカルに存在しないパッケージは一時的にパッケージをインストールしてコマンド実行を実行してくれます。\nそのようにインストールしたパッケージはコマンド実行に削除されます。\n\n```shell\n# node_modules のない適当なディレクトリに移動\n$ cd ../\n$ npm list --depth=0\n/Users/sugurutakahashi/git\n└── (empty)\n\n# npx \u003cpackage\u003e コマンド実行時にローカルインストール先（node_modules）にパッケージが存在しない場合は、一時的にローカルにパッケージをインストールして実行する（実行後は一時的にインストールしたパッケージは削除される）\n$ npx cowsay \"hoge\"\nnpx: 10個のパッケージを1.636秒でインストールしました。\n ______\n\u003c hoge \u003e\n ------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n```\n\nローカルにパッケージがあってもなくても使用できるのは便利ですね。\n\n## 方法4： グローバルインストール\n\nもちろんグローバルインストールすればローカルインストールする必要もないし npm-scripts に登録する必要もないし、npx と指定する必要もありませんが、その環境でしか実行できなくなります。\n\n```shell\n# もちろん実行できない\n$ cowsay \"hoge\"\nzsh: command not found: cowsay\n\n# グローバルインストール\n$ npm install -g cowsay\n$ cowsay \"hoge\"\n ______\n\u003c hoge \u003e\n ------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n```\n\n# 考察\n\n## これらの方法の使い分けについて\n\n基本的に `npm-srcipts` または `npx` での実行をお勧めします。\n\nまず、パスを通して実行するのであれば `npx` で実行することができます。\nなので、わざわざパスを通しながら実行する機会はないと思われます。\n\nローカルインストールしたパッケージのコマンドを頻繁に実行するコマンドであったりプロジェクトで共有すべきコマンドであれば `npm-srcipts` に登録したほうがいいと思います。\n\n一方で、たまにしか実行しないコマンドであったり、動作の検証であれば、わざわざ `npm-srcipts` に登録せずに `npx` での実行でいいと思います。\n\nむしろ、むやみに `npm-srcipts` に登録すると管理する対象が増えるのでお勧めしません。\n\n## npx のみローカルインストールの有無にかかわらず実行できる\n\n`npx` の機能としてローカルインストールされていないパッケージは、一時的にパッケージをインストールして実行してくれます。\n\nたまにしか実行しないコマンドであったり、動作の検証であれば、ローカルインストールすらせず `npx` 経由で毎回インストールしながらコマンド実行するのもありだと思います。\n\n時間はかかりますが、検証の結果、不要になったパッケージのアンインストールのし忘れなどがないというメリットがあります。\n\n【参考】\n[npxでnodeモジュールを実行する](https://qiita.com/tatakahashiap/items/1c4ab221c4993e7c4ebf)\n\n## それって本当にグローバルインストールする必要がありますか？\n\nよくネットに転がっている記事はやたらとグローバルインストールさせてきます。\nそのとき安易にグローバルインストールしないほうがいいです。\n\nグローバルインストールされたパッケージは環境が異なると使用することができません。\n\n大抵の場合、`npx` を使って一時的にインストールするだけで済むケースがほとんどです。\n\n無闇にグローバルインストールせずに `npx` を使ってみてはいかがでしょうか？\n\n# まとめ\n\n|ケース|インストール先|CLIでの実行方法|\n|:----|:----|:----|\n|・よく実行する \u003cbr\u003e・プロジェクトで共有して管理したい|ローカルインストール|・npm-srcipts|\n|・まあまあ実行する\u003cbr\u003e・今のところ自分だけ知っていればいい\u003cbr\u003e・バージョンを管理したい|ローカルインストール|・npx\u003cbr\u003e・パスを指定する|\n|・たまにしか実行しない\u003cbr\u003e・検証中である\u003cbr\u003e・ちょっと時間がかかってもよい\u003cbr\u003e・環境に影響をかけたくない\u003cbr\u003e・とりあえず実行させたい|npx による一時的インストール|・npx|\n|・それ以外\u003cbr\u003e・どうしてもグローバルインストールしたい|グローバルインストール|・普通に実行する|\n\n\n","coediting":false,"comments_count":0,"created_at":"2020-10-18T16:48:38+09:00","group":null,"id":"b814a09b65d8852226ad","likes_count":20,"private":false,"reactions_count":0,"tags":[{"name":"npm","versions":[]},{"name":"npm-scripts","versions":[]},{"name":"npx","versions":[]}],"title":"npm でローカルインストールしたパッケージを CLI でコマンド実行する方法（npm-srcipts, npx）","updated_at":"2021-02-24T19:22:57+09:00","url":"https://qiita.com/ikuraikura/items/b814a09b65d8852226ad","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"npm-run-all\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#npm-run-all\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enpm-run-all\u003c/h1\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e公式 \u003ca href=\"https://www.npmjs.com/package/npm-run-all\" rel=\"nofollow noopener\" target=\"_blank\"\u003enpm-run-all\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003enpm-run-all は複数の npm-scripts を実行できるコマンドラインツールです。\u003cbr\u003e\nオプションをつけることで引数の npm-scripts の順次実行 または 並列実行することができます。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"実行コマンド\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E8%A1%8C%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実行コマンド\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e順次実行\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003enpm-run-all --serial \u0026lt;task\u0026gt;\u003c/code\u003e = \u003ccode\u003enpm-run-all -s \u0026lt;task\u0026gt;\u003c/code\u003e = \u003ccode\u003erun-s \u0026lt;task\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e並列実行\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003enpm-run-all --parallel \u0026lt;task\u0026gt;\u003c/code\u003e = \u003ccode\u003enpm-run-all -p \u0026lt;task\u0026gt;\u003c/code\u003e = \u003ccode\u003erun-p \u0026lt;task\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"実際にやってみた\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E9%9A%9B%E3%81%AB%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実際にやってみた\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"npm-scripts-の準備\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#npm-scripts-%E3%81%AE%E6%BA%96%E5%82%99\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enpm-scripts の準備\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# 以下のような hello:foo と hello:bar という npm-scripts を追加\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# （ちなみに \u0026amp;\u0026amp; は左の処理が成功したら右の処理を実行するというもの）\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi package.json\n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e(\u003c/span\u003e省略\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\"scripts\"\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n+   \u003cspan class=\"s2\"\u003e\"hello:foo\"\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\"sleep 1 \u0026amp;\u0026amp; echo FOO\"\u003c/span\u003e,\n+   \u003cspan class=\"s2\"\u003e\"hello:bar\"\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\"sleep 1 \u0026amp;\u0026amp; echo BAR\"\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n  \u003cspan class=\"o\"\u003e(\u003c/span\u003e省略\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# 1秒後に \"FOO\" を echo する\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm run \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e hello:foo\nFOO\n\n\u003cspan class=\"c\"\u003e# 1秒後に \"BAR\" を echo する\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm run \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e hello:bar\nBAR\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"npm-run-all-のインストール\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#npm-run-all-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enpm-run-all のインストール\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# npm-run-all のパッケージをインストール\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u003cspan class=\"nt\"\u003e--save-dev\u003c/span\u003e npm-run-all\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"実行\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E8%A1%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実行\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\n\u003cspan class=\"c\"\u003e# hello:foo と hello:bar を順次実行する hello-s と hello:foo と hello:bar を並列実行する hello-p を登録\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi package.json\n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e(\u003c/span\u003e省略\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\"devDependencies\"\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\"npm-run-all\"\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\"^4.1.5\"\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n  \u003cspan class=\"s2\"\u003e\"scripts\"\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\"hello:foo\"\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\"sleep 1 \u0026amp;\u0026amp; echo FOO\"\u003c/span\u003e,\n    \u003cspan class=\"s2\"\u003e\"hello:bar\"\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\"sleep 1 \u0026amp;\u0026amp; echo BAR\"\u003c/span\u003e,\n+   \u003cspan class=\"s2\"\u003e\"hello-s\"\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\"run-s hello:foo hello:bar\"\u003c/span\u003e,\n+   \u003cspan class=\"s2\"\u003e\"hello-p\"\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\"run-p hello:foo hello:bar\"\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n  \u003cspan class=\"o\"\u003e(\u003c/span\u003e省略\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# FOO が echo されて 1秒後に BAR が echo される（順次実行）\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm run \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e hello-s\nFOO\nBAR\n\n\u003cspan class=\"c\"\u003e# FOO と BAR がほぼ同時に echo される（並列実行）\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm run \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e hello-p\nBAR\nFOO\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"ハマったこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%8F%E3%83%9E%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eハマったこと\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"npm-run-all-は-scripts-に登録したことしか実行できない\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#npm-run-all-%E3%81%AF-scripts-%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%97%E3%81%9F%E3%81%93%E3%81%A8%E3%81%97%E3%81%8B%E5%AE%9F%E8%A1%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enpm-run-all は scripts に登録したことしか実行できない\u003c/h2\u003e\n\n\u003cp\u003eなのでこういうことはできません。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"json\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003epackage.json\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"err\"\u003e(省略)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"scripts\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"hoge\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"npm-run-all -s 'sleep 1'\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"err\"\u003e(省略)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e以下のように怒られます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ npm run hoge\n\n\u0026gt; vpass_api_spec_document@1.0.0 hoge /Users/sugurutakahashi/git/vpass_api_spec_document\n\u0026gt; npm-run-all -s 'sleep 1'\n\nERROR: Task not found: \"sleep\"\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! vpass_api_spec_document@1.0.0 hoge: `npm-run-all -s 'sleep 1'`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the vpass_api_spec_document@1.0.0 hoge script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/sugurutakahashi/.npm/_logs/2020-11-03T16_29_57_468Z-debug.log\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこれは sleep コマンドが npm でインストールされたコマンドではないから、というわけでもなく、scripts にないコマンドは実行できないみたいです。\u003c/p\u003e\n\n\u003cp\u003eあくまでも npm-run-all は scripts の実行順のコントロール専用ということでしょうね。\u003c/p\u003e\n\n\u003cp\u003escripts にワンライナーで一気に登録するより、細かく scripts にコマンドを登録して、それを npm-run-all でコントロールするという使い方が適切なようです。\u003c/p\u003e\n","body":"# npm-run-all\n\n\u003e 公式 [npm-run-all](https://www.npmjs.com/package/npm-run-all)\n\nnpm-run-all は複数の npm-scripts を実行できるコマンドラインツールです。\nオプションをつけることで引数の npm-scripts の順次実行 または 並列実行することができます。\n\n# 実行コマンド\n\n- 順次実行\n  - `npm-run-all --serial \u003ctask\u003e` = `npm-run-all -s \u003ctask\u003e` = `run-s \u003ctask\u003e`\n- 並列実行\n  - `npm-run-all --parallel \u003ctask\u003e` = `npm-run-all -p \u003ctask\u003e` = `run-p \u003ctask\u003e`\n\n# 実際にやってみた\n\n## npm-scripts の準備\n\n```shell\n# 以下のような hello:foo と hello:bar という npm-scripts を追加\n# （ちなみに \u0026\u0026 は左の処理が成功したら右の処理を実行するというもの）\n$ vi package.json\n{\n  (省略)\n  \"scripts\": {\n+   \"hello:foo\": \"sleep 1 \u0026\u0026 echo FOO\",\n+   \"hello:bar\": \"sleep 1 \u0026\u0026 echo BAR\"\n  },\n  (省略)\n}\n\n# 1秒後に \"FOO\" を echo する\n$ npm run -s hello:foo\nFOO\n\n# 1秒後に \"BAR\" を echo する\n$ npm run -s hello:bar\nBAR\n```\n\n## npm-run-all のインストール\n\n```shell\n# npm-run-all のパッケージをインストール\n$ npm install --save-dev npm-run-all\n```\n\n## 実行\n\n```shell\n\n# hello:foo と hello:bar を順次実行する hello-s と hello:foo と hello:bar を並列実行する hello-p を登録\n$ vi package.json\n{\n  (省略)\n  \"devDependencies\": {\n    \"npm-run-all\": \"^4.1.5\"\n  },\n  \"scripts\": {\n    \"hello:foo\": \"sleep 1 \u0026\u0026 echo FOO\",\n    \"hello:bar\": \"sleep 1 \u0026\u0026 echo BAR\",\n+   \"hello-s\": \"run-s hello:foo hello:bar\",\n+   \"hello-p\": \"run-p hello:foo hello:bar\"\n  },\n  (省略)\n}\n\n# FOO が echo されて 1秒後に BAR が echo される（順次実行）\n$ npm run -s hello-s\nFOO\nBAR\n\n# FOO と BAR がほぼ同時に echo される（並列実行）\n$ npm run -s hello-p\nBAR\nFOO\n```\n\n# ハマったこと\n\n## npm-run-all は scripts に登録したことしか実行できない\n\nなのでこういうことはできません。\n\n```json:package.json\n{\n  (省略)\n  \"scripts\": {\n    \"hoge\": \"npm-run-all -s 'sleep 1'\"\n  },\n  (省略)\n}\n```\n\n以下のように怒られます。\n\n```\n$ npm run hoge\n\n\u003e vpass_api_spec_document@1.0.0 hoge /Users/sugurutakahashi/git/vpass_api_spec_document\n\u003e npm-run-all -s 'sleep 1'\n\nERROR: Task not found: \"sleep\"\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! vpass_api_spec_document@1.0.0 hoge: `npm-run-all -s 'sleep 1'`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the vpass_api_spec_document@1.0.0 hoge script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/sugurutakahashi/.npm/_logs/2020-11-03T16_29_57_468Z-debug.log\n```\nこれは sleep コマンドが npm でインストールされたコマンドではないから、というわけでもなく、scripts にないコマンドは実行できないみたいです。\n\nあくまでも npm-run-all は scripts の実行順のコントロール専用ということでしょうね。\n\nscripts にワンライナーで一気に登録するより、細かく scripts にコマンドを登録して、それを npm-run-all でコントロールするという使い方が適切なようです。\n","coediting":false,"comments_count":0,"created_at":"2020-10-18T16:37:01+09:00","group":null,"id":"2a17a3cdfbc4a7e5e4eb","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"npm","versions":[]},{"name":"npm-scripts","versions":[]},{"name":"npm-run-all","versions":[]}],"title":"npm-scripts の 順次・並列実行（npm-run-all）","updated_at":"2020-11-04T01:38:52+09:00","url":"https://qiita.com/ikuraikura/items/2a17a3cdfbc4a7e5e4eb","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\u003cp\u003enpm-scripts には、\u003ccode\u003epre\u003c/code\u003e または \u003ccode\u003epost\u003c/code\u003e プレフィックスをつけることで、その npm-scripts の前後に実行される処理を記述することができます。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003epre\u003c/strong\u003exxxx\n\n\u003cul\u003e\n\u003cli\u003enpm-scripts の \u003ccode\u003exxxx\u003c/code\u003e の\u003cstrong\u003e前\u003c/strong\u003eに実行される\u003c/li\u003e\n\u003cli\u003eex) \u003ccode\u003eprestart\u003c/code\u003e は\u003ccode\u003estart\u003c/code\u003e の\u003cstrong\u003e前\u003c/strong\u003eに実行される\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003epost\u003c/strong\u003exxxx\n\n\u003cul\u003e\n\u003cli\u003enpm-scripts の \u003ccode\u003exxxx\u003c/code\u003e の\u003cstrong\u003e後\u003c/strong\u003eに実行される\u003c/li\u003e\n\u003cli\u003eex) \u003ccode\u003eprestart\u003c/code\u003e は \u003ccode\u003estart\u003c/code\u003e の\u003cstrong\u003e後\u003c/strong\u003eに実行される\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e# cowsay 実行前に実行する precowsay、cowsay 実行後に実行する postcowsay を追加（内容はechoされる簡単なもの）\n$ vi package.json\n{\n  (省略)\n  \"dependencies\": {\n    \"cowsay\": \"^1.4.0\"\n  },\n  \"scripts\": {\n    \"cowsay\": \"cowsay\",\n+   \"precowsay\": \"echo 'pre cowsay'\",\n+   \"postcowsay\": \"echo 'post cowsay'\"\n  },\n  (省略)\n}\n\n# npm-scripts の cowsay コマンド実行によって package.json の npm-scripts の precowsay と postcowsay が実行されることの確認\n$ npm run -s cowsay -- \"hoge\"\npre cowsay\n ______\n\u0026lt; hoge \u0026gt;\n ------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\npost cowsay\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n","body":"\n\nnpm-scripts には、`pre` または `post` プレフィックスをつけることで、その npm-scripts の前後に実行される処理を記述することができます。\n\n- **pre**xxxx\n  - npm-scripts の `xxxx` の**前**に実行される\n  - ex) `prestart` は`start` の**前**に実行される\n- **post**xxxx\n  - npm-scripts の `xxxx` の**後**に実行される\n  - ex) `prestart` は `start` の**後**に実行される\n\n```\n# cowsay 実行前に実行する precowsay、cowsay 実行後に実行する postcowsay を追加（内容はechoされる簡単なもの）\n$ vi package.json\n{\n  (省略)\n  \"dependencies\": {\n    \"cowsay\": \"^1.4.0\"\n  },\n  \"scripts\": {\n    \"cowsay\": \"cowsay\",\n+   \"precowsay\": \"echo 'pre cowsay'\",\n+   \"postcowsay\": \"echo 'post cowsay'\"\n  },\n  (省略)\n}\n\n# npm-scripts の cowsay コマンド実行によって package.json の npm-scripts の precowsay と postcowsay が実行されることの確認\n$ npm run -s cowsay -- \"hoge\"\npre cowsay\n ______\n\u003c hoge \u003e\n ------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\npost cowsay\n```\n","coediting":false,"comments_count":0,"created_at":"2020-10-18T16:34:20+09:00","group":null,"id":"91a133abacfc38b3d7a7","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"npm","versions":[]},{"name":"npm-scripts","versions":[]}],"title":"npm-scripts の pre, post プレフィックス","updated_at":"2020-10-19T00:13:33+09:00","url":"https://qiita.com/ikuraikura/items/91a133abacfc38b3d7a7","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003epackage.json がないときに \u003ccode\u003enpm init\u003c/code\u003e せずに、いきなり \u003ccode\u003enpm install\u003c/code\u003e したらどうなるのか気になったので、以下の2通りで試してみました。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e1. \u003ccode\u003enpm init\u003c/code\u003e せずに \u003ccode\u003enpm install\u003c/code\u003e した場合\u003c/strong\u003e\u003cbr\u003e\n\u003cstrong\u003e2. \u003ccode\u003enpm init\u003c/code\u003e せずに \u003ccode\u003enpm install \u0026lt;package\u0026gt;\u003c/code\u003e した場合\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"結論\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E8%AB%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結論\u003c/h1\u003e\n\n\u003cp\u003e結論から先にいうと \u003ccode\u003enpm init\u003c/code\u003e しなくても \u003ccode\u003enpm install\u003c/code\u003e に失敗するわけでもないし、引数にパッケージを指定すれば node_modules が作成されてパッケージのインストールにも成功しました。\u003c/p\u003e\n\n\u003cp\u003eなので、\u003cstrong\u003eエラーになるということはありませんし、パッケージも普通にインストールされます。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e一見、問題ないように思いますが、package.json が作成されないため、どのパッケージをインストールしたかの記述がどこにも記されす、node_modules の内容を管理するのは難しくなります。\u003c/p\u003e\n\n\u003cp\u003e一方で、package-lock.json は作成されますが、package-lock.json にはインストールしたパッケージの結果のみが記されて、パッケージの依存関係まではわからないので、\u003cstrong\u003eやはり package.json はソースを管理する上で必要になります。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eなので、package.json がなければ \u003ccode\u003enpm install\u003c/code\u003e する前に \u003ccode\u003enpm init\u003c/code\u003e で package.json を作成すべきでしょう。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"実際にやってみた\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E9%9A%9B%E3%81%AB%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実際にやってみた\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"動作環境\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8B%95%E4%BD%9C%E7%92%B0%E5%A2%83\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e動作環境\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Node.js のバージョン確認\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enode \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e\nv14.13.1\n\n\u003cspan class=\"c\"\u003e# npm のバージョン確認\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e\n6.14.8\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"1-npm-init-せずに-npm-install-した場合\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#1-npm-init-%E3%81%9B%E3%81%9A%E3%81%AB-npm-install-%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e1. \u003ccode\u003enpm init\u003c/code\u003e せずに \u003ccode\u003enpm install\u003c/code\u003e した場合\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# 何もない空のディレクトリ\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e\n（標準出力なし）\n\n\u003cspan class=\"c\"\u003e# npm install の実行\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# package-lock.json のみが作成される（package.json は作成されない）\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\n\u003c/span\u003epackage-lock.json\n\n\u003cspan class=\"c\"\u003e# 中身は lockfileVersion のみの記述でパッケージ情報はありませんでした（当たり前）\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003epackage-lock.json \n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\"lockfileVersion\"\u003c/span\u003e: 1\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"2-npm-init-せずに-npm-install-package-した場合\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#2-npm-init-%E3%81%9B%E3%81%9A%E3%81%AB-npm-install-package-%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e2. \u003ccode\u003enpm init\u003c/code\u003e せずに \u003ccode\u003enpm install \u0026lt;package\u0026gt;\u003c/code\u003e した場合\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# 何もない空のディレクトリ\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e\n（標準出力なし）\n\n\u003cspan class=\"c\"\u003e# cowsay パッケージをインストール\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm \u003cspan class=\"nb\"\u003einstall \u003c/span\u003ecowsay\n+ cowsay@1.4.0\n\n\u003cspan class=\"c\"\u003e# package-lock.json と node_modules が作成されるが package.json がない\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\n\u003c/span\u003enode_modules\npackage-lock.json\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"さいごに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eさいごに\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003epackage.json がなければ \u003ccode\u003enpm install\u003c/code\u003e する前に \u003ccode\u003enpm init\u003c/code\u003e で package.json を作成すべきです。\u003c/strong\u003e\u003c/p\u003e\n","body":"# はじめに\n\npackage.json がないときに `npm init` せずに、いきなり `npm install` したらどうなるのか気になったので、以下の2通りで試してみました。\n\n**1. `npm init` せずに `npm install` した場合**\n**2. `npm init` せずに `npm install \u003cpackage\u003e` した場合**\n\n# 結論\n\n結論から先にいうと `npm init` しなくても `npm install` に失敗するわけでもないし、引数にパッケージを指定すれば node_modules が作成されてパッケージのインストールにも成功しました。\n\nなので、**エラーになるということはありませんし、パッケージも普通にインストールされます。**\n\n一見、問題ないように思いますが、package.json が作成されないため、どのパッケージをインストールしたかの記述がどこにも記されす、node_modules の内容を管理するのは難しくなります。\n\n一方で、package-lock.json は作成されますが、package-lock.json にはインストールしたパッケージの結果のみが記されて、パッケージの依存関係まではわからないので、**やはり package.json はソースを管理する上で必要になります。**\n\n**なので、package.json がなければ `npm install` する前に `npm init` で package.json を作成すべきでしょう。**\n\n# 実際にやってみた\n\n## 動作環境\n\n```shell\n# Node.js のバージョン確認\n$ node -v\nv14.13.1\n\n# npm のバージョン確認\n$ npm -v\n6.14.8\n```\n\n## 1. `npm init` せずに `npm install` した場合\n\n```shell\n# 何もない空のディレクトリ\n$ ls\n（標準出力なし）\n\n# npm install の実行\n$ npm install\n\n# package-lock.json のみが作成される（package.json は作成されない）\n$ ls\npackage-lock.json\n\n# 中身は lockfileVersion のみの記述でパッケージ情報はありませんでした（当たり前）\n$ cat package-lock.json \n{\n  \"lockfileVersion\": 1\n}\n```\n\n## 2. `npm init` せずに `npm install \u003cpackage\u003e` した場合\n\n```shell\n# 何もない空のディレクトリ\n$ ls\n（標準出力なし）\n\n# cowsay パッケージをインストール\n$ npm install cowsay\n+ cowsay@1.4.0\n\n# package-lock.json と node_modules が作成されるが package.json がない\n$ ls\nnode_modules\npackage-lock.json\n```\n\n# さいごに\n\n**package.json がなければ `npm install` する前に `npm init` で package.json を作成すべきです。**\n","coediting":false,"comments_count":0,"created_at":"2020-10-18T01:28:19+09:00","group":null,"id":"1049a33b86225f6345fe","likes_count":12,"private":false,"reactions_count":0,"tags":[{"name":"npm","versions":[]}],"title":"npm init しないとどうなる？","updated_at":"2020-11-30T12:24:40+09:00","url":"https://qiita.com/ikuraikura/items/1049a33b86225f6345fe","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\u003cp\u003e\u003ccode\u003egibo\u003c/code\u003e とは .gitignore を自動的に作るツールである。\u003cbr\u003e\n同じようなツールとして \u003ca href=\"https://www.toptal.com/developers/gitignore\" rel=\"nofollow noopener\" target=\"_blank\"\u003egitignore.io\u003c/a\u003e というサービスがある。\u003c/p\u003e\n\n\u003cp\u003eメリット・デメリットそれぞれあるが、一度リポジトリを引っ張ってくればいろんな言語でもオフラインで完結できる \u003ccode\u003egibo\u003c/code\u003e の方が優秀のように思える。\u003c/p\u003e\n\n\u003cp\u003eそう何度も .gitignore を編集しないし \u003ccode\u003egitignore.io\u003c/code\u003e で検索かけてコピペするのが直感的でやりやすいと思う。\u003c/p\u003e\n\n\u003cp\u003e正直どちらでもよさそう。\u003c/p\u003e\n\n\u003cp\u003e.gitignore をネットの記事のコピペして作成するよりは、こういうツールをつかったほうが無難だと思う。\u003c/p\u003e\n\n\u003cp\u003e（参考）\u003cbr\u003e\n\u003ca href=\"https://qiita.com/taquaki-satwo/items/358d2d473fff9a25d5eb\" id=\"reference-f9d4494475fffc1a7042\"\u003egiboでgitignoreを自動生成する\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://qiita.com/yumechi/items/b7932f5b31613a1f50f9\" id=\"reference-2bf54e9a588d309b0e7f\"\u003e.gitignoreを自動的に作る（gibo, gitignore.io を使う）\u003c/a\u003e\u003c/p\u003e\n","body":"`gibo` とは .gitignore を自動的に作るツールである。\n同じようなツールとして [gitignore.io](https://www.toptal.com/developers/gitignore) というサービスがある。\n\nメリット・デメリットそれぞれあるが、一度リポジトリを引っ張ってくればいろんな言語でもオフラインで完結できる `gibo` の方が優秀のように思える。\n\nそう何度も .gitignore を編集しないし `gitignore.io` で検索かけてコピペするのが直感的でやりやすいと思う。\n\n正直どちらでもよさそう。\n\n.gitignore をネットの記事のコピペして作成するよりは、こういうツールをつかったほうが無難だと思う。\n\n（参考）\n[giboでgitignoreを自動生成する](https://qiita.com/taquaki-satwo/items/358d2d473fff9a25d5eb)\n[.gitignoreを自動的に作る（gibo, gitignore.io を使う）](https://qiita.com/yumechi/items/b7932f5b31613a1f50f9)\n","coediting":false,"comments_count":0,"created_at":"2020-10-18T01:02:07+09:00","group":null,"id":"86366ced5d60536c1492","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"gibo","versions":[]},{"name":"gitignore.io","versions":[]}],"title":"gibo や gitignore.io についてのメモ","updated_at":"2020-10-18T01:02:07+09:00","url":"https://qiita.com/ikuraikura/items/86366ced5d60536c1492","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\u003cp\u003eどんな IDE・エディタ でもコーディンングスタイルを定義、維持するツール。\u003cbr\u003e\n\u003ccode\u003e.editorconfig\u003c/code\u003e というファイルにルールを定義する。\u003c/p\u003e\n\n\u003cp\u003e正直、開発するときはチームで IDE・エディタを合わせるので、あんまり必要性は感じない（今のところ VSCode 一強）。\u003c/p\u003e\n\n\u003cp\u003e（参考）\u003cbr\u003e\nどんなエディタでもEditorConfigを使ってコードの統一性を高める\u003c/p\u003e\n","body":"どんな IDE・エディタ でもコーディンングスタイルを定義、維持するツール。\n`.editorconfig` というファイルにルールを定義する。\n\n正直、開発するときはチームで IDE・エディタを合わせるので、あんまり必要性は感じない（今のところ VSCode 一強）。\n\n（参考）\nどんなエディタでもEditorConfigを使ってコードの統一性を高める\n","coediting":false,"comments_count":0,"created_at":"2020-10-18T00:56:47+09:00","group":null,"id":"c95b6d9a55367ef15c75","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"EditorConfig","versions":[]}],"title":"EditorConfig についてのメモ","updated_at":"2020-10-18T00:57:01+09:00","url":"https://qiita.com/ikuraikura/items/c95b6d9a55367ef15c75","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003eネットに転がっている記事などで \u003ccode\u003enpm install\u003c/code\u003e のコマンドをよく分からず実行してきましたが、そろそろその状態から卒業したかったので備忘録をかねてこちらの記事を投稿しました。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003enpm install\u003c/code\u003e コマンドに関することをメインにお伝えしますが、package.json や node_modules など npm を語る上で基本的なことについても触れていきたいと思います。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"目的\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%9B%AE%E7%9A%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e目的\u003c/h1\u003e\n\n\u003cp\u003eこの記事の目的は、以下の4つの \u003ccode\u003enpm install\u003c/code\u003e コマンドを実行したときの挙動の理解と、これら4つのコマンドを必要な状況に応じて使いわけるようになることです。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003enpm install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm install -g \u0026lt;package\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm install \u0026lt;package\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm install -D \u0026lt;package\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eつまり、適当に \u003ccode\u003enpm install\u003c/code\u003e するのを卒業することです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"動作環境\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8B%95%E4%BD%9C%E7%92%B0%E5%A2%83\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e動作環境\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Node.js のバージョン確認\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enode \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e\nv14.13.1\n\n\u003cspan class=\"c\"\u003e# npm のバージョン確認\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e\n6.14.8\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eちなみに npm 自体のアップデートは以下のコマンドになります。\u003cbr\u003e\nnpm はメジャーバージョンが異なるとかなり挙動が異なるので、参照する記事の npm のバージョンにも注意が必要です。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# npm のアップデート\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm update \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e npm\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"npm-install-を説明する前に知っておきたいこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#npm-install-%E3%82%92%E8%AA%AC%E6%98%8E%E3%81%99%E3%82%8B%E5%89%8D%E3%81%AB%E7%9F%A5%E3%81%A3%E3%81%A6%E3%81%8A%E3%81%8D%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enpm install を説明する前に知っておきたいこと\u003c/h1\u003e\n\n\u003cp\u003eこの辺を理解しておかないと適当に \u003ccode\u003enpm install\u003c/code\u003e してしまうことになるので、先に説明します。\u003cbr\u003e\n知っている方は飛ばしても大丈夫です。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"nodejs\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#nodejs\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eNode.js\u003c/h2\u003e\n\n\u003cp\u003eNode.js とはサーバサイドで動く JavaScript のことです。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"npm\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#npm\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enpm\u003c/h2\u003e\n\n\u003cp\u003enpm（Node Package Manager）とは Node.js のパッケージ（Package）を管理する（Manager）ツールです。\u003c/p\u003e\n\n\u003cp\u003eNode.js のパッケージ（Package）とは予め用意された便利な機能（各種フレームワークやライブラリ）をまとめたものです。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"yarn\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#yarn\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eyarn\u003c/h2\u003e\n\n\u003cp\u003eyarn とは 2016 年にリリースされた npm と互換性のあるパッケージマネージャーです。\u003c/p\u003e\n\n\u003cp\u003e今回は yarn コマンドについては触れませんが、以下の意見にとても納得しました。\u003cbr\u003e\nご参考まで。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eちなみに: 似たような CLI として Facebook が開発した Yarn がある。これは npm の色々な欠点(スピードなど)を補うように作られたものであり、かなり人気がある。npm パッケージの README でしばしば npm と yarn でインストールする方法が両方書かれていたり、時には「yarn を使用することを推奨する」と書かれていたりする。しかし、npm も改善されてきており、わざわざ yarn をインストールして使用するメリットはあまりないと筆者は考えている。特に初心者にとっては、スタンダードでないツールを使用すると無駄に学ぶことが増えるのでおすすめしない。\u003c/p\u003e\n\n\u003cp\u003e【初心者向け】NPMとpackage.jsonを概念的に理解する （抜粋）\u003cbr\u003e\n\u003ca href=\"https://qiita.com/righteous/items/e5448cb2e7e11ab7d477\" class=\"autolink\" id=\"reference-8d31a225e3c41e093d27\"\u003ehttps://qiita.com/righteous/items/e5448cb2e7e11ab7d477\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"packagejson\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#packagejson\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003epackage.json\u003c/h2\u003e\n\n\u003cp\u003epackage.json とは Node.js ベースの JavaScript アプリ開発において、自身のパッケージ（= プロジェクトそのもの）を管理するために使われるファイルのことです。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003enpm init\u003c/code\u003e とコマンド実行すると package.json が作成されます。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"package-lockjson\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#package-lockjson\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003epackage-lock.json\u003c/h2\u003e\n\n\u003cp\u003e簡単に説明すると package.json を用いてパッケージをインストールした結果が記載されるファイルです。\u003cbr\u003e\n今回は説明を省略しますが、詳しく知りたい人は【参考】のリンク先を参照してください。\u003c/p\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/1f6bb7a372b8263500e5\" id=\"reference-c848b37155f1c92063c2\"\u003epackage-lock.json ってなに？\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"npm-init\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#npm-init\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enpm init\u003c/h2\u003e\n\n\u003cp\u003epackage.json は普通に touch コマンドなどでも作成できますが、基本的には \u003ccode\u003enpm init\u003c/code\u003e とコマンド実行して package.json を作成します。\u003c/p\u003e\n\n\u003cp\u003e（【脱線】\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/1049a33b86225f6345fe\" id=\"reference-20cb300d37dac1990718\"\u003enpm init しないとどうなる？\u003c/a\u003e）\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# 何もない空のディレクトリ\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e\n（標準出力なし）\n\n\u003cspan class=\"c\"\u003e# npm init による package.json の作成（質問をされるが一旦すべて Enter で通過する = npm init -y コマンド実行時と同じ挙動）\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm init\n\n\u003cspan class=\"c\"\u003e# package.json が作成されている\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\n\u003c/span\u003epackage.json\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003epackage.json の初期値は以下のようなものになります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"json\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003epackage.json\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"name\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u0026lt;current directory name\u0026gt;\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"version\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"1.0.0\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"description\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"main\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"index.js\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"scripts\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"test\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"echo \u003c/span\u003e\u003cspan class=\"se\"\u003e\\\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eError: no test specified\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u0026amp;\u0026amp; exit 1\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"keywords\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"author\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"license\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"ISC\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003epackage.json にはいろいろ項目がありますが \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003eversion\u003c/code\u003e, \u003ccode\u003edescription\u003c/code\u003e, \u003ccode\u003ekeywords\u003c/code\u003e, \u003ccode\u003eauthor\u003c/code\u003e, \u003ccode\u003elicense\u003c/code\u003e などのデータは単なる自身のパッケージ（= プロジェクトそのもの）のメタデータであり、自身のパッケージ（= プロジェクトそのもの）を公開しなのであれば、気にする必要はありません。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003edependencies\u003c/code\u003e, \u003ccode\u003edevDependencies\u003c/code\u003e, \u003ccode\u003escripts\u003c/code\u003e, \u003ccode\u003econfig\u003c/code\u003e の4つぐらいを抑えれば、あとは必要に応じて調べて設定すれば問題ないかと思います。\u003c/p\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\n\u003ca href=\"https://qiita.com/mzmz__02/items/dfa7abb4237a3842a2a8\" id=\"reference-397cfeba0391649c534c\"\u003epackage.jsonの構造\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"npm-と-packagejson-の関係\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#npm-%E3%81%A8-packagejson-%E3%81%AE%E9%96%A2%E4%BF%82\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enpm と package.json の関係\u003c/h2\u003e\n\n\u003cp\u003e公開されているパッケージ（ライブラリやフレームワークなど）は \u003ccode\u003enpm\u003c/code\u003e コマンドによってインストールすることができます。\u003c/p\u003e\n\n\u003cp\u003epackage.json が存在するディレクトリで \u003ccode\u003enpm\u003c/code\u003e コマンドによってパッケージをインストールすると、自動的に package.json が更新されます。\u003c/p\u003e\n\n\u003cp\u003eまた、\u003cstrong\u003e人間が package.json に記述されているパッケージ名やバージョン情報を直接編集することはありません。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eそれらは \u003ccode\u003enpm\u003c/code\u003e コマンド経由で更新します。（大事）\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"node_modules\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#node_modules\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enode_modules\u003c/h2\u003e\n\n\u003cp\u003enode_modules とは package.json を元にしてインストールされる各種パッケージがインストールされるディレクトリ先のことです。\u003c/p\u003e\n\n\u003cp\u003epackage.json さえあれば、\u003ccode\u003enpm install\u003c/code\u003e コマンドの実行によって node_modules が生成することが可能です。\u003c/p\u003e\n\n\u003cp\u003eそのため通常は \u003ccode\u003e.gitignore\u003c/code\u003e に指定されるディレクトリになります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"npm-install\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#npm-install\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enpm install\u003c/h1\u003e\n\n\u003cp\u003eここからがこの記事の本題になります。\u003c/p\u003e\n\n\u003cp\u003eパッケージを node_modules にインストールするには \u003ccode\u003enpm install\u003c/code\u003e とコマンド実行します。\u003c/p\u003e\n\n\u003cp\u003eこの \u003ccode\u003enpm install\u003c/code\u003e というコマンドですが、これがいろいろと種類があってややこしいので詳しく説明していきます。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"とりあえずよく使うコマンド一覧\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E3%82%88%E3%81%8F%E4%BD%BF%E3%81%86%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E4%B8%80%E8%A6%A7\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eとりあえずよく使うコマンド一覧\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e引数なしでの実行する場合\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# 引数なし実行（package.json のあるディレクトリで実行する）\u003c/span\u003e\nnpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eグローバルインストール\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# グローバルインストール\u003c/span\u003e\nnpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e \u0026lt;package\u0026gt;\nnpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u003cspan class=\"nt\"\u003e--global\u003c/span\u003e \u0026lt;package\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eローカルインストール\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# ローカルインストール\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# package.json の dependencies に追加するとき（npm v4 以下では --save (= -S) のオプションが必要、npm v5 以上ではデフォルトになったため不要）\u003c/span\u003e\nnpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u0026lt;package\u0026gt;\nnpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u003cspan class=\"nt\"\u003e--save\u003c/span\u003e \u0026lt;package\u0026gt; \u003cspan class=\"c\"\u003e# デフォルトで入っているオプションなので使う必要なし\u003c/span\u003e\nnpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u003cspan class=\"nt\"\u003e-S\u003c/span\u003e \u0026lt;package\u0026gt; \u003cspan class=\"c\"\u003e# デフォルトで入っているオプションなので使う必要なし\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# package.json の devDependencies に追加するとき --save-dev (= -D)\u003c/span\u003e\nnpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u003cspan class=\"nt\"\u003e--save-dev\u003c/span\u003e \u0026lt;package\u0026gt;\nnpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u003cspan class=\"nt\"\u003e-D\u003c/span\u003e \u0026lt;package\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eバージョン指定のインストール\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# バージョンに関する指定\u003c/span\u003e\nnpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u0026lt;package\u0026gt;@x.y.z \u003cspan class=\"c\"\u003e# バージョンを指定する場合\u003c/span\u003e\nnpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u0026lt;package\u0026gt;@latest \u003cspan class=\"c\"\u003e# 最新版を指定する場合（ @latest とつけなくても指定しなければ最新版がインストールされる）\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"引数なし-npm-install\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%BC%95%E6%95%B0%E3%81%AA%E3%81%97-npm-install\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e引数なし \u003ccode\u003enpm install\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003e引数のない \u003ccode\u003enpm install\u003c/code\u003e コマンド実行時の挙動は、引数のある \u003ccode\u003enpm install \u0026lt;package\u0026gt;\u003c/code\u003e とわけて考えたほうがわかりやすいです。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e引数のない \u003ccode\u003enpm install\u003c/code\u003e コマンド実行をすると、カレントディレクトリにある package.json に記述されている情報を元に、そこに記述されている パッケージを node_modules （インストール先）にインストールします。\u003c/strong\u003e \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e使うタイミングは 「package.json を共有されて node_modules を作成していない時」や「package.json が更新された時」などになります。\u003c/strong\u003e \u003c/p\u003e\n\n\u003cp\u003eまた、\u003ccode\u003enpm install\u003c/code\u003e コマンド実行する前に、あらかじめ package.json にインストールしたいパッケージ情報を記述しておく必要があります。\u003c/p\u003e\n\n\u003cp\u003eそして、その package.json へのパッケージ情報を記述は、引数ありの \u003ccode\u003enpm install \u0026lt;package\u0026gt;\u003c/code\u003e のコマンドの実行によって行います。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"引数あり-npm-install-package\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%BC%95%E6%95%B0%E3%81%82%E3%82%8A-npm-install-package\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e引数あり \u003ccode\u003enpm install \u0026lt;package\u0026gt;\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003e大きな分類としてグローバルインストールとローカルインストールに分けられます。\u003cbr\u003e\nまた、ローカルインストールのなかでも package.json の記述先の違いで2つに分けられます。\u003c/p\u003e\n\n\u003cp\u003e全体で見るとグローバルインストール1種類、ローカルインストール2種類の合計3種類になります。\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eコマンド\u003c/th\u003e\n\u003cth\u003e大分類\u003c/th\u003e\n\u003cth\u003epackage.json の記述先\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003enpm install -g \u0026lt;package\u0026gt;\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eグローバルインストール\u003c/td\u003e\n\u003ctd\u003e-\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003enpm install \u0026lt;package\u0026gt;\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eローカルインストール\u003c/td\u003e\n\u003ctd\u003edependencies\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003enpm install -D \u0026lt;package\u0026gt;\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eローカルインストール\u003c/td\u003e\n\u003ctd\u003edevDependencies\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eちなみに「グローバルインストール」と「ローカルインストール」の両方とも自身のPCの環境へインストールされます。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"グローバルインストール\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eグローバルインストール\u003c/h3\u003e\n\n\u003cp\u003eグローバルインストールすると自身の PC の環境ならどこでもインストールしたパッケージ（コマンド）が実行できます。\u003c/p\u003e\n\n\u003cp\u003eただし、グローバルインストールしても \u003ccode\u003enodebrew\u003c/code\u003e などで複数の Node.js のバージョンを管理している場合は、それぞれのバージョンで \u003ccode\u003enpm install -g \u0026lt;package\u0026gt;\u003c/code\u003e したパッケージが、それぞれ別のものとして管理されるので注意が必要です。\u003c/p\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/8820b09db0dc1507f563\" id=\"reference-0df961a954a364dbf58b\"\u003e【npm】 パッケージのインストール先の確認（npm list）\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eグローバルインストールの挙動\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# 未インストールなので cowsay コマンドは実行できない\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecowsay \u003cspan class=\"s2\"\u003e\"hoge\"\u003c/span\u003e\nzsh: \u003cspan class=\"nb\"\u003ecommand \u003c/span\u003enot found: cowsay\n\n\u003cspan class=\"c\"\u003e# cowsay コマンドをグローバルインストール\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e cowsay\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecowsay \u003cspan class=\"s2\"\u003e\"hoge\"\u003c/span\u003e\n ______\n\u0026lt; hoge \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n \u003cspan class=\"nt\"\u003e------\u003c/span\u003e\n        \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e  ^__^\n         \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003eoo\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\_\u003c/span\u003e______\n            \u003cspan class=\"o\"\u003e(\u003c/span\u003e__\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\ \u003c/span\u003e      \u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\/\\\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"nt\"\u003e----w\u003c/span\u003e |\n                \u003cspan class=\"o\"\u003e||\u003c/span\u003e     \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"ローカルインストール\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eローカルインストール\u003c/h3\u003e\n\n\u003cp\u003eローカルインストールすると node_modules と同じディレクトリにある場合にパッケージ（コマンド）が実行できます。\u003c/p\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/b814a09b65d8852226ad\" id=\"reference-1da69667571a06ed7f16\"\u003enpm でローカルインストールしたパッケージを CLI でコマンド実行する方法（npm-srcipts, npx）\u003c/a\u003e\u003c/p\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"ローカルインストールの挙動--d-オプションなしの場合\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%AE%E6%8C%99%E5%8B%95--d-%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AA%E3%81%97%E3%81%AE%E5%A0%B4%E5%90%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eローカルインストールの挙動（ \u003ccode\u003e-D\u003c/code\u003e オプションなしの場合）\u003c/h4\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# 適当なパッケージ（cowsay）をインストール\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm \u003cspan class=\"nb\"\u003einstall \u003c/span\u003ecowsay\n+ cowsay@1.4.0\n\n\u003cspan class=\"c\"\u003e# dependencies の項目に cowsay が追加されていることが確認できる\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003epackage.json\n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  （省略）\n+ \u003cspan class=\"s2\"\u003e\"dependencies\"\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n+   \u003cspan class=\"s2\"\u003e\"cowsay\"\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\"^1.4.0\"\u003c/span\u003e\n+ \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n  （省略）\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# node_modules にインストールされるのでパスを通しながら実行可能\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./node_modules/.bin/cowsay \u003cspan class=\"s2\"\u003e\"hoge\"\u003c/span\u003e \n ______\n\u0026lt; hoge \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n \u003cspan class=\"nt\"\u003e------\u003c/span\u003e\n        \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e  ^__^\n         \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003eoo\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\_\u003c/span\u003e______\n            \u003cspan class=\"o\"\u003e(\u003c/span\u003e__\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\ \u003c/span\u003e      \u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\/\\\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"nt\"\u003e----w\u003c/span\u003e |\n                \u003cspan class=\"o\"\u003e||\u003c/span\u003e     \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"ローカルインストールの挙動--d-オプションありの場合\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%AE%E6%8C%99%E5%8B%95--d-%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%82%E3%82%8A%E3%81%AE%E5%A0%B4%E5%90%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eローカルインストールの挙動（ \u003ccode\u003e-D\u003c/code\u003e オプションありの場合）\u003c/h4\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# 適当なパッケージ（typescript）を -D のオプションをつけてインストール\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u003cspan class=\"nt\"\u003e-D\u003c/span\u003e typescript\n+ typescript@4.0.3\n\n\u003cspan class=\"c\"\u003e# devDependencies の項目の typescript が追加されていることが確認できる\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003epackage.json\n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  （省略）\n  \u003cspan class=\"s2\"\u003e\"dependencies\"\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\"cowsay\"\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\"^1.4.0\"\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n+ \u003cspan class=\"s2\"\u003e\"devDependencies\"\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n+   \u003cspan class=\"s2\"\u003e\"typescript\"\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\"^4.0.3\"\u003c/span\u003e\n+ \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n  （省略）\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# -D のオプションをつけても変わらずに node_modules にインストールされるのでパスを通しながら実行可能\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e./node_modules/.bin/tsc \u003cspan class=\"nt\"\u003e--version\u003c/span\u003e \nVersion 4.0.3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"グローバルインストール-と-ローカルインストールの使い分け\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB-%E3%81%A8-%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%AE%E4%BD%BF%E3%81%84%E5%88%86%E3%81%91\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eグローバルインストール と ローカルインストールの使い分け\u003c/h2\u003e\n\n\u003cp\u003eでは、パッケージをインストールする場合、\u003cstrong\u003eグローバルインストール\u003c/strong\u003e と \u003cstrong\u003eローカルインストール\u003c/strong\u003e のどちらにインストールすべきでしょうか？\u003c/p\u003e\n\n\u003cp\u003e状況によりますが、\u003cstrong\u003e闇雲にグローバルインストールするのは避けたほうがいいです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eグローバルインストールされたパッケージは環境が異なると使用することができません。\u003c/p\u003e\n\n\u003cp\u003e例えば、PC を買い替えたらそのパッケージを使用することができないですし、他人の PC でもそのパッケージを使用することができません。\u003c/p\u003e\n\n\u003cp\u003eそいういうときにローカルインストールで作成される package.json だけを共有すれば、どの環境でも \u003ccode\u003enpm install\u003c/code\u003e を実行するだけで、同じパッケージを使用することができます。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e『どんなディレクトリでも、いつでもどこでもそのコマンドを使いたい』というパッケージだけをグローバルインストールして、それ以外はローカルインストールするのが無難だと思います。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ローカルインストール時に--d-オプションをつけるべきケース\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%99%82%E3%81%AB--d-%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E3%81%B9%E3%81%8D%E3%82%B1%E3%83%BC%E3%82%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eローカルインストール時に \u003ccode\u003e-D\u003c/code\u003e オプションをつけるべきケース\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e一般的に、開発環境でしか使用しないパッケージについては \u003ccode\u003enpm install -D \u0026lt;package\u0026gt;\u003c/code\u003e として、そうではないパッケージについては \u003ccode\u003enpm install \u0026lt;package\u0026gt;\u003c/code\u003e とします。\u003c/strong\u003e \u003c/p\u003e\n\n\u003cp\u003eパッケージ名の引数をとらない \u003ccode\u003enpm install\u003c/code\u003e には \u003ccode\u003e--production\u003c/code\u003e とオプションをつけることで、\u003ccode\u003enpm install -D \u0026lt;package\u0026gt;\u003c/code\u003e でインストールしたパッケージを除いて node_modules にインストールすることができます。\u003c/p\u003e\n\n\u003cp\u003eこのように \u003ccode\u003e--production\u003c/code\u003e のオプションをつけることによって開発環境でしか使わないパッケージを除外できるので、本番環境デプロイ時に参照されることのないパッケージをインストールしなくて済むようになります。\u003c/p\u003e\n\n\u003cp\u003eローカルインストール時の \u003ccode\u003e-D\u003c/code\u003e オプションの有無による違いをまとめると以下のようになります。\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: left\"\u003e実行するコマンド\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003epackage.json の記述先\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eそれぞれの使い分け\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ccode\u003enpm install \u0026lt;package\u0026gt;\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ccode\u003edependencies\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e開発環境以外でも使用されるパッケージ\u003cbr\u003eex) express\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ccode\u003enpm install -D \u0026lt;package\u0026gt;\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ccode\u003edevDependencies\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e開発環境のみで使用されるパッケージ\u003cbr\u003eex) eslint\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eまた、パッケージ名の引数をとらない \u003ccode\u003enpm install\u003c/code\u003e 実行時の \u003ccode\u003e--production\u003c/code\u003e オプションの有無による違いをまとめると以下のようになります。\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: left\"\u003e実行するコマンド\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eインストール対象\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003e実行するタイミング\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ccode\u003enpm install\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e・ \u003ccode\u003edependencies\u003c/code\u003e\u003cbr\u003e・ \u003ccode\u003edevDependencies\u003c/code\u003e\n\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e開発環境\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ccode\u003enpm install --production\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e・ \u003ccode\u003edependencies\u003c/code\u003e のみ\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e本番環境など開発環境でしか使われないパッケージをインストールしたくないとき\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eいろいろ書いていますが、ケースバイケースなので、実際に \u003ccode\u003enpm install --production\u003c/code\u003e をするときになってから考えればいいと思います。\u003c/p\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\n\u003ca href=\"https://qiita.com/karur4n/items/3d9d28f6f21c3533020d\" id=\"reference-494eedc8590c7eed186c\"\u003e【package.json】dependencies, devDependencies の使い分けを考える\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h1\u003e\n\n\u003cp\u003eそれぞれの \u003ccode\u003enpm install\u003c/code\u003e コマンドの使用するタイミングをまとめると以下になります。\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eコマンド\u003c/th\u003e\n\u003cth\u003e使用するタイミング\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003enpm install\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e新規 or 更新された package.json を元に node_modules を作成するとき\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003enpm install -g \u0026lt;package\u0026gt;\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eグローバルインストールするとき（= どんなディレクトリでもそのコマンドを使えるようにしたいとき）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003enpm install \u0026lt;package\u0026gt;\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003epackage.json にローカルインストールしたい（= そのディレクトリだけで使用できるようにしたい）パッケージを追加するとき（本番環境でも使用するパッケージ）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003enpm install -D \u0026lt;package\u0026gt;\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003epackage.json にローカルインストールしたい（= そのディレクトリだけで使用できるようにしたい）パッケージを追加するとき（開発環境でのみ使用するパッケージ）\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"さいごに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eさいごに\u003c/h1\u003e\n\n\u003cp\u003eいかがだったでしょうか？\u003cbr\u003e\nもうこれで、以下の4つの \u003ccode\u003enpm install\u003c/code\u003e コマンドは使い分けできると思います。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003enpm install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm install -g \u0026lt;package\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm install \u0026lt;package\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm install -D \u0026lt;package\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cbr\u003e\u003cbr\u003e\n\u003cstrong\u003eここには入りきらなかった npm に関する記事たちのURLを貼っておきます↓\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNode.js のバージョン管理についてのメモ（nodebrew, nodenv）\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/20803f553b5716c13902\" class=\"autolink\" id=\"reference-e48b88c800c50c041fc8\"\u003ehttps://qiita.com/sugurutakahashi12345/items/20803f553b5716c13902\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e【npm】 パッケージのインストール先の確認（npm list）\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/8820b09db0dc1507f563\" class=\"autolink\"\u003ehttps://qiita.com/sugurutakahashi12345/items/8820b09db0dc1507f563\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eセマンティック バージョングについてのメモ\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/68e9dfb11e84d20acc6d\" class=\"autolink\" id=\"reference-e15d73ebd7b60c690a1a\"\u003ehttps://qiita.com/sugurutakahashi12345/items/68e9dfb11e84d20acc6d\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003epackage.json に記述される チルダ ^ や キャレット ~ について\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/0876ce674587515c66ba\" class=\"autolink\" id=\"reference-d382c30bb3ad727c1341\"\u003ehttps://qiita.com/sugurutakahashi12345/items/0876ce674587515c66ba\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003epackage-lock.json ってなに？\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/1f6bb7a372b8263500e5\" class=\"autolink\"\u003ehttps://qiita.com/sugurutakahashi12345/items/1f6bb7a372b8263500e5\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003enpm init しないとどうなる？\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/1049a33b86225f6345fe\" class=\"autolink\"\u003ehttps://qiita.com/sugurutakahashi12345/items/1049a33b86225f6345fe\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003enpm でローカルインストールしたパッケージを CLI でコマンド実行する方法（npm-srcipts, npx）\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/b814a09b65d8852226ad\" class=\"autolink\"\u003ehttps://qiita.com/sugurutakahashi12345/items/b814a09b65d8852226ad\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003enpx でパッケージ名とコマンドが異なる場合（\u003ccode\u003enpx -p \u0026lt;package\u0026gt; -c \"\u0026lt;commond\u0026gt;\"\u003c/code\u003e）\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/329e0cdbaf337edb81d3\" class=\"autolink\" id=\"reference-5a8e09f7d94c5923af8a\"\u003ehttps://qiita.com/sugurutakahashi12345/items/329e0cdbaf337edb81d3\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003enpm-scripts の pre, post プレフィックス\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/91a133abacfc38b3d7a7\" class=\"autolink\" id=\"reference-5b3a1f15685e79e456fc\"\u003ehttps://qiita.com/sugurutakahashi12345/items/91a133abacfc38b3d7a7\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003enpm-scripts の 順次・並列実行（npm-run-all）\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/2a17a3cdfbc4a7e5e4eb\" class=\"autolink\" id=\"reference-098e5ae410b27a5c48b2\"\u003ehttps://qiita.com/sugurutakahashi12345/items/2a17a3cdfbc4a7e5e4eb\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003epackage.json に記載されているパッケージのバージョンアップ方法【npm-check-updates, outdated】\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/df736ddaf65c244e1b4f\" class=\"autolink\" id=\"reference-3a4a10c28983329f4019\"\u003ehttps://qiita.com/sugurutakahashi12345/items/df736ddaf65c244e1b4f\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003epackage.json の config の使い方について\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/357fc6c2ae04f48b2076\" class=\"autolink\" id=\"reference-562adade3e41f27cca0f\"\u003ehttps://qiita.com/sugurutakahashi12345/items/357fc6c2ae04f48b2076\u003c/a\u003e\u003c/p\u003e\n","body":"\n# はじめに\nネットに転がっている記事などで `npm install` のコマンドをよく分からず実行してきましたが、そろそろその状態から卒業したかったので備忘録をかねてこちらの記事を投稿しました。\n\n`npm install` コマンドに関することをメインにお伝えしますが、package.json や node_modules など npm を語る上で基本的なことについても触れていきたいと思います。\n\n# 目的\n\nこの記事の目的は、以下の4つの `npm install` コマンドを実行したときの挙動の理解と、これら4つのコマンドを必要な状況に応じて使いわけるようになることです。\n\n- `npm install`\n- `npm install -g \u003cpackage\u003e`\n- `npm install \u003cpackage\u003e`\n- `npm install -D \u003cpackage\u003e`\n\nつまり、適当に `npm install` するのを卒業することです。\n\n# 動作環境\n\n```shell\n# Node.js のバージョン確認\n$ node -v\nv14.13.1\n\n# npm のバージョン確認\n$ npm -v\n6.14.8\n```\n\nちなみに npm 自体のアップデートは以下のコマンドになります。\nnpm はメジャーバージョンが異なるとかなり挙動が異なるので、参照する記事の npm のバージョンにも注意が必要です。\n\n```shell\n# npm のアップデート\n$ npm update -g npm\n```\n\n# npm install を説明する前に知っておきたいこと\n\nこの辺を理解しておかないと適当に `npm install` してしまうことになるので、先に説明します。\n知っている方は飛ばしても大丈夫です。\n\n## Node.js\nNode.js とはサーバサイドで動く JavaScript のことです。\n\n## npm\nnpm（Node Package Manager）とは Node.js のパッケージ（Package）を管理する（Manager）ツールです。\n\nNode.js のパッケージ（Package）とは予め用意された便利な機能（各種フレームワークやライブラリ）をまとめたものです。\n\n## yarn\n\nyarn とは 2016 年にリリースされた npm と互換性のあるパッケージマネージャーです。\n\n今回は yarn コマンドについては触れませんが、以下の意見にとても納得しました。\nご参考まで。\n\n\u003e ちなみに: 似たような CLI として Facebook が開発した Yarn がある。これは npm の色々な欠点(スピードなど)を補うように作られたものであり、かなり人気がある。npm パッケージの README でしばしば npm と yarn でインストールする方法が両方書かれていたり、時には「yarn を使用することを推奨する」と書かれていたりする。しかし、npm も改善されてきており、わざわざ yarn をインストールして使用するメリットはあまりないと筆者は考えている。特に初心者にとっては、スタンダードでないツールを使用すると無駄に学ぶことが増えるのでおすすめしない。\n\u003e\n\u003e\n\u003e 【初心者向け】NPMとpackage.jsonを概念的に理解する （抜粋）\n\u003e https://qiita.com/righteous/items/e5448cb2e7e11ab7d477\n\n## package.json\n\npackage.json とは Node.js ベースの JavaScript アプリ開発において、自身のパッケージ（= プロジェクトそのもの）を管理するために使われるファイルのことです。\n\n`npm init` とコマンド実行すると package.json が作成されます。\n\n## package-lock.json\n簡単に説明すると package.json を用いてパッケージをインストールした結果が記載されるファイルです。\n今回は説明を省略しますが、詳しく知りたい人は【参考】のリンク先を参照してください。\n\n【参考】\n[package-lock.json ってなに？](https://qiita.com/sugurutakahashi12345/items/1f6bb7a372b8263500e5)\n\n## npm init\n\npackage.json は普通に touch コマンドなどでも作成できますが、基本的には `npm init` とコマンド実行して package.json を作成します。\n\n（【脱線】[npm init しないとどうなる？](https://qiita.com/sugurutakahashi12345/items/1049a33b86225f6345fe)）\n\n```shell\n# 何もない空のディレクトリ\n$ ls\n（標準出力なし）\n\n# npm init による package.json の作成（質問をされるが一旦すべて Enter で通過する = npm init -y コマンド実行時と同じ挙動）\n$ npm init\n\n# package.json が作成されている\n$ ls\npackage.json\n```\npackage.json の初期値は以下のようなものになります。\n\n```json:package.json\n{\n  \"name\": \"\u003ccurrent directory name\u003e\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\npackage.json にはいろいろ項目がありますが `name`, `version`, `description`, `keywords`, `author`, `license` などのデータは単なる自身のパッケージ（= プロジェクトそのもの）のメタデータであり、自身のパッケージ（= プロジェクトそのもの）を公開しなのであれば、気にする必要はありません。\n\n`dependencies`, `devDependencies`, `scripts`, `config` の4つぐらいを抑えれば、あとは必要に応じて調べて設定すれば問題ないかと思います。\n\n【参考】\n[package.jsonの構造](https://qiita.com/mzmz__02/items/dfa7abb4237a3842a2a8)\n\n## npm と package.json の関係\n\n公開されているパッケージ（ライブラリやフレームワークなど）は `npm` コマンドによってインストールすることができます。\n\npackage.json が存在するディレクトリで `npm` コマンドによってパッケージをインストールすると、自動的に package.json が更新されます。\n\nまた、**人間が package.json に記述されているパッケージ名やバージョン情報を直接編集することはありません。**\n\n**それらは `npm` コマンド経由で更新します。（大事）**\n\n## node_modules\nnode_modules とは package.json を元にしてインストールされる各種パッケージがインストールされるディレクトリ先のことです。\n\npackage.json さえあれば、`npm install` コマンドの実行によって node_modules が生成することが可能です。\n\nそのため通常は `.gitignore` に指定されるディレクトリになります。\n\n# npm install\n\nここからがこの記事の本題になります。\n\nパッケージを node_modules にインストールするには `npm install` とコマンド実行します。\n\nこの `npm install` というコマンドですが、これがいろいろと種類があってややこしいので詳しく説明していきます。\n\n## とりあえずよく使うコマンド一覧\n\n**引数なしでの実行する場合**\n\n```shell\n# 引数なし実行（package.json のあるディレクトリで実行する）\nnpm install\n```\n\n**グローバルインストール**\n\n```shell\n# グローバルインストール\nnpm install -g \u003cpackage\u003e\nnpm install --global \u003cpackage\u003e\n```\n\n**ローカルインストール**\n\n```shell\n# ローカルインストール\n# package.json の dependencies に追加するとき（npm v4 以下では --save (= -S) のオプションが必要、npm v5 以上ではデフォルトになったため不要）\nnpm install \u003cpackage\u003e\nnpm install --save \u003cpackage\u003e # デフォルトで入っているオプションなので使う必要なし\nnpm install -S \u003cpackage\u003e # デフォルトで入っているオプションなので使う必要なし\n\n# package.json の devDependencies に追加するとき --save-dev (= -D)\nnpm install --save-dev \u003cpackage\u003e\nnpm install -D \u003cpackage\u003e\n```\n\n**バージョン指定のインストール**\n\n```shell\n# バージョンに関する指定\nnpm install \u003cpackage\u003e@x.y.z # バージョンを指定する場合\nnpm install \u003cpackage\u003e@latest # 最新版を指定する場合（ @latest とつけなくても指定しなければ最新版がインストールされる）\n```\n\n## 引数なし `npm install`\n\n引数のない `npm install` コマンド実行時の挙動は、引数のある `npm install \u003cpackage\u003e` とわけて考えたほうがわかりやすいです。\n\n**引数のない `npm install` コマンド実行をすると、カレントディレクトリにある package.json に記述されている情報を元に、そこに記述されている パッケージを node_modules （インストール先）にインストールします。** \n\n**使うタイミングは 「package.json を共有されて node_modules を作成していない時」や「package.json が更新された時」などになります。** \n\nまた、`npm install` コマンド実行する前に、あらかじめ package.json にインストールしたいパッケージ情報を記述しておく必要があります。\n\nそして、その package.json へのパッケージ情報を記述は、引数ありの `npm install \u003cpackage\u003e` のコマンドの実行によって行います。\n\n## 引数あり `npm install \u003cpackage\u003e`\n\n大きな分類としてグローバルインストールとローカルインストールに分けられます。\nまた、ローカルインストールのなかでも package.json の記述先の違いで2つに分けられます。\n\n全体で見るとグローバルインストール1種類、ローカルインストール2種類の合計3種類になります。\n\nコマンド | 大分類 | package.json の記述先\n--- | --- | ---\n`npm install -g \u003cpackage\u003e` | グローバルインストール | -\n`npm install \u003cpackage\u003e` | ローカルインストール | dependencies\n`npm install -D \u003cpackage\u003e` | ローカルインストール | devDependencies\n\nちなみに「グローバルインストール」と「ローカルインストール」の両方とも自身のPCの環境へインストールされます。\n\n### グローバルインストール\nグローバルインストールすると自身の PC の環境ならどこでもインストールしたパッケージ（コマンド）が実行できます。\n\nただし、グローバルインストールしても `nodebrew` などで複数の Node.js のバージョンを管理している場合は、それぞれのバージョンで `npm install -g \u003cpackage\u003e` したパッケージが、それぞれ別のものとして管理されるので注意が必要です。\n\n【参考】\n[【npm】 パッケージのインストール先の確認（npm list）](https://qiita.com/sugurutakahashi12345/items/8820b09db0dc1507f563)\n\n**グローバルインストールの挙動**\n\n```shell\n# 未インストールなので cowsay コマンドは実行できない\n$ cowsay \"hoge\"\nzsh: command not found: cowsay\n\n# cowsay コマンドをグローバルインストール\n$ npm install -g cowsay\n$ cowsay \"hoge\"\n ______\n\u003c hoge \u003e\n ------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n```\n\n### ローカルインストール\nローカルインストールすると node_modules と同じディレクトリにある場合にパッケージ（コマンド）が実行できます。\n\n【参考】\n[npm でローカルインストールしたパッケージを CLI でコマンド実行する方法（npm-srcipts, npx）](https://qiita.com/sugurutakahashi12345/items/b814a09b65d8852226ad)\n\n#### ローカルインストールの挙動（ `-D` オプションなしの場合）\n\n```shell\n# 適当なパッケージ（cowsay）をインストール\n$ npm install cowsay\n+ cowsay@1.4.0\n\n# dependencies の項目に cowsay が追加されていることが確認できる\n$ cat package.json\n{\n  （省略）\n+ \"dependencies\": {\n+   \"cowsay\": \"^1.4.0\"\n+ },\n  （省略）\n}\n\n# node_modules にインストールされるのでパスを通しながら実行可能\n$ ./node_modules/.bin/cowsay \"hoge\" \n ______\n\u003c hoge \u003e\n ------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n```\n\n\n#### ローカルインストールの挙動（ `-D` オプションありの場合）\n\n```shell\n# 適当なパッケージ（typescript）を -D のオプションをつけてインストール\n$ npm install -D typescript\n+ typescript@4.0.3\n\n# devDependencies の項目の typescript が追加されていることが確認できる\n$ cat package.json\n{\n  （省略）\n  \"dependencies\": {\n    \"cowsay\": \"^1.4.0\"\n  },\n+ \"devDependencies\": {\n+   \"typescript\": \"^4.0.3\"\n+ },\n  （省略）\n}\n\n# -D のオプションをつけても変わらずに node_modules にインストールされるのでパスを通しながら実行可能\n$ ./node_modules/.bin/tsc --version \nVersion 4.0.3\n```\n\n## グローバルインストール と ローカルインストールの使い分け\n\nでは、パッケージをインストールする場合、**グローバルインストール** と **ローカルインストール** のどちらにインストールすべきでしょうか？\n\n状況によりますが、**闇雲にグローバルインストールするのは避けたほうがいいです。**\n\nグローバルインストールされたパッケージは環境が異なると使用することができません。\n\n例えば、PC を買い替えたらそのパッケージを使用することができないですし、他人の PC でもそのパッケージを使用することができません。\n\nそいういうときにローカルインストールで作成される package.json だけを共有すれば、どの環境でも `npm install` を実行するだけで、同じパッケージを使用することができます。\n\n**『どんなディレクトリでも、いつでもどこでもそのコマンドを使いたい』というパッケージだけをグローバルインストールして、それ以外はローカルインストールするのが無難だと思います。**\n\n## ローカルインストール時に `-D` オプションをつけるべきケース\n\n**一般的に、開発環境でしか使用しないパッケージについては `npm install -D \u003cpackage\u003e` として、そうではないパッケージについては `npm install \u003cpackage\u003e` とします。** \n\nパッケージ名の引数をとらない `npm install` には `--production` とオプションをつけることで、`npm install -D \u003cpackage\u003e` でインストールしたパッケージを除いて node_modules にインストールすることができます。\n\nこのように `--production` のオプションをつけることによって開発環境でしか使わないパッケージを除外できるので、本番環境デプロイ時に参照されることのないパッケージをインストールしなくて済むようになります。\n\nローカルインストール時の `-D` オプションの有無による違いをまとめると以下のようになります。\n\n|実行するコマンド|package.json の記述先|それぞれの使い分け|\n|:----|:----|:----|\n|`npm install \u003cpackage\u003e`|`dependencies`|開発環境以外でも使用されるパッケージ\u003cbr\u003eex) express|\n|`npm install -D \u003cpackage\u003e`|`devDependencies`|開発環境のみで使用されるパッケージ\u003cbr\u003eex) eslint|\n\nまた、パッケージ名の引数をとらない `npm install` 実行時の `--production` オプションの有無による違いをまとめると以下のようになります。\n\n|実行するコマンド|インストール対象|実行するタイミング|\n|:----|:----|:----|\n|`npm install`|・ `dependencies`\u003cbr\u003e・ `devDependencies`|開発環境|\n|`npm install --production`|・ `dependencies` のみ|本番環境など開発環境でしか使われないパッケージをインストールしたくないとき|\n\nいろいろ書いていますが、ケースバイケースなので、実際に `npm install --production` をするときになってから考えればいいと思います。\n\n【参考】\n[【package.json】dependencies, devDependencies の使い分けを考える](https://qiita.com/karur4n/items/3d9d28f6f21c3533020d)\n\n# まとめ\n\nそれぞれの `npm install` コマンドの使用するタイミングをまとめると以下になります。\n\n| コマンド                   | 使用するタイミング                                                                                                                                      | \n| -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- | \n| `npm install`              | 新規 or 更新された package.json を元に node_modules を作成するとき                                                                                      | \n| `npm install -g \u003cpackage\u003e` | グローバルインストールするとき（= どんなディレクトリでもそのコマンドを使えるようにしたいとき）                                                          | \n| `npm install \u003cpackage\u003e`    | package.json にローカルインストールしたい（= そのディレクトリだけで使用できるようにしたい）パッケージを追加するとき（本番環境でも使用するパッケージ）   | \n| `npm install -D \u003cpackage\u003e` | package.json にローカルインストールしたい（= そのディレクトリだけで使用できるようにしたい）パッケージを追加するとき（開発環境でのみ使用するパッケージ） | \n\n\n# さいごに\nいかがだったでしょうか？\nもうこれで、以下の4つの `npm install` コマンドは使い分けできると思います。\n\n- `npm install`\n- `npm install -g \u003cpackage\u003e`\n- `npm install \u003cpackage\u003e`\n- `npm install -D \u003cpackage\u003e`\n\n\u003cbr\u003e\n**ここには入りきらなかった npm に関する記事たちのURLを貼っておきます↓**\n\nNode.js のバージョン管理についてのメモ（nodebrew, nodenv）\nhttps://qiita.com/sugurutakahashi12345/items/20803f553b5716c13902\n\n【npm】 パッケージのインストール先の確認（npm list）\nhttps://qiita.com/sugurutakahashi12345/items/8820b09db0dc1507f563\n\nセマンティック バージョングについてのメモ\nhttps://qiita.com/sugurutakahashi12345/items/68e9dfb11e84d20acc6d\n\npackage.json に記述される チルダ ^ や キャレット ~ について\nhttps://qiita.com/sugurutakahashi12345/items/0876ce674587515c66ba\n\npackage-lock.json ってなに？\nhttps://qiita.com/sugurutakahashi12345/items/1f6bb7a372b8263500e5\n\nnpm init しないとどうなる？\nhttps://qiita.com/sugurutakahashi12345/items/1049a33b86225f6345fe\n\nnpm でローカルインストールしたパッケージを CLI でコマンド実行する方法（npm-srcipts, npx）\nhttps://qiita.com/sugurutakahashi12345/items/b814a09b65d8852226ad\n\nnpx でパッケージ名とコマンドが異なる場合（`npx -p \u003cpackage\u003e -c \"\u003ccommond\u003e\"`）\nhttps://qiita.com/sugurutakahashi12345/items/329e0cdbaf337edb81d3\n\nnpm-scripts の pre, post プレフィックス\nhttps://qiita.com/sugurutakahashi12345/items/91a133abacfc38b3d7a7\n\nnpm-scripts の 順次・並列実行（npm-run-all）\nhttps://qiita.com/sugurutakahashi12345/items/2a17a3cdfbc4a7e5e4eb\n\npackage.json に記載されているパッケージのバージョンアップ方法【npm-check-updates, outdated】\nhttps://qiita.com/sugurutakahashi12345/items/df736ddaf65c244e1b4f\n\npackage.json の config の使い方について\nhttps://qiita.com/sugurutakahashi12345/items/357fc6c2ae04f48b2076\n","coediting":false,"comments_count":0,"created_at":"2020-10-18T00:50:27+09:00","group":null,"id":"3cc49926faeaf25d3051","likes_count":26,"private":false,"reactions_count":0,"tags":[{"name":"npm","versions":[]},{"name":"package.json","versions":[]}],"title":"そろそろ適当に npm install するのを卒業する","updated_at":"2021-01-13T11:28:37+09:00","url":"https://qiita.com/ikuraikura/items/3cc49926faeaf25d3051","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"やりたいこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eやりたいこと\u003c/h1\u003e\n\n\u003cp\u003e1階層上に複数あるディレクトリの中にあるファイルを今いるディレクトリに全てコピーすること。\u003c/p\u003e\n\n\u003cp\u003eつまり、これを↓\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eBefore\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etree \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e\n\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n├── a\n│   └── a.text\n├── b\n│   └── b.text\n└── c\n    └── c.text\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこうしたい↓\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eAfter\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etree \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e\n\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n├── a\n│   └── a.text\n├── b\n│   └── b.text\n├── c\n│   └── c.text\n├── a.text\n├── b.text\n└── c.text\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eそのときに『 ls の実行結果を for 文で処理するワンライナーがあればうまく行くのに、、、』と思ったので、それを試してみた備忘録になります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"ls-の実行結果を-for-文で処理する方法\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#ls-%E3%81%AE%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C%E3%82%92-for-%E6%96%87%E3%81%A7%E5%87%A6%E7%90%86%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003els の実行結果を for 文で処理する方法\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"複数行の場合\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A4%87%E6%95%B0%E8%A1%8C%E3%81%AE%E5%A0%B4%E5%90%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e複数行の場合\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e複数行（一般化）\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"k\"\u003efor \u003c/span\u003ea \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e .\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\n   \u003c/span\u003e実行させたい処理\n\u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e複数行（サンプル）\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"k\"\u003efor \u003c/span\u003ea \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e .\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\n   \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\n\u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\n（実行結果）\na\nb\nc\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ワンライナーの場合\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AF%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%8A%E3%83%BC%E3%81%AE%E5%A0%B4%E5%90%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eワンライナーの場合\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eワンライナー（一般化）\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"k\"\u003efor \u003c/span\u003ea \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e .\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e 実行させたい処理 \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eワンライナー（サンプル）\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"k\"\u003efor \u003c/span\u003ea \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e .\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\n（実行結果）\na\nb\nc\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e※ \u003ccode\u003eecho $a;\u003c/code\u003e の \u003ccode\u003e;\u003c/code\u003e を忘れずに。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ワンライナーで-for-文を2週することも可能\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AF%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%8A%E3%83%BC%E3%81%A7-for-%E6%96%87%E3%82%922%E9%80%B1%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%82%82%E5%8F%AF%E8%83%BD\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eワンライナーで for 文を2週することも可能\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eワンライナーでfor文を2週\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efor \u003c/span\u003ea \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e .\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo for \u003c/span\u003eb \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"s2\"\u003e/\u003c/span\u003e\u003cspan class=\"nv\"\u003e$b\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\n（実行結果）\na/a.text\nb/b.text\nc/c.text\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"やりたいことをやってみる\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8%E3%82%92%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eやりたいことをやってみる\u003c/h1\u003e\n\n\u003cp\u003eやりたいこと：1階層上に複数あるディレクトリの中にあるファイルを今いるディレクトリに全てコピーする\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"失敗例\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%A4%B1%E6%95%97%E4%BE%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e失敗例\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"k\"\u003efor \u003c/span\u003ea \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e .\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo \u003c/span\u003e\u003cspan class=\"nb\"\u003ecp\u003c/span\u003e \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"s2\"\u003e/*\"\u003c/span\u003e \u003cspan class=\"nb\"\u003e.\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\n（実行結果）\n\u003cspan class=\"nb\"\u003ecp\u003c/span\u003e: a/\u003cspan class=\"k\"\u003e*\u003c/span\u003e: No such file or directory\n\u003cspan class=\"nb\"\u003ecp\u003c/span\u003e: a.text/\u003cspan class=\"k\"\u003e*\u003c/span\u003e: Not a directory\n\u003cspan class=\"nb\"\u003ecp\u003c/span\u003e: b/\u003cspan class=\"k\"\u003e*\u003c/span\u003e: No such file or directory\n\u003cspan class=\"nb\"\u003ecp\u003c/span\u003e: b.text/\u003cspan class=\"k\"\u003e*\u003c/span\u003e: Not a directory\n\u003cspan class=\"nb\"\u003ecp\u003c/span\u003e: c/\u003cspan class=\"k\"\u003e*\u003c/span\u003e: No such file or directory\n\u003cspan class=\"nb\"\u003ecp\u003c/span\u003e: c.text/\u003cspan class=\"k\"\u003e*\u003c/span\u003e: Not a directory\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eなんか怒られた、、、\u003cbr\u003e\nこういう書き方だと\u003ccode\u003e*\u003c/code\u003e（ワイルドカード）が展開されないみたいですね。。。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"成功例\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%88%90%E5%8A%9F%E4%BE%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e成功例\u003c/h2\u003e\n\n\u003cp\u003eワイルドカードを使わずに素直に2周させてみました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"k\"\u003efor \u003c/span\u003ea \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e .\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo for \u003c/span\u003eb \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo \u003c/span\u003e\u003cspan class=\"nb\"\u003ecp\u003c/span\u003e \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"s2\"\u003e/\u003c/span\u003e\u003cspan class=\"nv\"\u003e$b\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e .\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etree \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e\n\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n├── a\n│   └── a.text\n├── b\n│   └── b.text\n├── c\n│   └── c.text\n├── a.text\n├── b.text\n└── c.text\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eいけた！\u003c/p\u003e\n","body":"# やりたいこと\n\n1階層上に複数あるディレクトリの中にあるファイルを今いるディレクトリに全てコピーすること。\n\nつまり、これを↓\n\n```bash:Before\n$ tree -c\n.\n├── a\n│   └── a.text\n├── b\n│   └── b.text\n└── c\n    └── c.text\n```\n\nこうしたい↓\n\n```bash:After\n$ tree -c\n.\n├── a\n│   └── a.text\n├── b\n│   └── b.text\n├── c\n│   └── c.text\n├── a.text\n├── b.text\n└── c.text\n```\nそのときに『 ls の実行結果を for 文で処理するワンライナーがあればうまく行くのに、、、』と思ったので、それを試してみた備忘録になります。\n\n# ls の実行結果を for 文で処理する方法\n\n## 複数行の場合\n\n```bash:複数行（一般化）\n$ for a in $(ls .); do\n   実行させたい処理\ndone\n```\n\n```bash:複数行（サンプル）\n$ for a in $(ls .); do\n   echo $a\ndone\n\n（実行結果）\na\nb\nc\n```\n\n## ワンライナーの場合\n\n```bash:ワンライナー（一般化）\n$ for a in $(ls .); 実行させたい処理 $a; done\n```\n\n```bash:ワンライナー（サンプル）\n$ for a in $(ls .); do echo $a; done\n\n（実行結果）\na\nb\nc\n```\n\n※ `echo $a;` の `;` を忘れずに。\n\n## ワンライナーで for 文を2週することも可能\n\n\n```bash:ワンライナーでfor文を2週\nfor a in $(ls .); do for b in $(ls $a); do echo \"$a/$b\"; done; done\n\n（実行結果）\na/a.text\nb/b.text\nc/c.text\n```\n\n\n# やりたいことをやってみる\n\nやりたいこと：1階層上に複数あるディレクトリの中にあるファイルを今いるディレクトリに全てコピーする\n\n## 失敗例\n\n```bash\n$ for a in $(ls .); do cp -p \"$a/*\" . ; done\n\n（実行結果）\ncp: a/*: No such file or directory\ncp: a.text/*: Not a directory\ncp: b/*: No such file or directory\ncp: b.text/*: Not a directory\ncp: c/*: No such file or directory\ncp: c.text/*: Not a directory\n```\n\nなんか怒られた、、、\nこういう書き方だと`*`（ワイルドカード）が展開されないみたいですね。。。\n\n## 成功例\n\nワイルドカードを使わずに素直に2周させてみました。\n\n```bash\n$ for a in $(ls .); do for b in $(ls $a); do cp -p \"$a/$b\" .; done; done\n\n$ tree -c\n.\n├── a\n│   └── a.text\n├── b\n│   └── b.text\n├── c\n│   └── c.text\n├── a.text\n├── b.text\n└── c.text\n```\n\nいけた！\n\n","coediting":false,"comments_count":0,"created_at":"2020-09-24T16:56:31+09:00","group":null,"id":"d5daebafd86b8c219d2c","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"Bash","versions":[]}],"title":"ls の実行結果を for 文で処理するワンライナー","updated_at":"2020-11-05T03:17:22+09:00","url":"https://qiita.com/ikuraikura/items/d5daebafd86b8c219d2c","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://blog.cybozu.io/entry/2019/09/05/080000\" rel=\"nofollow noopener\" target=\"_blank\"\u003eサイボウズの新人研修の資料\u003c/a\u003eが公開されており、そこに \u003ca href=\"https://cybozu.github.io/introduction-to-kubernetes/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e「Kubernetes を使った開発入門」\u003c/a\u003e なる研修資料があったので、そちらを Kubernetes 初心者が触ってみた備忘録になります。\u003c/p\u003e\n\n\u003cp\u003e解説は本家のサイトがとても詳しく解説してあるので、詳しい解説を求める方はそちらを参照ください。\u003cbr\u003e\nまた、kubectl コマンドについてもほとんど解説しませんが \u003ca href=\"https://qiita.com/Veritas666777/items/6609844efe88e7b333b6\" id=\"reference-0c9a2e7dbc2ad68f524b\"\u003eこちら\u003c/a\u003e の記事がわかりやすかったです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"感想\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%84%9F%E6%83%B3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e感想\u003c/h1\u003e\n\n\u003cp\u003e触ってみた感想ですが、かなり分かりやすかったので Kubernetes を入門するにはオススメだと思います。\u003c/p\u003e\n\n\u003cp\u003eその辺の Kubernetes 関連の記事やスライドを読むときの理解度が、こちらの研修を動かした前と後では全く違うので、とてもためになりました。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"研修資料について\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%A0%94%E4%BF%AE%E8%B3%87%E6%96%99%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e研修資料について\u003c/h1\u003e\n\n\u003cp\u003e以下の 3 部構成です。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIntroduction to Kubernetes\u003c/li\u003e\n\u003cli\u003eMore Introduction to Kubernetes\u003c/li\u003e\n\u003cli\u003eExercise\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e「Introduction to Kubernetes」が入門編のメインになっており、「More Introduction to Kubernetes」は \"本番運用を想定したらこういうことも考える必要ありますよ\" というようなやや応用的な内容になります。「Exercise」は演習問題ですがこちらは手をつけてないです（甘え）。\u003c/p\u003e\n\n\u003cp\u003eこの記事は「Introduction to Kubernetes」については手厚めに記載します。\u003c/p\u003e\n\n\u003cp\u003e「More Introduction to Kubernetes」の内容については触りだけ記載しています。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"introduction-to-kubernetes\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#introduction-to-kubernetes\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eIntroduction to Kubernetes\u003c/h1\u003e\n\n\u003cp\u003e基本編です。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"kubernetes-環境を整える\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#kubernetes-%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E3%81%88%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eKubernetes 環境を整える\u003c/h2\u003e\n\n\u003cp\u003eMinikube を使用します。\u003c/p\u003e\n\n\u003cp\u003eMinikube はシングルノードの Kubernetes クラスタを立ち上げることができます。\u003c/p\u003e\n\n\u003cp\u003e複数ノードの Kubernetes クラスタは Minikube ではできないようです。\u003c/p\u003e\n\n\u003cp\u003eまた、Minikube を使用するには Docker の設定で \u003ccode\u003eCPUs:2\u003c/code\u003e 以上が必要です。\u003cbr\u003e\n（\u003ccode\u003eCPUs:1\u003c/code\u003e では怒られて Minikube を起動しませんでした。）\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"kubernetes-のダッシュボードを表示する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#kubernetes-%E3%81%AE%E3%83%80%E3%83%83%E3%82%B7%E3%83%A5%E3%83%9C%E3%83%BC%E3%83%89%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eKubernetes のダッシュボードを表示する\u003c/h3\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e# Minikube のインストール\n$ brew install minikube\n\n# バージョン確認\n$ minikube version\nminikube version: v1.12.3\ncommit: 2243b4b97c131e3244c5f014faedca0d846599f5\n\n# ステータス確認\n$ minikube status\nminikube\ntype: Control Plane\nhost: Running\nkubelet: Running\napiserver: Running\nkubeconfig: Configured\n\n# ダッシュボードの起動\n$ minikube dashboard\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e以下のようなダッシュボードが表示されます。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/26e7aede03668ef39568b75f42e161ccc434c2ac/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f65396439353433632d633162302d613634632d663939652d3835643662666337636331382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fe9d9543c-c1b0-a64c-f99e-85d6bfc7cc18.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=01d4704a01a6a7602359681125317809\" alt=\"a.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/e9d9543c-c1b0-a64c-f99e-85d6bfc7cc18.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fe9d9543c-c1b0-a64c-f99e-85d6bfc7cc18.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=6e6583fca23b63edef3b07eda4b9f02a 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"kubernetes-上にコンテナをデプロイしてみる\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#kubernetes-%E4%B8%8A%E3%81%AB%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%92%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eKubernetes 上にコンテナをデプロイしてみる\u003c/h2\u003e\n\n\u003cp\u003eKubernetes 上にデプロイできる最小単位は Pod という単位になります。\u003cbr\u003e\nPod はひとつ以上のコンテナをまとめたものです。 同じ Pod に属するコンテナは常に同じノードに配置されます。\u003c/p\u003e\n\n\u003cp\u003e概念的には Container \u0026lt; Pod \u0026lt; Node という順でまとまった単位になります。\u003c/p\u003e\n\n\u003cp\u003eちなみに Minikube は Node になります。\u003c/p\u003e\n\n\u003cp\u003eKubernetes 上にデプロイする Pod を設定した YAML ファイルの準備をします。\u003c/p\u003e\n\n\u003cp\u003e一旦、以下の内容で記述します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yaml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003enginx-pod.yaml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ev1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ePod\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003emy-first-pod\u003c/span\u003e\n  \u003cspan class=\"na\"\u003elabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ecomponent\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003econtainers\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eimage\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx:latest\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003ekubectl apply -f [applyするYAMLファイル名]\u003c/code\u003e コマンドで Kubernetes 上にデプロイします。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e# Kubernetes への apply\n$ kubectl apply -f nginx-pod.yaml\npod/my-first-pod created\n\n# クラスタ内の Pod の一覧を表示\n$ kubectl get pod\nNAME           READY   STATUS    RESTARTS   AGE\nmy-first-pod   1/1     Running   0          103s\n\n# Pod の詳細を表示\n$ kubectl describe pod my-first-pod\nName:         my-first-pod\nNamespace:    default\nPriority:     0\nNode:         minikube/172.17.0.3\nStart Time:   Sat, 15 Aug 2020 04:15:37 +0900\nLabels:       component=nginx\n（省略）\nEvents:\n  Type    Reason     Age    From               Message\n  ----    ------     ----   ----               -------\n  Normal  Scheduled  5m5s   default-scheduler  Successfully assigned default/my-first-pod to minikube\n  Normal  Pulling    5m4s   kubelet, minikube  Pulling image \"nginx:latest\"\n  Normal  Pulled     4m50s  kubelet, minikube  Successfully pulled image \"nginx:latest\"\n  Normal  Created    4m50s  kubelet, minikube  Created container nginx\n  Normal  Started    4m50s  kubelet, minikube  Started container nginx\n\n# Pod へのログイン\nkubectl exec -it my-first-pod -- /bin/bash\n\n# curl コマンドのインストール\nroot@my-first-pod:/# apt update \u0026amp;\u0026amp; apt install -y curl\n（省略）\n\n# localhost:80 へのアクセス（疎通確認）\nroot@my-first-pod:/# curl -i localhost:80\nHTTP/1.1 200 OK\n（省略）\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eダッシュボードには以下のように my-first-pod が表示されます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/b49450cd0ccd1754ff986390d7411cfcef1562dd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f37386364643836302d306431652d303038372d346535362d6434373339396664653562312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F78cdd860-0d1e-0087-4e56-d47399fde5b1.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=7777785b03329b561cd0fe784d46fc5b\" alt=\"b.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/78cdd860-0d1e-0087-4e56-d47399fde5b1.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F78cdd860-0d1e-0087-4e56-d47399fde5b1.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=947ac0bf0b2053817a5e1a7ef16b6f7a 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"他の-pod-にアクセスする\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BB%96%E3%81%AE-pod-%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e他の Pod にアクセスする\u003c/h2\u003e\n\n\u003cp\u003ePod - Pod 間の疎通を確認します。\u003c/p\u003e\n\n\u003cp\u003emy-first-pod とは別の Pod を用意します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yaml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ebastion.yaml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ev1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ePod\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ebastion\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003econtainers\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ebastion\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eimage\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edebian:stretch\u003c/span\u003e\n      \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"pi\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"s\"\u003esleep\"\u003c/span\u003e\u003cspan class=\"pi\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"s\"\u003einfinity\"\u003c/span\u003e\u003cspan class=\"pi\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eちなみに bastion は「踏み台」という意味になります。\u003c/p\u003e\n\n\u003cp\u003ebastion -\u0026gt; my-first-pod (nginx) への疎通を確認します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e# Kubernetes への apply\n$ kubectl apply -f bastion.yaml\npod/bastion created\n\n# Pod の一覧表示\n$ kubectl get pod\nNAME           READY   STATUS    RESTARTS   AGE\nbastion        1/1     Running   0          14s\nmy-first-pod   1/1     Running   1          10h\n\n# IP アドレスの表示\n$ kubectl get pod -o wide\nNAME           READY   STATUS    RESTARTS   AGE   IP           NODE       NOMINATED NODE   READINESS GATES\nbastion        1/1     Running   0          84s   172.18.0.6   minikube   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\nmy-first-pod   1/1     Running   1          10h   172.18.0.2   minikube   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\n\n# bastion にログインして `my-first-pod` のv IP アドレスの `172.18.0.2` にアクセス\n$ kubectl exec -it bastion -- bash\n(bastion)# apt update \u0026amp;\u0026amp; apt install -y curl\n(bastion)# curl -i http://172.18.0.2/\nHTTP/1.1 200 OK\n（省略）\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eダッシュボードでは以下のように bastion が追加されたことが確認できます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/911d0cd340ee5f38bfc88a7190d7e2e7d5017b14/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f66386365386438362d613332622d343035662d383165362d6464356430343337306136622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Ff8ce8d86-a32b-405f-81e6-dd5d04370a6b.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=fe8f27518b43e39d263e277612e47131\" alt=\"c.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/f8ce8d86-a32b-405f-81e6-dd5d04370a6b.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Ff8ce8d86-a32b-405f-81e6-dd5d04370a6b.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=b8e7236809be896b120a2be26d6183af 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"service-を使って他の-pod-にアクセスする\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#service-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E4%BB%96%E3%81%AE-pod-%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eService を使って他の Pod にアクセスする\u003c/h2\u003e\n\n\u003cp\u003eさきほど、Pod - Pod 間の疎通を試しましたが、Pod は消えたり増えたりするものなので、IP アドレスが変わってしまい Pod の IP アドレスに対して通信を行うのはよくないです。\u003c/p\u003e\n\n\u003cp\u003eそこで特定の Pod ではなく「所望の機能を提供する Pod のどれか」と通信するための安定した(=変化しない)エンドポイントが欲しくなります。\u003c/p\u003e\n\n\u003cp\u003eそこで、普通他の Pod との通信するときには Service というオブジェクトを使います。 Service を使うと「ある特定の Pod」ではなく「特定の ラベル を持つ Pod のどれか」にアクセスすることができます。\u003c/p\u003e\n\n\u003cp\u003eラベルというのは、上の nginx の例だと \u003ccode\u003ecomponent: nginx\u003c/code\u003e の部分です。 ここでの component や nginx が特別な意味を持っているわけではなく、利用者が好きな文字列を指定できます。\u003c/p\u003e\n\n\u003cp\u003e今回は以下のような Service を使用します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yaml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003enginx-service.yaml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ev1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eService\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003emy-first-service\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eselector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ecomponent\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eports\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eTCP\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eport\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e\n      \u003cspan class=\"na\"\u003etargetPort\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eService を Kubernetes へ apply します。\u003c/p\u003e\n\n\u003cp\u003eapply の方法は Pod と同じになります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl apply -f nginx-service.yaml\nservice/my-first-service created\n\n$ kubectl get service\nNAME               TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE\nkubernetes         ClusterIP   10.96.0.1      \u0026lt;none\u0026gt;        443/TCP   12h\nmy-first-service   ClusterIP   10.101.46.86   \u0026lt;none\u0026gt;        80/TCP    3m7s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eダッシュボードでは以下のように my-first-service が追加されたことが確認できます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/4d4f7fb7b6689eaee48ec602de9ed8a609642d5a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f64646638626237362d626466382d633438392d663366332d3637653763373832663065632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fddf8bb76-bdf8-c489-f3f3-67e7c782f0ec.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=ca9eacdf616d7781dd1d0e4c6be4a486\" alt=\"d.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ddf8bb76-bdf8-c489-f3f3-67e7c782f0ec.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fddf8bb76-bdf8-c489-f3f3-67e7c782f0ec.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=0e1e8cfb22ba257336e7c9ab79882853 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003ebastion の Pod から my-first-service を通して \u003ccode\u003ecomponent: nginx\u003c/code\u003e でラベリングしている my-first-pod の Pod に先ほど同様にアクセスしてみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl exec -it bastion -- bash\nroot@bastion:/# curl -i http://my-first-service/\nHTTP/1.1 200 OK\n（省略）\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e図で表すと以下のようになります。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/a355a33cb4b0da980031c12283ff3f45c686e3ed/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f61346333636364652d316639622d323666332d383737662d6132363438633035343638612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fa4c3ccde-1f9b-26f3-877f-a2648c05468a.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=080d9293146acac9a4a5a67634d91e89\" alt=\"f.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/a4c3ccde-1f9b-26f3-877f-a2648c05468a.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fa4c3ccde-1f9b-26f3-877f-a2648c05468a.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=0580e6cb097fbe2823e7cfc428e045eb 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"同じ-pod-をいくつも立てる\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%90%8C%E3%81%98-pod-%E3%82%92%E3%81%84%E3%81%8F%E3%81%A4%E3%82%82%E7%AB%8B%E3%81%A6%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e同じ Pod をいくつも立てる\u003c/h2\u003e\n\n\u003cp\u003e前の節では nginx を一台立ち上げました。 実際の運用環境では冗長性やスケーラビリティのために一つのサービスを複数台の Pod で構成することが一般的です。 ここでは Kubernetes の ReplicaSet というオブジェクトを利用して nginx を指定した台数だけ立ち上げてみましょう。\u003c/p\u003e\n\n\u003cp\u003e以下が今回使用する ReplicaSet の定義になります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yaml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003enginx-replicaset.yaml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eapps/v1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eReplicaSet\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx-replicaset\u003c/span\u003e\n  \u003cspan class=\"na\"\u003elabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ecomponent\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ereplicas\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eselector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ematchLabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003ecomponent\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n  \u003cspan class=\"na\"\u003etemplate\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003elabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ecomponent\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n    \u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003econtainers\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eimage\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx:latest\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e詳しい説明は省略しますが、ReplicaSet は「selector にマッチする Pod の数」が「replicas に指定した数」になるように Pod を自動的にデプロイしたり削除したりするオブジェクトです。\u003c/p\u003e\n\n\u003cp\u003eとりあえず apply して pod の数を確認してみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl get pod\nNAME           READY   STATUS    RESTARTS   AGE\nbastion        1/1     Running   0          109m\nmy-first-pod   1/1     Running   1          12h\n\n$ kubectl apply -f nginx-replicaset.yaml\nreplicaset.apps/nginx-replicaset created\n\n$ kubectl get replicaset\nNAME               DESIRED   CURRENT   READY   AGE\nnginx-replicaset   3         3         3       13s\n\n$ kubectl get pod\nNAME                     READY   STATUS    RESTARTS   AGE\nbastion                  1/1     Running   0          110m\nmy-first-pod             1/1     Running   1          12h\nnginx-replicaset-wqcdk   1/1     Running   0          28s\nnginx-replicaset-xbs28   1/1     Running   0          28s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eダッシュボードをみると Pod が 3つあがっているのが確認できます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/1c4f0dea0f593fee355a739a80d34680491d7468/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f32623835383236622d346137322d353337322d343937362d6363333139363564353335662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F2b85826b-4a72-5372-4976-cc31965d535f.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=b78eac2b376235b6cd7f4a3940f1142e\" alt=\"g.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/2b85826b-4a72-5372-4976-cc31965d535f.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F2b85826b-4a72-5372-4976-cc31965d535f.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=e32306ef45cb01e4283d66fc933629fe 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eここで試しに Pod を一つ消してみます。\u003cbr\u003e\nPod を消してみてもまたすぐに Pod が 3 つになるように立ち上がります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl delete pod my-first-pod\npod \"my-first-pod\" deleted\n\n$ kubectl get pod\nNAME                     READY   STATUS    RESTARTS   AGE\nbastion                  1/1     Running   0          123m\nnginx-replicaset-dn57j   1/1     Running   0          9s\nnginx-replicaset-wqcdk   1/1     Running   0          13m\nnginx-replicaset-xbs28   1/1     Running   0          13m\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eダッシュボードでも変わらず Pod が 3つあがっているのが確認できます。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/a3dd798cbf12d27469a51cfadee5680271cb2bf3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f33643538323032372d616437322d373038312d323864622d6232353032393762376266302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F3d582027-ad72-7081-28db-b250297b7bf0.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=e4387ea30b18ae6f713b5aff7ce8deb8\" alt=\"h.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/3d582027-ad72-7081-28db-b250297b7bf0.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F3d582027-ad72-7081-28db-b250297b7bf0.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=68abca09a2d2efe4ebcceafbedc8735d 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eつづいて \u003ccode\u003ereplicas: 3\u003c/code\u003e -\u0026gt; \u003ccode\u003ereplicas: 4\u003c/code\u003e に変更して apply してみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl apply -f nginx-replicaset.yaml\nreplicaset.apps/nginx-replicaset configured\n\n$ kubectl get pod\nNAME                     READY   STATUS    RESTARTS   AGE\nbastion                  1/1     Running   0          126m\nnginx-replicaset-5swkc   1/1     Running   0          7s\nnginx-replicaset-dn57j   1/1     Running   0          3m33s\nnginx-replicaset-wqcdk   1/1     Running   0          16m\nnginx-replicaset-xbs28   1/1     Running   0          16m\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003enginx の Pod が 4 つになりましたね。\u003c/p\u003e\n\n\u003cp\u003eもちろんダッシュボードでも確認できます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/df0d85e3ffc595ea6b81c0b15ecedc96a90e1b6c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f38343162386632322d373239382d393337642d326262642d3437653831653366623366662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F841b8f22-7298-937d-2bbd-47e81e3fb3ff.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=3035dcd90d9ca59f5a52b6ab30461776\" alt=\"i.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/841b8f22-7298-937d-2bbd-47e81e3fb3ff.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F841b8f22-7298-937d-2bbd-47e81e3fb3ff.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bf96991e186f775ea9dde3ce66bf6b56 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eさらにこの状態から ReplicaSet を削除してみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl delete replicaset nginx-replicaset\nreplicaset.apps \"nginx-replicaset\" deleted\n\n$ kubectl get pod\nNAME                     READY   STATUS        RESTARTS   AGE\nbastion                  1/1     Running       0          163m\nnginx-replicaset-5swkc   0/1     Terminating   0          37m\nnginx-replicaset-dn57j   0/1     Terminating   0          40m\nnginx-replicaset-wqcdk   0/1     Terminating   0          54m\nnginx-replicaset-xbs28   0/1     Terminating   0          54m\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003enginx の Pod がなくなりましたね。\u003c/p\u003e\n\n\u003cp\u003eダッシュボードを確認すると nginx の Pod も ReplicaSet も消えていることが確認できます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/e48e8cc1392e5f7155402860fff16d1e2f60a97b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f31306232326166372d633236362d366537352d653764622d3239303734303435663133382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F10b22af7-c266-6e75-e7db-29074045f138.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=80858949635a5846bad58e9598a0e389\" alt=\"j.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/10b22af7-c266-6e75-e7db-29074045f138.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F10b22af7-c266-6e75-e7db-29074045f138.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=733a9b62baf8482bd830ef5b80666be7 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ローリングアップデートする\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AD%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%B0%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eローリングアップデートする\u003c/h2\u003e\n\n\u003cp\u003eKubernetes でローリングアップデートを行うには Deployment というオブジェクトを利用します。 Deployment は ReplicaSet と似たオブジェクトですが、ReplicaSet と違ってアップデートがサポートされています。\u003c/p\u003e\n\n\u003cp\u003eちなみに Deployment を使わずに  ReplicaSet でローリングアップデートを行う場合は以下の図のような手順を踏む必要があります。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/45200394c94008b9f496d17b20a459f3772369bb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f66663965613361622d343035372d396237612d383463332d3135336162623964376434312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fff9ea3ab-4057-9b7a-84c3-153abb9d7d41.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=0fd08fca4d54cb2e3a920b92f1757521\" alt=\"j2.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ff9ea3ab-4057-9b7a-84c3-153abb9d7d41.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fff9ea3ab-4057-9b7a-84c3-153abb9d7d41.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=26b2c73e56711a6c71a40b4b18462f39 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこの複雑な手順が Deployment を使うと Kubernetes にやらせることができます。\u003c/p\u003e\n\n\u003cp\u003e今回使用する Deployment の YAML は以下のようになります。ほとんど ReplicaSet と同じです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yaml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003enginx-deployment.yaml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eapps/v1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eDeployment\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx-deployment\u003c/span\u003e\n  \u003cspan class=\"na\"\u003elabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ecomponent\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ereplicas\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eselector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ematchLabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003ecomponent\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n  \u003cspan class=\"na\"\u003etemplate\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003elabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ecomponent\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n    \u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003econtainers\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eimage\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx:1.15\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eDeployment を apply してみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl apply -f nginx-deployment.yaml\ndeployment.apps/nginx-deployment created\n\n$ kubectl get deployment\nNAME               READY   UP-TO-DATE   AVAILABLE   AGE\nnginx-deployment   3/3     3            3           40s\n\n# 確認（バージョンを確認するために IMAGE を表示するようにしています）\n$ kubectl get pod -o 'custom-columns=NAME:.metadata.name,IMAGE:.spec.containers[*].image,PHASE:.status.phase'\nNAME                                IMAGE            PHASE\nbastion                             debian:stretch   Running\nnginx-deployment-77bc96745b-9tdr2   nginx:1.15       Running\nnginx-deployment-77bc96745b-kg96q   nginx:1.15       Running\nnginx-deployment-77bc96745b-xn4v6   nginx:1.15       Running\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eダッシュボード上ではこのように表示されます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/a482734ed40c3a89c457d98c9714a6fb25b5043b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f63616666373133322d393263332d306530302d303630362d3839363936316433386431332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fcaff7132-92c3-0e00-0606-896961d38d13.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=da22e6f2beb71ad87794c66b909f02c7\" alt=\"k.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/caff7132-92c3-0e00-0606-896961d38d13.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fcaff7132-92c3-0e00-0606-896961d38d13.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=9af3fa9cff02054610867bd288e71eb9 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eここで \u003ccode\u003eimage: nginx:1.15\u003c/code\u003e -\u0026gt; \u003ccode\u003eimage: nginx:1.16\u003c/code\u003e に変更して、Deployment を apply してみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl apply -f nginx-deployment.yaml\ndeployment.apps/nginx-deployment configured\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e以降、\u003ccode\u003ekubectl get pod\u003c/code\u003e コマンドを実行し続けると Kubernetes がローリングアップデートしている様子を伺うことができます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl get pod -o 'custom-columns=NAME:.metadata.name,IMAGE:.spec.containers[*].image,PHASE:.status.phase'\nNAME                                IMAGE            PHASE\nbastion                             debian:stretch   Running\nnginx-deployment-5b4c7f657-pnwkr    nginx:1.16       Pending\nnginx-deployment-77bc96745b-9tdr2   nginx:1.15       Running\nnginx-deployment-77bc96745b-kg96q   nginx:1.15       Running\nnginx-deployment-77bc96745b-xn4v6   nginx:1.15       Running\n\n$ kubectl get pod -o 'custom-columns=NAME:.metadata.name,IMAGE:.spec.containers[*].image,PHASE:.status.phase'\nNAME                                IMAGE            PHASE\nbastion                             debian:stretch   Running\nnginx-deployment-5b4c7f657-dcqwd    nginx:1.16       Running\nnginx-deployment-5b4c7f657-pnwkr    nginx:1.16       Running\nnginx-deployment-5b4c7f657-t9ddv    nginx:1.16       Running\nnginx-deployment-77bc96745b-9tdr2   nginx:1.15       Running\nnginx-deployment-77bc96745b-kg96q   nginx:1.15       Running\nnginx-deployment-77bc96745b-xn4v6   nginx:1.15       Running\nSuguruTakahashiMBP sugurutakahashi ~/git/k8s-sample $\n\n$ kubectl get pod -o 'custom-columns=NAME:.metadata.name,IMAGE:.spec.containers[*].image,PHASE:.status.phase'\nNAME                               IMAGE            PHASE\nbastion                            debian:stretch   Running\nnginx-deployment-5b4c7f657-dcqwd   nginx:1.16       Running\nnginx-deployment-5b4c7f657-pnwkr   nginx:1.16       Running\nnginx-deployment-5b4c7f657-t9ddv   nginx:1.16       Running\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこのようにすべての Pod が \u003ccode\u003eimage: nginx:1.15\u003c/code\u003e -\u0026gt; \u003ccode\u003eimage: nginx:1.16\u003c/code\u003e となりましたね。\u003c/p\u003e\n\n\u003cp\u003eダッシュボードでも確認できます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/2f90f33888689b91cf2fcd85d8a3283e1a8938ba/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f32653632336663612d373737632d336639332d323561642d3565343064633866376533342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F2e623fca-777c-3f93-25ad-5e40dc8f7e34.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=518ebd74d103dc23e05b084424281f6d\" alt=\"l.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/2e623fca-777c-3f93-25ad-5e40dc8f7e34.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F2e623fca-777c-3f93-25ad-5e40dc8f7e34.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=ee91b0efe7947720840269f31b011e8e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eKubernetes を実際に利用する場合、Pod や ReplicaSet を直接作成することはほとんどないそうです。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePod を作成するときは Deployment を使って作成することが大抵のケースでベストプラクティスとのことです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eそれが例え replica 数が１の場合でも Pod を作成する場合は Deployment を使って作るべきであり、理由は単に Pod をひとつデプロイした場合、Pod が立っているノードが死ぬと Pod も道連れになってしまうからです。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"サービスをクラスタの外部に公開する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%81%AE%E5%A4%96%E9%83%A8%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eサービスをクラスタの外部に公開する\u003c/h2\u003e\n\n\u003cp\u003eKubernetes 上にデプロイされたサービスを Kubernetes クラスタの外側に公開する方法を説明します。 クラスタ外にサービスを公開する方法はいくつかありますが、ここでは最も簡単な NodePort を使う方法を説明します。\u003c/p\u003e\n\n\u003cp\u003eService を以下のように変更します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yaml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003enginx-service.yaml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ev1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eService\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003emy-first-service\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eselector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ecomponent\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eports\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eTCP\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eport\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e\n      \u003cspan class=\"na\"\u003etargetPort\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e\n      \u003cspan class=\"na\"\u003enodePort\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e30000\u003c/span\u003e\n  \u003cspan class=\"na\"\u003etype\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eNodePort\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003enodePort: 30000\u003c/code\u003e と \u003ccode\u003etype: NodePort\u003c/code\u003e の行が追加された行です。\u003c/p\u003e\n\n\u003cp\u003eapply します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl get service my-first-service\nNAME               TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE\nmy-first-service   ClusterIP   10.101.46.86   \u0026lt;none\u0026gt;        80/TCP    3m7s\n\n$ kubectl apply -f nginx-service.yaml\nservice/my-first-service configured\n\n# TYPE が変わっていますね\n$ kubectl get service my-first-service\nNAME               TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE\nmy-first-service   NodePort   10.101.46.86   \u0026lt;none\u0026gt;        80:30000/TCP   124m\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこの作業によって、my-first-service の type が ClusterIP (デフォルト) から NodePort に変更されました。\u003c/p\u003e\n\n\u003cp\u003eダッシュボードでもポート番号 30000 で空いていることが確認できます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/8d2af5302fdb44cfb0556013f094d76f2ae324ec/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f62646132613136622d326234322d616462332d666134342d6364326361623735633564352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fbda2a16b-2b42-adb3-fa44-cd2cab75c5d5.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=043eea7dc7480e32acf1e6ed329d5ca2\" alt=\"m.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/bda2a16b-2b42-adb3-fa44-cd2cab75c5d5.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fbda2a16b-2b42-adb3-fa44-cd2cab75c5d5.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=e25d419b3bb8b541556dd74bdd31290f 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eここからが研修資料と異なるのですが、\u0026lt;\u003ccode\u003eminikube ip\u003c/code\u003e で返却されたIPアドレス : 30000\u0026gt; でアクセスしてもうまくいかなかったので、以下のコマンドで IP アドレス＋ポート番号が公開されるみたいなのでそちらで実行してみました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ minikube service my-first-service --url\n🏃  Starting tunnel for service my-first-service.\n|-----------|------------------|-------------|------------------------|\n| NAMESPACE |       NAME       | TARGET PORT |          URL           |\n|-----------|------------------|-------------|------------------------|\n| default   | my-first-service |             | http://127.0.0.1:53157 |\n|-----------|------------------|-------------|------------------------|\nhttp://127.0.0.1:53157\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003ehttp://127.0.0.1:53157\u003c/code\u003e にブラウザからアクセスすると以下のように nginx に接続できました。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/8823bd3429fc80e1c57c71d3b89ddf7e46260794/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f62666163343235652d353531322d613237612d633663342d6138383837306463313838352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fbfac425e-5512-a27a-c6c4-a88870dc1885.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=16c477988df7fe5808de191aaad0f401\" alt=\"n.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/bfac425e-5512-a27a-c6c4-a88870dc1885.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fbfac425e-5512-a27a-c6c4-a88870dc1885.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=55309145e5f4c6e6ac96f8aaa32fddf0 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"pod-をデバッグする\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#pod-%E3%82%92%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ePod をデバッグする\u003c/h2\u003e\n\n\u003cp\u003e多くの場合、デプロイした Pod をデバッグする必要があります。\u003cbr\u003e\n\u003ccode\u003ekubectl exec\u003c/code\u003e でのログインや \u003ccode\u003ekubectl describe\u003c/code\u003e は Pod のデバッグに役立ちます。\u003c/p\u003e\n\n\u003cp\u003eこの節では、この２つに加えてデバッグで便利な２つのコマンド \u003ccode\u003ekubectl logs\u003c/code\u003e と \u003ccode\u003ekubectl port-forward\u003c/code\u003e について説明します。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"コンテナのログを見る\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E3%83%AD%E3%82%B0%E3%82%92%E8%A6%8B%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eコンテナのログを見る\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003ekubectl logs\u003c/code\u003e コマンドでログが確認できます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e# 現在の Pod 一覧\n$ kubectl get pod\nNAME                               READY   STATUS    RESTARTS   AGE\nnginx-deployment-5b4c7f657-cbd8r   1/1     Running   0          103m\nnginx-deployment-5b4c7f657-fvd88   1/1     Running   0          103m\nnginx-deployment-5b4c7f657-lqqkm   1/1     Running   0          103m\n\n# 特定の Pod に対してログを表示する\n$ kubectl logs nginx-deployment-5b4c7f657-cbd8r\n172.17.0.3 - - [15/Aug/2020:10:32:24 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\" \"-\"\n172.17.0.3 - - [15/Aug/2020:10:32:24 +0000] \"GET /favicon.ico HTTP/1.1\" 404 555 \"http://127.0.0.1:52378/\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\" \"-\"\n2020/08/15 10:32:24 [error] 6#6: *1 open() \"/usr/share/nginx/html/favicon.ico\" failed (2: No such file or directory), client: 172.17.0.3, server: localhost, request: \"GET /favicon.ico HTTP/1.1\", host: \"127.0.0.1:52378\", referrer: \"http://127.0.0.1:52378/\"\n\n# ラベルに該当する Pod に対してログを表示する\n$ kubectl logs -l component=nginx\n172.17.0.3 - - [15/Aug/2020:10:32:24 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\" \"-\"\n172.17.0.3 - - [15/Aug/2020:10:32:24 +0000] \"GET /favicon.ico HTTP/1.1\" 404 555 \"http://127.0.0.1:52378/\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\" \"-\"\n2020/08/15 10:32:24 [error] 6#6: *1 open() \"/usr/share/nginx/html/favicon.ico\" failed (2: No such file or directory), client: 172.17.0.3, server: localhost, request: \"GET /favicon.ico HTTP/1.1\", host: \"127.0.0.1:52378\", referrer: \"http://127.0.0.1:52378/\"\n172.17.0.3 - - [15/Aug/2020:10:45:24 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\" \"-\"\n2020/08/15 10:45:25 [error] 6#6: *1 open() \"/usr/share/nginx/html/favicon.ico\" failed (2: No such file or directory), client: 172.17.0.3, server: localhost, request: \"GET /favicon.ico HTTP/1.1\", host: \"127.0.0.1:52724\", referrer: \"http://127.0.0.1:52724/\"\n172.17.0.3 - - [15/Aug/2020:10:45:25 +0000] \"GET /favicon.ico HTTP/1.1\" 404 555 \"http://127.0.0.1:52724/\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\" \"-\"\n172.17.0.3 - - [15/Aug/2020:12:01:44 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\" \"-\"\n2020/08/15 12:01:44 [error] 6#6: *3 open() \"/usr/share/nginx/html/favicon.ico\" failed (2: No such file or directory), client: 172.17.0.3, server: localhost, request: \"GET /favicon.ico HTTP/1.1\", host: \"127.0.0.1:53157\", referrer: \"http://127.0.0.1:53157/\"\n172.17.0.3 - - [15/Aug/2020:12:01:44 +0000] \"GET /favicon.ico HTTP/1.1\" 404 555 \"http://127.0.0.1:53157/\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\" \"-\"\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"ポートフォワードする\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%9D%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%AF%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eポートフォワードする\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003ekubectl port-forward\u003c/code\u003e コマンドを使うと、Pod の特定のポートをローカルホストにポートフォワードすることができます。\u003cbr\u003e\nこれを使えばローカルの curl コマンドやブラウザから直接 Pod にアクセスできます。\u003c/p\u003e\n\n\u003cp\u003e例えば、以下のコマンドを実行するとローカルの 8080 をクラスタ内の nginx の 80 にフォワードしてくれます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl port-forward deployment/nginx-deployment 8080:80\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003elocalhost:8080\u003c/code\u003e にアクセスすると \"Welcome to nginx!\" が表示されます。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/16dce7272802e32befc98eb6ed03602d5892a3cd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f30303761383436312d313466342d616661622d353766632d6237346635366662343865612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F007a8461-14f4-afab-57fc-b74f56fb48ea.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=26a68dc8d04ea80e5d8bc0fa96353ab4\" alt=\"o.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/007a8461-14f4-afab-57fc-b74f56fb48ea.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F007a8461-14f4-afab-57fc-b74f56fb48ea.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=6267c40e7690389277de51e70593159d 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"more-introduction-to-kubernetes\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#more-introduction-to-kubernetes\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eMore Introduction to Kubernetes\u003c/h1\u003e\n\n\u003cp\u003eさらに本番環境での運用を想定して重要な機能を説明します。\u003c/p\u003e\n\n\u003cp\u003eここではさらっと触れる程度での紹介になります。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ヘルスチェック\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%98%E3%83%AB%E3%82%B9%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eヘルスチェック\u003c/h2\u003e\n\n\u003cp\u003eKubernetes のヘルスチェックは以下の２つがあり、用途に応じて使い分けることができます。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLiveness probe ― Pod が生きているか死んでいるかをチェックします。一定回数 Liveness probe が失敗した場合、Pod は再起動されます。\u003c/li\u003e\n\u003cli\u003eReadiness probe ― Pod がリクエストに応答できるかどうかをチェックします。Readiness probe が成功するまでの間、その Pod は起動が完了していないとみなされ、Service のリバプロ先に追加されません。Readiness probe を使うことで Pod が起動が完了する前にリクエストが飛んでくる現象を防ぐことができます。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e研修資料のサンプルは動かすことができなかったので、\u003ca href=\"https://qiita.com/yuta_vamdemic/items/1438455946b7533b921f\" id=\"reference-c4b05118963a5e81512f\"\u003eこちら\u003c/a\u003eの記事を参考に YAML ファイルを定義しました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yaml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003esample-healthcheck.yaml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ev1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ePod\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003esample-healthcheck\u003c/span\u003e\n  \u003cspan class=\"na\"\u003elabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eapp\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003esample-app\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003econtainers\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx-container\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eimage\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx:1.12\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eports\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003econtainerPort\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e\n      \u003cspan class=\"na\"\u003elivenessProbe\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ehttpGet\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003epath\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e/index.html\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eport\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e\n          \u003cspan class=\"na\"\u003escheme\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eHTTP\u003c/span\u003e\n        \u003cspan class=\"na\"\u003etimeoutSeconds\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n        \u003cspan class=\"na\"\u003esuccessThreshold\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n        \u003cspan class=\"na\"\u003efailureThreshold\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\n        \u003cspan class=\"na\"\u003einitialDelaySeconds\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\n        \u003cspan class=\"na\"\u003eperiodSeconds\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\n      \u003cspan class=\"na\"\u003ereadinessProbe\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003eexec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"pi\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"s\"\u003els\"\u003c/span\u003e\u003cspan class=\"pi\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"s\"\u003e/usr/share/nginx/html/50x.html\"\u003c/span\u003e\u003cspan class=\"pi\"\u003e]\u003c/span\u003e\n        \u003cspan class=\"na\"\u003etimeoutSeconds\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n        \u003cspan class=\"na\"\u003esuccessThreshold\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\n        \u003cspan class=\"na\"\u003efailureThreshold\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n        \u003cspan class=\"na\"\u003einitialDelaySeconds\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\n        \u003cspan class=\"na\"\u003eperiodSeconds\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eapply してみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl apply -f sample-healthcheck.yaml\npod/sample-healthcheck created\n\n$ kubectl get pod\nNAME                 READY   STATUS    RESTARTS   AGE\nsample-healthcheck   1/1     Running   0          17s\n\n# describe で Liveness の設定を確認\n$ kubectl describe pod sample-healthcheck | grep \"Liveness\"\n    Liveness:       http-get http://:80/index.html delay=5s timeout=1s period=3s #success=1 #failure=2\n\n# describe で Readiness の設定を確認\n$ kubectl describe pod sample-healthcheck | grep \"Readiness\"\n    Readiness:      exec [ls /usr/share/nginx/html/50x.html] delay=5s timeout=1s period=3s #success=2 #failure=1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e実際にわざとヘルスチェックが発動するように実験します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e# 先に別のコンソールで Pod の状態を監視\n$ kubectl get pods sample-healthcheck --watch\n\n# DocumentRoot の index.html の削除（Liveness での監視対象のファイルの削除）\n$ kubectl exec -it sample-healthcheck rm /usr/share/nginx/html/index.html\n\n# Pod が再起動する（再起動後は index.html が作成されるため再起動は繰り返さない）\n$ kubectl get pods sample-healthcheck --watch\nNAME                 READY   STATUS    RESTARTS   AGE\nsample-healthcheck   0/1     Running   2          9m12s\nsample-healthcheck   1/1     Running   2          9m20s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eLiveness probe, Readiness probe は運用上非常に重要なため、常駐する Pod には必ず両方設定しておくとよいとのことです。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"resource-requestslimits\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#resource-requestslimits\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eResource Requests/Limits\u003c/h2\u003e\n\n\u003cp\u003ePod に対してリソースをあらかじめ設定することができます。\u003c/p\u003e\n\n\u003cp\u003e設定は2種類あります。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eResource Requests\nコンテナが要求するメモリやCPUの量を宣言する機能で、Kubernetes のスケジューラは Resource Requests の値を見て Pod をデプロイするノードを決めます。\u003c/li\u003e\n\u003cli\u003eResource Limits\nそのコンテナが実際に使用できるメモリやCPUの量の上限を設定する機能です。 コンテナが使用するメモリが設定された上限を超えた場合、そのコンテナは kill されます。 また CPU 使用量が上限に達した場合、このコンテナはスロットリングされます。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYMML ファイルの例です。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yaml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003esample-resource.yaml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ev1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ePod\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n  \u003cspan class=\"na\"\u003elabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ecomponent\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003econtainers\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eimage\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx:1.16\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eresources\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003erequests\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ememory\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"s\"\u003e128Mi\"\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecpu\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"s\"\u003e250m\"\u003c/span\u003e\n        \u003cspan class=\"na\"\u003elimits\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ememory\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"s\"\u003e128Mi\"\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecpu\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"s\"\u003e500m\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eapply して設定を確認します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl apply -f sample-resource.yaml\n\n$ kubectl describe pod nginx\n（省略）\n    Limits:\n      cpu:     500m\n      memory:  128Mi\n    Requests:\n      cpu:        250m\n      memory:     128Mi\n（省略）\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"volume\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#volume\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eVolume\u003c/h2\u003e\n\n\u003cp\u003ePod に複数のコンテナがあるとき、それらの間でローカルディレクトリを共有したいことがあります。\u003cbr\u003e\n例えば、APサーバーが出力するログファイルをログ転送エージェントで転送するようなユースケースが挙げられます。\u003c/p\u003e\n\n\u003cp\u003eちなみにサンプルでは fluentd を利用しますが、OSS のデータログ収集ツールとしてはかなり有名なものになります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yaml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003esample-volume.yaml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ev1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ePod\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n  \u003cspan class=\"na\"\u003elabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ecomponent\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003econtainers\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eimage\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx:1.16\u003c/span\u003e\n      \u003cspan class=\"na\"\u003evolumeMounts\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx-log\u003c/span\u003e\n          \u003cspan class=\"na\"\u003emountPath\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e/var/log/nginx\u003c/span\u003e\n\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003efluentd\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eimage\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003efluent/fluentd:v1.11\u003c/span\u003e\n      \u003cspan class=\"na\"\u003evolumeMounts\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx-log\u003c/span\u003e\n          \u003cspan class=\"na\"\u003emountPath\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e/var/log/nginx\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ereadOnly\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003etrue\u003c/span\u003e\n\n  \u003cspan class=\"na\"\u003evolumes\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx-log\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eemptyDir\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"pi\"\u003e{}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eapplyして確認します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl apply -f sample-volume.yaml\nPod/nginx created\n\n$ kubectl get pod\nNAME    READY   STATUS    RESTARTS   AGE\nnginx   2/2     Running   0          2m5s\n\n$ kubectl describe pod nginx\n（省略）\nContainers:\n  nginx:\n    Container ID:   docker://3ebb817cf4ee20439c722bbeba711943bb5f05a2d75b420d308faaf1edbd0af2\n    Image:          nginx:1.16\n    Image ID:       docker-pullable://nginx@sha256:d20aa6d1cae56fd17cd458f4807e0de462caf2336f0b70b5eeb69fcaaf30dd9c\n    Port:           \u0026lt;none\u0026gt;\n    Host Port:      \u0026lt;none\u0026gt;\n    State:          Running\n      Started:      Sat, 15 Aug 2020 22:26:10 +0900\n    Ready:          True\n    Restart Count:  0\n    Environment:    \u0026lt;none\u0026gt;\n    Mounts:\n      /var/log/nginx from nginx-log (rw)\n      /var/run/secrets/kubernetes.io/serviceaccount from default-token-q8zvm (ro)\n  fluentd:\n    Container ID:   docker://f001646ac161052c67e6aba83ec999b97cb55650c4db095c310e60af75a871cc\n    Image:          fluent/fluentd:v1.11\n    Image ID:       docker-pullable://fluent/fluentd@sha256:617fa61a8a811fd49b730c27835983ecb2a8150584138ec825649ff8352a6d44\n    Port:           \u0026lt;none\u0026gt;\n    Host Port:      \u0026lt;none\u0026gt;\n    State:          Running\n      Started:      Sat, 15 Aug 2020 22:28:13 +0900\n    Ready:          True\n    Restart Count:  0\n    Environment:    \u0026lt;none\u0026gt;\n    Mounts:\n      /var/log/nginx from nginx-log (ro)\n      /var/run/secrets/kubernetes.io/serviceaccount from default-token-q8zvm (ro)\n（省略）\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e概念的には以下のような図になります。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/76d6e526786fc2b2281f947e4637ddd66a6fdd15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f38396635323963382d363662362d383839312d653966322d3138663362333765643831302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F89f529c8-66b6-8891-e9f2-18f3b37ed810.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=f8f38d984731900ebe626a9432735fd3\" alt=\"p.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/89f529c8-66b6-8891-e9f2-18f3b37ed810.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F89f529c8-66b6-8891-e9f2-18f3b37ed810.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=2b8b9fbd0fd8741ce3f208eb4d2d1389 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"anti-affinity\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#anti-affinity\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eAnti Affinity\u003c/h2\u003e\n\n\u003cp\u003eDeployment を使って同じ Pod を２つ作っているとします。 何も指定していないとその２つの Pod が同じノードにスケジュールされることがあります。 このような場合、そのノードが障害やメンテナンスなどで死亡すると２つの Pod が同時に消失してしまいます。\u003c/p\u003e\n\n\u003cp\u003eAffinity の機能を使えば Pod が異なるノードに配置されるようにスケジューラーに要求することができます。 Kubernetes の Affinity は非常に柔軟で様々なことができますが、ここでは上で挙げたユースケースに絞って説明します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yaml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003esample-affinity.yaml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eapps/v1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eDeployment\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx-deployment\u003c/span\u003e\n  \u003cspan class=\"na\"\u003elabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ecomponent\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ereplicas\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eselector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ematchLabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003ecomponent\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n  \u003cspan class=\"na\"\u003etemplate\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003elabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ecomponent\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n    \u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003econtainers\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eimage\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx:1.16\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eaffinity\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003epodAntiAffinity\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003erequiredDuringSchedulingIgnoredDuringExecution\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003elabelSelector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"na\"\u003ematchExpressions\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n                  \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ekey\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ecomponent\u003c/span\u003e\n                    \u003cspan class=\"na\"\u003eoperator\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eIn\u003c/span\u003e\n                    \u003cspan class=\"na\"\u003evalues\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n                      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"s\"\u003enginx\"\u003c/span\u003e\n              \u003cspan class=\"na\"\u003etopologyKey\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"s\"\u003ekubernetes.io/hostname\"\u003c/span\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e定義では \u003ccode\u003ereplicas: 2\u003c/code\u003e と 2 つの Pod が立つようにしています。\u003c/p\u003e\n\n\u003cp\u003eそこに \u003ccode\u003eaffinity:\u003c/code\u003e からの記述で Kubernetes がこの Pod をデプロイするときに \u003ccode\u003ecomponent: nginx\u003c/code\u003e というラベルを持つ Pod がいないノードにデプロイしようとします。\u003c/p\u003e\n\n\u003cp\u003eこれにより、ノードが一台死亡したとしても nginx の Pod がひとつ以上生き残ることが保証されます。\u003c/p\u003e\n\n\u003cp\u003eMinikube のシングルノード環境で applyしてみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl apply -f sample-affinity.yaml\ndeployment.apps/nginx-deployment created\n\n$ kubectl get pod\nNAME                               READY   STATUS    RESTARTS   AGE\nnginx-deployment-6b7b554df-9p4b9   0/1     Pending   0          71s\nnginx-deployment-6b7b554df-xf5bp   1/1     Running   0          71s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eシングルノードのため、1 つ Pod が立つと、もう 1 つの Pod がデプロイされずに Pending になっていることがわかります。\u003c/p\u003e\n\n\u003cp\u003eこのように条件を満たすノードが存在しないときは、Pod はデプロイされず、条件を満たすノードが出現するまで Pending 状態になります。\u003c/p\u003e\n\n\u003cp\u003e長時間 Pending になっている Pod が存在しないかどうかは監視項目に含めておくとよいとのことです。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"pod-disruption-budget\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#pod-disruption-budget\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ePod Disruption Budget\u003c/h2\u003e\n\n\u003cp\u003eノードの再起動が必要になる場合があります。 例えば Linux カーネルに脆弱性が発見された場合などです。\u003c/p\u003e\n\n\u003cp\u003ePod を複数立てて冗長化しておけば、単一のノードのシャットダウンには耐えることができます。\u003cbr\u003e\nしかし、ノードを次々と再起動していく状況では問題が起こることがあります。\u003c/p\u003e\n\n\u003cp\u003e例えば、下の図のように３台のノードからなるクラスタの上に２つの Pod がデプロイされている場合について考えます。\u003cbr\u003e\nこの2つの Pod は Deployment によりレプリカ数が２になるように設定されています。\u003cbr\u003e\nこのクラスタに対して、ノードを１台ずつローリングリブートしていきます。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/9c2dfe348013651fc47c44fc28f36f9f86429020/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f62383630313362342d363837382d626665312d396130392d3565626362623961623466662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fb86013b4-6878-bfe1-9a09-5ebcbb9ab4ff.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=5eff6ab27d27eca01b532242dc42e3e1\" alt=\"ll.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/b86013b4-6878-bfe1-9a09-5ebcbb9ab4ff.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fb86013b4-6878-bfe1-9a09-5ebcbb9ab4ff.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=6c71da0ece80cf8e24dbb66a4ed4b1d6 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e１台目のノードをシャットダウンする過程で、その上で走っていた Pod が Evict されます。 Pod の数が減ったことを検知した Deployment が直ちに新しい Pod をデプロイします。 しかし、この Pod の起動には時間がかかるため、starting の状態で止まっています。 この状況で node 2 をシャットダウンすると、available な Pod が存在しなくなり、サービスが停止します。\u003c/p\u003e\n\n\u003cp\u003eこれを防ぐには Pod Disruption Budget によってサービスの稼働に必要な Pod の数の最小値を指定しましょう。\u003c/p\u003e\n\n\u003cp\u003ePDB を指定すると、Kubernetes のツールがノードをシャットダウンする前にこの制約が満たされるように適切に待ってくれます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yaml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003efrontend-pdb.yaml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003epolicy/v1beta1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ePodDisruptionBudget\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx-pdb\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eminAvailable\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eselector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ematchLabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003ecomponent\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eapply して確認します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl apply -f frontend-pdb.yaml\npoddisruptionbudget.policy/nginx-pdb created\n\n$ kubectl get poddisruptionbudget\nNAME        MIN AVAILABLE   MAX UNAVAILABLE   ALLOWED DISRUPTIONS   AGE\nnginx-pdb   1               N/A               0                     66s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e当然ですが、PDB の制約が守られるのはクラスタ管理者が意図してノードをシャットダウンする場合だけです。 障害でノードが死ぬ場合には PDB は無視されます。 また、Deployment を削除する場合も PDB は適用されません。\u003c/p\u003e\n\n\u003cp\u003ePod が available かどうかの判定は Readiness probe によって行われます。PDB を正しく機能させるためには、Pod に適切な Readiness probe を設定しておく必要があります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"exercise\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#exercise\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eExercise\u003c/h1\u003e\n\n\u003cp\u003e研修資料にある Exercise はやっていません。\u003c/p\u003e\n\n\u003cp\u003eごめんなさい。。。\u003c/p\u003e\n\n\u003cp\u003e以上になります。\u003c/p\u003e\n","body":"\n# はじめに\n\n[サイボウズの新人研修の資料](https://blog.cybozu.io/entry/2019/09/05/080000)が公開されており、そこに [「Kubernetes を使った開発入門」](https://cybozu.github.io/introduction-to-kubernetes/) なる研修資料があったので、そちらを Kubernetes 初心者が触ってみた備忘録になります。\n\n解説は本家のサイトがとても詳しく解説してあるので、詳しい解説を求める方はそちらを参照ください。\nまた、kubectl コマンドについてもほとんど解説しませんが [こちら](https://qiita.com/Veritas666777/items/6609844efe88e7b333b6) の記事がわかりやすかったです。\n\n# 感想\n触ってみた感想ですが、かなり分かりやすかったので Kubernetes を入門するにはオススメだと思います。\n\nその辺の Kubernetes 関連の記事やスライドを読むときの理解度が、こちらの研修を動かした前と後では全く違うので、とてもためになりました。\n\n# 研修資料について\n\n以下の 3 部構成です。\n\n- Introduction to Kubernetes\n- More Introduction to Kubernetes\n- Exercise\n\n「Introduction to Kubernetes」が入門編のメインになっており、「More Introduction to Kubernetes」は \"本番運用を想定したらこういうことも考える必要ありますよ\" というようなやや応用的な内容になります。「Exercise」は演習問題ですがこちらは手をつけてないです（甘え）。\n\nこの記事は「Introduction to Kubernetes」については手厚めに記載します。\n\n「More Introduction to Kubernetes」の内容については触りだけ記載しています。\n\n# Introduction to Kubernetes\n\n基本編です。\n\n## Kubernetes 環境を整える\n\nMinikube を使用します。\n\nMinikube はシングルノードの Kubernetes クラスタを立ち上げることができます。\n\n複数ノードの Kubernetes クラスタは Minikube ではできないようです。\n\nまた、Minikube を使用するには Docker の設定で `CPUs:2` 以上が必要です。\n（`CPUs:1` では怒られて Minikube を起動しませんでした。）\n\n### Kubernetes のダッシュボードを表示する\n\n```\n# Minikube のインストール\n$ brew install minikube\n\n# バージョン確認\n$ minikube version\nminikube version: v1.12.3\ncommit: 2243b4b97c131e3244c5f014faedca0d846599f5\n\n# ステータス確認\n$ minikube status\nminikube\ntype: Control Plane\nhost: Running\nkubelet: Running\napiserver: Running\nkubeconfig: Configured\n\n# ダッシュボードの起動\n$ minikube dashboard\n```\n\n以下のようなダッシュボードが表示されます。\n\n![a.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/e9d9543c-c1b0-a64c-f99e-85d6bfc7cc18.png)\n\n\n## Kubernetes 上にコンテナをデプロイしてみる\n\nKubernetes 上にデプロイできる最小単位は Pod という単位になります。\nPod はひとつ以上のコンテナをまとめたものです。 同じ Pod に属するコンテナは常に同じノードに配置されます。\n\n概念的には Container \u003c Pod \u003c Node という順でまとまった単位になります。\n\nちなみに Minikube は Node になります。\n\nKubernetes 上にデプロイする Pod を設定した YAML ファイルの準備をします。\n\n一旦、以下の内容で記述します。\n\n```yaml:nginx-pod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-first-pod\n  labels:\n    component: nginx\nspec:\n  containers:\n    - name: nginx\n      image: nginx:latest\n```\n\n`kubectl apply -f [applyするYAMLファイル名]` コマンドで Kubernetes 上にデプロイします。\n\n```\n# Kubernetes への apply\n$ kubectl apply -f nginx-pod.yaml\npod/my-first-pod created\n\n# クラスタ内の Pod の一覧を表示\n$ kubectl get pod\nNAME           READY   STATUS    RESTARTS   AGE\nmy-first-pod   1/1     Running   0          103s\n\n# Pod の詳細を表示\n$ kubectl describe pod my-first-pod\nName:         my-first-pod\nNamespace:    default\nPriority:     0\nNode:         minikube/172.17.0.3\nStart Time:   Sat, 15 Aug 2020 04:15:37 +0900\nLabels:       component=nginx\n（省略）\nEvents:\n  Type    Reason     Age    From               Message\n  ----    ------     ----   ----               -------\n  Normal  Scheduled  5m5s   default-scheduler  Successfully assigned default/my-first-pod to minikube\n  Normal  Pulling    5m4s   kubelet, minikube  Pulling image \"nginx:latest\"\n  Normal  Pulled     4m50s  kubelet, minikube  Successfully pulled image \"nginx:latest\"\n  Normal  Created    4m50s  kubelet, minikube  Created container nginx\n  Normal  Started    4m50s  kubelet, minikube  Started container nginx\n\n# Pod へのログイン\nkubectl exec -it my-first-pod -- /bin/bash\n\n# curl コマンドのインストール\nroot@my-first-pod:/# apt update \u0026\u0026 apt install -y curl\n（省略）\n\n# localhost:80 へのアクセス（疎通確認）\nroot@my-first-pod:/# curl -i localhost:80\nHTTP/1.1 200 OK\n（省略）\n```\n\nダッシュボードには以下のように my-first-pod が表示されます。\n![b.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/78cdd860-0d1e-0087-4e56-d47399fde5b1.png)\n\n\n## 他の Pod にアクセスする\n\nPod - Pod 間の疎通を確認します。\n\nmy-first-pod とは別の Pod を用意します。\n\n```yaml:bastion.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: bastion\nspec:\n  containers:\n    - name: bastion\n      image: debian:stretch\n      command: [\"sleep\", \"infinity\"]\n```\n\nちなみに bastion は「踏み台」という意味になります。\n\nbastion -\u003e my-first-pod (nginx) への疎通を確認します。\n\n```\n# Kubernetes への apply\n$ kubectl apply -f bastion.yaml\npod/bastion created\n\n# Pod の一覧表示\n$ kubectl get pod\nNAME           READY   STATUS    RESTARTS   AGE\nbastion        1/1     Running   0          14s\nmy-first-pod   1/1     Running   1          10h\n\n# IP アドレスの表示\n$ kubectl get pod -o wide\nNAME           READY   STATUS    RESTARTS   AGE   IP           NODE       NOMINATED NODE   READINESS GATES\nbastion        1/1     Running   0          84s   172.18.0.6   minikube   \u003cnone\u003e           \u003cnone\u003e\nmy-first-pod   1/1     Running   1          10h   172.18.0.2   minikube   \u003cnone\u003e           \u003cnone\u003e\n\n# bastion にログインして `my-first-pod` のv IP アドレスの `172.18.0.2` にアクセス\n$ kubectl exec -it bastion -- bash\n(bastion)# apt update \u0026\u0026 apt install -y curl\n(bastion)# curl -i http://172.18.0.2/\nHTTP/1.1 200 OK\n（省略）\n```\nダッシュボードでは以下のように bastion が追加されたことが確認できます。\n![c.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/f8ce8d86-a32b-405f-81e6-dd5d04370a6b.png)\n\n\n## Service を使って他の Pod にアクセスする\n\nさきほど、Pod - Pod 間の疎通を試しましたが、Pod は消えたり増えたりするものなので、IP アドレスが変わってしまい Pod の IP アドレスに対して通信を行うのはよくないです。\n\nそこで特定の Pod ではなく「所望の機能を提供する Pod のどれか」と通信するための安定した(=変化しない)エンドポイントが欲しくなります。\n\nそこで、普通他の Pod との通信するときには Service というオブジェクトを使います。 Service を使うと「ある特定の Pod」ではなく「特定の ラベル を持つ Pod のどれか」にアクセスすることができます。\n\nラベルというのは、上の nginx の例だと `component: nginx` の部分です。 ここでの component や nginx が特別な意味を持っているわけではなく、利用者が好きな文字列を指定できます。\n\n今回は以下のような Service を使用します。\n\n```yaml:nginx-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-first-service\nspec:\n  selector:\n    component: nginx\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n```\n\nService を Kubernetes へ apply します。\n\napply の方法は Pod と同じになります。\n\n```\n$ kubectl apply -f nginx-service.yaml\nservice/my-first-service created\n\n$ kubectl get service\nNAME               TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE\nkubernetes         ClusterIP   10.96.0.1      \u003cnone\u003e        443/TCP   12h\nmy-first-service   ClusterIP   10.101.46.86   \u003cnone\u003e        80/TCP    3m7s\n```\n\nダッシュボードでは以下のように my-first-service が追加されたことが確認できます。\n![d.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ddf8bb76-bdf8-c489-f3f3-67e7c782f0ec.png)\n\nbastion の Pod から my-first-service を通して `component: nginx` でラベリングしている my-first-pod の Pod に先ほど同様にアクセスしてみます。\n\n```\n$ kubectl exec -it bastion -- bash\nroot@bastion:/# curl -i http://my-first-service/\nHTTP/1.1 200 OK\n（省略）\n```\n\n図で表すと以下のようになります。\n\n![f.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/a4c3ccde-1f9b-26f3-877f-a2648c05468a.png)\n\n\n\n## 同じ Pod をいくつも立てる\n\n前の節では nginx を一台立ち上げました。 実際の運用環境では冗長性やスケーラビリティのために一つのサービスを複数台の Pod で構成することが一般的です。 ここでは Kubernetes の ReplicaSet というオブジェクトを利用して nginx を指定した台数だけ立ち上げてみましょう。\n\n以下が今回使用する ReplicaSet の定義になります。\n\n```yaml:nginx-replicaset.yaml\napiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\n  name: nginx-replicaset\n  labels:\n    component: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      component: nginx\n  template:\n    metadata:\n      labels:\n        component: nginx\n    spec:\n      containers:\n        - name: nginx\n          image: nginx:latest\n```\n\n詳しい説明は省略しますが、ReplicaSet は「selector にマッチする Pod の数」が「replicas に指定した数」になるように Pod を自動的にデプロイしたり削除したりするオブジェクトです。\n\n\nとりあえず apply して pod の数を確認してみます。\n\n```\n$ kubectl get pod\nNAME           READY   STATUS    RESTARTS   AGE\nbastion        1/1     Running   0          109m\nmy-first-pod   1/1     Running   1          12h\n\n$ kubectl apply -f nginx-replicaset.yaml\nreplicaset.apps/nginx-replicaset created\n\n$ kubectl get replicaset\nNAME               DESIRED   CURRENT   READY   AGE\nnginx-replicaset   3         3         3       13s\n\n$ kubectl get pod\nNAME                     READY   STATUS    RESTARTS   AGE\nbastion                  1/1     Running   0          110m\nmy-first-pod             1/1     Running   1          12h\nnginx-replicaset-wqcdk   1/1     Running   0          28s\nnginx-replicaset-xbs28   1/1     Running   0          28s\n```\n\nダッシュボードをみると Pod が 3つあがっているのが確認できます。\n![g.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/2b85826b-4a72-5372-4976-cc31965d535f.png)\n\n\nここで試しに Pod を一つ消してみます。\nPod を消してみてもまたすぐに Pod が 3 つになるように立ち上がります。\n\n```\n$ kubectl delete pod my-first-pod\npod \"my-first-pod\" deleted\n\n$ kubectl get pod\nNAME                     READY   STATUS    RESTARTS   AGE\nbastion                  1/1     Running   0          123m\nnginx-replicaset-dn57j   1/1     Running   0          9s\nnginx-replicaset-wqcdk   1/1     Running   0          13m\nnginx-replicaset-xbs28   1/1     Running   0          13m\n```\n\nダッシュボードでも変わらず Pod が 3つあがっているのが確認できます。\n\n![h.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/3d582027-ad72-7081-28db-b250297b7bf0.png)\n\n\nつづいて `replicas: 3` -\u003e `replicas: 4` に変更して apply してみます。\n\n```\n$ kubectl apply -f nginx-replicaset.yaml\nreplicaset.apps/nginx-replicaset configured\n\n$ kubectl get pod\nNAME                     READY   STATUS    RESTARTS   AGE\nbastion                  1/1     Running   0          126m\nnginx-replicaset-5swkc   1/1     Running   0          7s\nnginx-replicaset-dn57j   1/1     Running   0          3m33s\nnginx-replicaset-wqcdk   1/1     Running   0          16m\nnginx-replicaset-xbs28   1/1     Running   0          16m\n```\n\nnginx の Pod が 4 つになりましたね。\n\nもちろんダッシュボードでも確認できます。\n![i.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/841b8f22-7298-937d-2bbd-47e81e3fb3ff.png)\n\nさらにこの状態から ReplicaSet を削除してみます。\n\n```\n$ kubectl delete replicaset nginx-replicaset\nreplicaset.apps \"nginx-replicaset\" deleted\n\n$ kubectl get pod\nNAME                     READY   STATUS        RESTARTS   AGE\nbastion                  1/1     Running       0          163m\nnginx-replicaset-5swkc   0/1     Terminating   0          37m\nnginx-replicaset-dn57j   0/1     Terminating   0          40m\nnginx-replicaset-wqcdk   0/1     Terminating   0          54m\nnginx-replicaset-xbs28   0/1     Terminating   0          54m\n```\n\nnginx の Pod がなくなりましたね。\n\nダッシュボードを確認すると nginx の Pod も ReplicaSet も消えていることが確認できます。\n![j.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/10b22af7-c266-6e75-e7db-29074045f138.png)\n\n\n\n## ローリングアップデートする\n\nKubernetes でローリングアップデートを行うには Deployment というオブジェクトを利用します。 Deployment は ReplicaSet と似たオブジェクトですが、ReplicaSet と違ってアップデートがサポートされています。\n\nちなみに Deployment を使わずに  ReplicaSet でローリングアップデートを行う場合は以下の図のような手順を踏む必要があります。\n\n![j2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ff9ea3ab-4057-9b7a-84c3-153abb9d7d41.png)\n\n\nこの複雑な手順が Deployment を使うと Kubernetes にやらせることができます。\n\n今回使用する Deployment の YAML は以下のようになります。ほとんど ReplicaSet と同じです。\n\n```yaml:nginx-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    component: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      component: nginx\n  template:\n    metadata:\n      labels:\n        component: nginx\n    spec:\n      containers:\n        - name: nginx\n          image: nginx:1.15\n```\n\nDeployment を apply してみます。\n\n```\n$ kubectl apply -f nginx-deployment.yaml\ndeployment.apps/nginx-deployment created\n\n$ kubectl get deployment\nNAME               READY   UP-TO-DATE   AVAILABLE   AGE\nnginx-deployment   3/3     3            3           40s\n\n# 確認（バージョンを確認するために IMAGE を表示するようにしています）\n$ kubectl get pod -o 'custom-columns=NAME:.metadata.name,IMAGE:.spec.containers[*].image,PHASE:.status.phase'\nNAME                                IMAGE            PHASE\nbastion                             debian:stretch   Running\nnginx-deployment-77bc96745b-9tdr2   nginx:1.15       Running\nnginx-deployment-77bc96745b-kg96q   nginx:1.15       Running\nnginx-deployment-77bc96745b-xn4v6   nginx:1.15       Running\n```\n\nダッシュボード上ではこのように表示されます。\n![k.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/caff7132-92c3-0e00-0606-896961d38d13.png)\n\nここで `image: nginx:1.15` -\u003e `image: nginx:1.16` に変更して、Deployment を apply してみます。\n\n```\n$ kubectl apply -f nginx-deployment.yaml\ndeployment.apps/nginx-deployment configured\n```\n\n以降、`kubectl get pod` コマンドを実行し続けると Kubernetes がローリングアップデートしている様子を伺うことができます。\n\n```\n$ kubectl get pod -o 'custom-columns=NAME:.metadata.name,IMAGE:.spec.containers[*].image,PHASE:.status.phase'\nNAME                                IMAGE            PHASE\nbastion                             debian:stretch   Running\nnginx-deployment-5b4c7f657-pnwkr    nginx:1.16       Pending\nnginx-deployment-77bc96745b-9tdr2   nginx:1.15       Running\nnginx-deployment-77bc96745b-kg96q   nginx:1.15       Running\nnginx-deployment-77bc96745b-xn4v6   nginx:1.15       Running\n\n$ kubectl get pod -o 'custom-columns=NAME:.metadata.name,IMAGE:.spec.containers[*].image,PHASE:.status.phase'\nNAME                                IMAGE            PHASE\nbastion                             debian:stretch   Running\nnginx-deployment-5b4c7f657-dcqwd    nginx:1.16       Running\nnginx-deployment-5b4c7f657-pnwkr    nginx:1.16       Running\nnginx-deployment-5b4c7f657-t9ddv    nginx:1.16       Running\nnginx-deployment-77bc96745b-9tdr2   nginx:1.15       Running\nnginx-deployment-77bc96745b-kg96q   nginx:1.15       Running\nnginx-deployment-77bc96745b-xn4v6   nginx:1.15       Running\nSuguruTakahashiMBP sugurutakahashi ~/git/k8s-sample $\n\n$ kubectl get pod -o 'custom-columns=NAME:.metadata.name,IMAGE:.spec.containers[*].image,PHASE:.status.phase'\nNAME                               IMAGE            PHASE\nbastion                            debian:stretch   Running\nnginx-deployment-5b4c7f657-dcqwd   nginx:1.16       Running\nnginx-deployment-5b4c7f657-pnwkr   nginx:1.16       Running\nnginx-deployment-5b4c7f657-t9ddv   nginx:1.16       Running\n```\n\nこのようにすべての Pod が `image: nginx:1.15` -\u003e `image: nginx:1.16` となりましたね。\n\nダッシュボードでも確認できます。\n![l.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/2e623fca-777c-3f93-25ad-5e40dc8f7e34.png)\n\nKubernetes を実際に利用する場合、Pod や ReplicaSet を直接作成することはほとんどないそうです。\n\n**Pod を作成するときは Deployment を使って作成することが大抵のケースでベストプラクティスとのことです。**\n\nそれが例え replica 数が１の場合でも Pod を作成する場合は Deployment を使って作るべきであり、理由は単に Pod をひとつデプロイした場合、Pod が立っているノードが死ぬと Pod も道連れになってしまうからです。\n\n\n## サービスをクラスタの外部に公開する\n\nKubernetes 上にデプロイされたサービスを Kubernetes クラスタの外側に公開する方法を説明します。 クラスタ外にサービスを公開する方法はいくつかありますが、ここでは最も簡単な NodePort を使う方法を説明します。\n\nService を以下のように変更します。\n\n```yaml:nginx-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-first-service\nspec:\n  selector:\n    component: nginx\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n      nodePort: 30000\n  type: NodePort\n```\n\n`nodePort: 30000` と `type: NodePort` の行が追加された行です。\n\napply します。\n\n```\n$ kubectl get service my-first-service\nNAME               TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE\nmy-first-service   ClusterIP   10.101.46.86   \u003cnone\u003e        80/TCP    3m7s\n\n$ kubectl apply -f nginx-service.yaml\nservice/my-first-service configured\n\n# TYPE が変わっていますね\n$ kubectl get service my-first-service\nNAME               TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE\nmy-first-service   NodePort   10.101.46.86   \u003cnone\u003e        80:30000/TCP   124m\n```\nこの作業によって、my-first-service の type が ClusterIP (デフォルト) から NodePort に変更されました。\n\nダッシュボードでもポート番号 30000 で空いていることが確認できます。\n![m.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/bda2a16b-2b42-adb3-fa44-cd2cab75c5d5.png)\n\n\nここからが研修資料と異なるのですが、\u003c`minikube ip` で返却されたIPアドレス : 30000\u003e でアクセスしてもうまくいかなかったので、以下のコマンドで IP アドレス＋ポート番号が公開されるみたいなのでそちらで実行してみました。\n\n```\n$ minikube service my-first-service --url\n🏃  Starting tunnel for service my-first-service.\n|-----------|------------------|-------------|------------------------|\n| NAMESPACE |       NAME       | TARGET PORT |          URL           |\n|-----------|------------------|-------------|------------------------|\n| default   | my-first-service |             | http://127.0.0.1:53157 |\n|-----------|------------------|-------------|------------------------|\nhttp://127.0.0.1:53157\n```\n\n`http://127.0.0.1:53157` にブラウザからアクセスすると以下のように nginx に接続できました。\n\n![n.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/bfac425e-5512-a27a-c6c4-a88870dc1885.png)\n\n\n## Pod をデバッグする\n\n多くの場合、デプロイした Pod をデバッグする必要があります。\n`kubectl exec` でのログインや `kubectl describe` は Pod のデバッグに役立ちます。\n\nこの節では、この２つに加えてデバッグで便利な２つのコマンド `kubectl logs` と `kubectl port-forward` について説明します。\n\n### コンテナのログを見る\n\n`kubectl logs` コマンドでログが確認できます。\n\n```\n# 現在の Pod 一覧\n$ kubectl get pod\nNAME                               READY   STATUS    RESTARTS   AGE\nnginx-deployment-5b4c7f657-cbd8r   1/1     Running   0          103m\nnginx-deployment-5b4c7f657-fvd88   1/1     Running   0          103m\nnginx-deployment-5b4c7f657-lqqkm   1/1     Running   0          103m\n\n# 特定の Pod に対してログを表示する\n$ kubectl logs nginx-deployment-5b4c7f657-cbd8r\n172.17.0.3 - - [15/Aug/2020:10:32:24 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\" \"-\"\n172.17.0.3 - - [15/Aug/2020:10:32:24 +0000] \"GET /favicon.ico HTTP/1.1\" 404 555 \"http://127.0.0.1:52378/\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\" \"-\"\n2020/08/15 10:32:24 [error] 6#6: *1 open() \"/usr/share/nginx/html/favicon.ico\" failed (2: No such file or directory), client: 172.17.0.3, server: localhost, request: \"GET /favicon.ico HTTP/1.1\", host: \"127.0.0.1:52378\", referrer: \"http://127.0.0.1:52378/\"\n\n# ラベルに該当する Pod に対してログを表示する\n$ kubectl logs -l component=nginx\n172.17.0.3 - - [15/Aug/2020:10:32:24 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\" \"-\"\n172.17.0.3 - - [15/Aug/2020:10:32:24 +0000] \"GET /favicon.ico HTTP/1.1\" 404 555 \"http://127.0.0.1:52378/\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\" \"-\"\n2020/08/15 10:32:24 [error] 6#6: *1 open() \"/usr/share/nginx/html/favicon.ico\" failed (2: No such file or directory), client: 172.17.0.3, server: localhost, request: \"GET /favicon.ico HTTP/1.1\", host: \"127.0.0.1:52378\", referrer: \"http://127.0.0.1:52378/\"\n172.17.0.3 - - [15/Aug/2020:10:45:24 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\" \"-\"\n2020/08/15 10:45:25 [error] 6#6: *1 open() \"/usr/share/nginx/html/favicon.ico\" failed (2: No such file or directory), client: 172.17.0.3, server: localhost, request: \"GET /favicon.ico HTTP/1.1\", host: \"127.0.0.1:52724\", referrer: \"http://127.0.0.1:52724/\"\n172.17.0.3 - - [15/Aug/2020:10:45:25 +0000] \"GET /favicon.ico HTTP/1.1\" 404 555 \"http://127.0.0.1:52724/\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\" \"-\"\n172.17.0.3 - - [15/Aug/2020:12:01:44 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\" \"-\"\n2020/08/15 12:01:44 [error] 6#6: *3 open() \"/usr/share/nginx/html/favicon.ico\" failed (2: No such file or directory), client: 172.17.0.3, server: localhost, request: \"GET /favicon.ico HTTP/1.1\", host: \"127.0.0.1:53157\", referrer: \"http://127.0.0.1:53157/\"\n172.17.0.3 - - [15/Aug/2020:12:01:44 +0000] \"GET /favicon.ico HTTP/1.1\" 404 555 \"http://127.0.0.1:53157/\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\" \"-\"\n```\n\n### ポートフォワードする\n\n`kubectl port-forward` コマンドを使うと、Pod の特定のポートをローカルホストにポートフォワードすることができます。\nこれを使えばローカルの curl コマンドやブラウザから直接 Pod にアクセスできます。\n\n例えば、以下のコマンドを実行すると\bローカルの 8080 をクラスタ内の nginx の 80 にフォワードしてくれます。\n\n```\n$ kubectl port-forward deployment/nginx-deployment 8080:80\n\n```\n\n`localhost:8080` にアクセスすると \"Welcome to nginx!\" が表示されます。\n\n![o.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/007a8461-14f4-afab-57fc-b74f56fb48ea.png)\n\n# More Introduction to Kubernetes\n\nさらに本番環境での運用を想定して重要な機能を説明します。\n\nここではさらっと触れる程度での紹介になります。\n\n## ヘルスチェック\n\nKubernetes のヘルスチェックは以下の２つがあり、用途に応じて使い分けることができます。\n\n- Liveness probe ― Pod が生きているか死んでいるかをチェックします。一定回数 Liveness probe が失敗した場合、Pod は再起動されます。\n- Readiness probe ― Pod がリクエストに応答できるかどうかをチェックします。Readiness probe が成功するまでの間、その Pod は起動が完了していないとみなされ、Service のリバプロ先に追加されません。Readiness probe を使うことで Pod が起動が完了する前にリクエストが飛んでくる現象を防ぐことができます。\n\n研修資料のサンプルは動かすことができなかったので、[こちら](https://qiita.com/yuta_vamdemic/items/1438455946b7533b921f)の記事を参考に YAML ファイルを定義しました。\n\n```yaml:sample-healthcheck.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: sample-healthcheck\n  labels:\n    app: sample-app\nspec:\n  containers:\n    - name: nginx-container\n      image: nginx:1.12\n      ports:\n        - containerPort: 80\n      livenessProbe:\n        httpGet:\n          path: /index.html\n          port: 80\n          scheme: HTTP\n        timeoutSeconds: 1\n        successThreshold: 1\n        failureThreshold: 2\n        initialDelaySeconds: 5\n        periodSeconds: 3\n      readinessProbe:\n        exec:\n          command: [\"ls\", \"/usr/share/nginx/html/50x.html\"]\n        timeoutSeconds: 1\n        successThreshold: 2\n        failureThreshold: 1\n        initialDelaySeconds: 5\n        periodSeconds: 3\n```\n\napply してみます。\n\n```\n$ kubectl apply -f sample-healthcheck.yaml\npod/sample-healthcheck created\n\n$ kubectl get pod\nNAME                 READY   STATUS    RESTARTS   AGE\nsample-healthcheck   1/1     Running   0          17s\n\n# describe で Liveness の設定を確認\n$ kubectl describe pod sample-healthcheck | grep \"Liveness\"\n    Liveness:       http-get http://:80/index.html delay=5s timeout=1s period=3s #success=1 #failure=2\n\n# describe で Readiness の設定を確認\n$ kubectl describe pod sample-healthcheck | grep \"Readiness\"\n    Readiness:      exec [ls /usr/share/nginx/html/50x.html] delay=5s timeout=1s period=3s #success=2 #failure=1\n```\n\n実際にわざとヘルスチェックが発動するように実験します。\n\n```\n# 先に別のコンソールで Pod の状態を監視\n$ kubectl get pods sample-healthcheck --watch\n\n# DocumentRoot の index.html の削除（Liveness での監視対象のファイルの削除）\n$ kubectl exec -it sample-healthcheck rm /usr/share/nginx/html/index.html\n\n# Pod が再起動する（再起動後は index.html が作成されるため再起動は繰り返さない）\n$ kubectl get pods sample-healthcheck --watch\nNAME                 READY   STATUS    RESTARTS   AGE\nsample-healthcheck   0/1     Running   2          9m12s\nsample-healthcheck   1/1     Running   2          9m20s\n```\n\nLiveness probe, Readiness probe は運用上非常に重要なため、常駐する Pod には必ず両方設定しておくとよいとのことです。\n\n## Resource Requests/Limits\n\nPod に対してリソースをあらかじめ設定することができます。\n\n設定は2種類あります。\n\n- Resource Requests\nコンテナが要求するメモリやCPUの量を宣言する機能で、Kubernetes のスケジューラは Resource Requests の値を見て Pod をデプロイするノードを決めます。\n- Resource Limits\nそのコンテナが実際に使用できるメモリやCPUの量の上限を設定する機能です。 コンテナが使用するメモリが設定された上限を超えた場合、そのコンテナは kill されます。 また CPU 使用量が上限に達した場合、このコンテナはスロットリングされます。\n\nYMML ファイルの例です。\n\n```yaml:sample-resource.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\n  labels:\n    component: nginx\nspec:\n  containers:\n    - name: nginx\n      image: nginx:1.16\n      resources:\n        requests:\n          memory: \"128Mi\"\n          cpu: \"250m\"\n        limits:\n          memory: \"128Mi\"\n          cpu: \"500m\"\n```\n\napply して設定を確認します。\n\n```\n$ kubectl apply -f sample-resource.yaml\n\n$ kubectl describe pod nginx\n（省略）\n    Limits:\n      cpu:     500m\n      memory:  128Mi\n    Requests:\n      cpu:        250m\n      memory:     128Mi\n（省略）\n```\n\n## Volume\n\nPod に複数のコンテナがあるとき、それらの間でローカルディレクトリを共有したいことがあります。\n例えば、APサーバーが出力するログファイルをログ転送エージェントで転送するようなユースケースが挙げられます。\n\nちなみにサンプルでは fluentd を利用しますが、OSS のデータログ収集ツールとしてはかなり有名なものになります。\n\n```yaml:sample-volume.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\n  labels:\n    component: nginx\nspec:\n  containers:\n    - name: nginx\n      image: nginx:1.16\n      volumeMounts:\n        - name: nginx-log\n          mountPath: /var/log/nginx\n\n    - name: fluentd\n      image: fluent/fluentd:v1.11\n      volumeMounts:\n        - name: nginx-log\n          mountPath: /var/log/nginx\n          readOnly: true\n\n  volumes:\n    - name: nginx-log\n      emptyDir: {}\n```\n\napplyして確認します。\n\n```\n$ kubectl apply -f sample-volume.yaml\nPod/nginx created\n\n$ kubectl get pod\nNAME    READY   STATUS    RESTARTS   AGE\nnginx   2/2     Running   0          2m5s\n\n$ kubectl describe pod nginx\n（省略）\nContainers:\n  nginx:\n    Container ID:   docker://3ebb817cf4ee20439c722bbeba711943bb5f05a2d75b420d308faaf1edbd0af2\n    Image:          nginx:1.16\n    Image ID:       docker-pullable://nginx@sha256:d20aa6d1cae56fd17cd458f4807e0de462caf2336f0b70b5eeb69fcaaf30dd9c\n    Port:           \u003cnone\u003e\n    Host Port:      \u003cnone\u003e\n    State:          Running\n      Started:      Sat, 15 Aug 2020 22:26:10 +0900\n    Ready:          True\n    Restart Count:  0\n    Environment:    \u003cnone\u003e\n    Mounts:\n      /var/log/nginx from nginx-log (rw)\n      /var/run/secrets/kubernetes.io/serviceaccount from default-token-q8zvm (ro)\n  fluentd:\n    Container ID:   docker://f001646ac161052c67e6aba83ec999b97cb55650c4db095c310e60af75a871cc\n    Image:          fluent/fluentd:v1.11\n    Image ID:       docker-pullable://fluent/fluentd@sha256:617fa61a8a811fd49b730c27835983ecb2a8150584138ec825649ff8352a6d44\n    Port:           \u003cnone\u003e\n    Host Port:      \u003cnone\u003e\n    State:          Running\n      Started:      Sat, 15 Aug 2020 22:28:13 +0900\n    Ready:          True\n    Restart Count:  0\n    Environment:    \u003cnone\u003e\n    Mounts:\n      /var/log/nginx from nginx-log (ro)\n      /var/run/secrets/kubernetes.io/serviceaccount from default-token-q8zvm (ro)\n（省略）\n```\n\n概念的には以下のような図になります。\n\n![p.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/89f529c8-66b6-8891-e9f2-18f3b37ed810.png)\n\n\n## Anti Affinity\n\nDeployment を使って同じ Pod を２つ作っているとします。 何も指定していないとその２つの Pod が同じノードにスケジュールされることがあります。 このような場合、そのノードが障害やメンテナンスなどで死亡すると２つの Pod が同時に消失してしまいます。\n\nAffinity の機能を使えば Pod が異なるノードに配置されるようにスケジューラーに要求することができます。 Kubernetes の Affinity は非常に柔軟で様々なことができますが、ここでは上で挙げたユースケースに絞って説明します。\n\n```yaml:sample-affinity.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    component: nginx\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      component: nginx\n  template:\n    metadata:\n      labels:\n        component: nginx\n    spec:\n      containers:\n        - name: nginx\n          image: nginx:1.16\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            - labelSelector:\n                matchExpressions:\n                  - key: component\n                    operator: In\n                    values:\n                      - \"nginx\"\n              topologyKey: \"kubernetes.io/hostname\"\n\n```\n\n定義では `replicas: 2` と 2 つの Pod が立つようにしています。\n\nそこに `affinity:` からの記述で Kubernetes がこの Pod をデプロイするときに `component: nginx` というラベルを持つ Pod がいないノードにデプロイしようとします。\n\nこれにより、ノードが一台死亡したとしても nginx の Pod がひとつ以上生き残ることが保証されます。\n\nMinikube のシングルノード環境で applyしてみます。\n\n```\n$ kubectl apply -f sample-affinity.yaml\ndeployment.apps/nginx-deployment created\n\n$ kubectl get pod\nNAME                               READY   STATUS    RESTARTS   AGE\nnginx-deployment-6b7b554df-9p4b9   0/1     Pending   0          71s\nnginx-deployment-6b7b554df-xf5bp   1/1     Running   0          71s\n```\n\nシングルノードのため、1 つ Pod が立つと、もう 1 つの Pod がデプロイされずに Pending になっていることがわかります。\n\nこのように条件を満たすノードが存在しないときは、Pod はデプロイされず、条件を満たすノードが出現するまで Pending 状態になります。\n\n長時間 Pending になっている Pod が存在しないかどうかは監視項目に含めておくとよいとのことです。\n\n## Pod Disruption Budget\n\nノードの再起動が必要になる場合があります。 例えば Linux カーネルに脆弱性が発見された場合などです。\n\nPod を複数立てて冗長化しておけば、単一のノードのシャットダウンには耐えることができます。\nしかし、ノードを次々と再起動していく状況では問題が起こることがあります。\n\n例えば、下の図のように３台のノードからなるクラスタの上に２つの Pod がデプロイされている場合について考えます。\nこの2つの Pod は Deployment によりレプリカ数が２になるように設定されています。\nこのクラスタに対して、ノードを１台ずつローリングリブートしていきます。\n\n![ll.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/b86013b4-6878-bfe1-9a09-5ebcbb9ab4ff.png)\n\n１台目のノードをシャットダウンする過程で、その上で走っていた Pod が Evict されます。 Pod の数が減ったことを検知した Deployment が直ちに新しい Pod をデプロイします。 しかし、この Pod の起動には時間がかかるため、starting の状態で止まっています。 この状況で node 2 をシャットダウンすると、available な Pod が存在しなくなり、サービスが停止します。\n\nこれを防ぐには Pod Disruption Budget によってサービスの稼働に必要な Pod の数の最小値を指定しましょう。\n\nPDB を指定すると、Kubernetes のツールがノードをシャットダウンする前にこの制約が満たされるように適切に待ってくれます。\n\n```yaml:frontend-pdb.yaml\napiVersion: policy/v1beta1\nkind: PodDisruptionBudget\nmetadata:\n  name: nginx-pdb\nspec:\n  minAvailable: 1\n  selector:\n    matchLabels:\n      component: nginx\n```\n\napply して確認します。\n\n```\n$ kubectl apply -f frontend-pdb.yaml\npoddisruptionbudget.policy/nginx-pdb created\n\n$ kubectl get poddisruptionbudget\nNAME        MIN AVAILABLE   MAX UNAVAILABLE   ALLOWED DISRUPTIONS   AGE\nnginx-pdb   1               N/A               0                     66s\n```\n\n当然ですが、PDB の制約が守られるのはクラスタ管理者が意図してノードをシャットダウンする場合だけです。 障害でノードが死ぬ場合には PDB は無視されます。 また、Deployment を削除する場合も PDB は適用されません。\n\nPod が available かどうかの判定は Readiness probe によって行われます。PDB を正しく機能させるためには、Pod に適切な Readiness probe を設定しておく必要があります。\n\n# Exercise\n\n研修資料にある Exercise はやっていません。\n\nごめんなさい。。。\n\n以上になります。\n","coediting":false,"comments_count":0,"created_at":"2020-08-16T01:59:47+09:00","group":null,"id":"bf76f64cded31d920e8a","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"kubernetes","versions":[]},{"name":"minikube","versions":[]}],"title":"サイボウズ新人研修の「Kubernetes を使った開発入門」を触ってみた備忘録","updated_at":"2020-10-21T05:03:52+09:00","url":"https://qiita.com/ikuraikura/items/bf76f64cded31d920e8a","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003edocker-compose を用いて Apache・PHP・MySQL の開発環境を構築してみた備忘録になります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"構成図\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%A7%8B%E6%88%90%E5%9B%B3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e構成図\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/5c108b750526700723415d357034834c82e3b6c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f38333435356134302d643138392d383135302d623961622d3335386266343730653863632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F83455a40-d189-8150-b9ab-358bf470e8cc.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=e74b64dc6473934a8655bb42aaf3b91a\" alt=\"ddd.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/83455a40-d189-8150-b9ab-358bf470e8cc.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F83455a40-d189-8150-b9ab-358bf470e8cc.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=6260a533310d8efa35b4d18cfcb4ffe6 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/suguruTakahashi-1234/docker-compose-sample\" rel=\"nofollow noopener\" target=\"_blank\"\u003eGitHub\u003c/a\u003e にもあげました。ご参考まで。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"できたこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A7%E3%81%8D%E3%81%9F%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eできたこと\u003c/h1\u003e\n\n\u003cp\u003e以下を自動化する docker-compose の開発環境構築を行いました。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDocumentRoot の変更\u003c/li\u003e\n\u003cli\u003ephp.ini の変更\u003c/li\u003e\n\u003cli\u003emy.cnf の変更\u003c/li\u003e\n\u003cli\u003eMySQL への初期データの投入\u003c/li\u003e\n\u003cli\u003eMySQL のデータの永続化\u003c/li\u003e\n\u003cli\u003ePHP-Apache コンテナから MySQL コンテナへの疎通\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eつまり、これらの環境がワンライナーで構築できるようになりました。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"バージョン情報\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E6%83%85%E5%A0%B1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eバージョン情報\u003c/h1\u003e\n\n\u003cp\u003edocker-compose はインストールされていることが前提になります。\u003cbr\u003e\n今回は以下のバージョンでの動きになります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker-compose \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e\ndocker-compose version 1.26.2, build eefe0d31\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ePHP のバージョンは 5.4、MySQL のバージョンは 5.5 の環境を構築します。\u003cbr\u003e\nApache のバージョンは特に気にしていません。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"ディレクトリ構造\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E9%80%A0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eディレクトリ構造\u003c/h1\u003e\n\n\u003cp\u003eディレクトリ構造は以下のようになります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n├── config\n│   ├── mysql\n│   │   ├── Dockerfile\n│   │   ├── initdb.d\n│   │   │   └── init.sql\n│   │   └── my.cnf\n│   └── php\n│       ├── Dockerfile\n│       ├── apache2.conf\n│       ├── php.ini\n│       └── sites\n│           ├── 000-default.conf\n│           └── default-ssl.conf\n├── data\n├── docker-compose.yml\n└── html\n    └── \u003cspan class=\"nb\"\u003etest\u003c/span\u003e\n        ├── connect.php\n        └── index.php\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"設定\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A8%AD%E5%AE%9A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e設定\u003c/h1\u003e\n\n\u003cp\u003e各サービスに以下のような設定ファイルがそれぞれあると思いますが、それらを変更したものを動かしたいと思います。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"apache-の設定\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#apache-%E3%81%AE%E8%A8%AD%E5%AE%9A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eApache の設定\u003c/h2\u003e\n\n\u003cp\u003e今回は DocumentRoot を変更してみます。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://hub.docker.com/_/php\" rel=\"nofollow noopener\" target=\"_blank\"\u003e公式ドキュメント\u003c/a\u003e をみると以下のように Dockerfile を記述することで DocumentRoot を変更できるようです。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/5d5d3cc3c7a22a3a9205be43ab523ed32c636f52/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f37323361313663662d346339632d613062352d383839622d3432313838366637313565342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1181\" alt=\"b.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F723a16cf-4c9c-a0b5-889b-421886f715e4.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=50f32ffc955f2acb66261d2307fe69b3\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/723a16cf-4c9c-a0b5-889b-421886f715e4.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F723a16cf-4c9c-a0b5-889b-421886f715e4.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=48058feccdfdbbafa3bec9a52f7930fb 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cdel\u003eいろいろな記事をみるとコンテナから 000-default.conf などの設定ファイルをホスト側にもってきてそれを修正した後、Dockerfile の \u003ccode\u003eCOPY\u003c/code\u003e でコンテナ側にコピーするようでした。\u003c/del\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cdel\u003eやはり公式ドキュメントをみるのが一番ですね。\u003c/del\u003e\u003c/p\u003e\n\n\u003cp\u003e公式ドキュメントのように行ったらコンテナが再起動ループに陥ってしまいました。\u003c/p\u003e\n\n\u003cp\u003e※ 理由をよく調べたら php:5.5-apache 以降であればそれでよかったらしいです。\u003c/p\u003e\n\n\u003cp\u003eなので、php:5.4-apache のイメージからコンテナを立ち上げて、元ファイルをホスト側にコピーして、それを編集することにしました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# とりあえず php:5.4-apache のコンテナを動かしてログインする\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker image pull php:5.4-apache\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container run \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e php54apache \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e php:5.4-apache\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e php54apache /bin/bash\n\n\u003cspan class=\"c\"\u003e# 設定ファイルを確認 ( php:5.4-apache 以前は apache2.conf の修正も必要)\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e /etc/apache2/apache2.conf\nhttpd.conf\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e /etc/apache2/sites-available\n000-default.conf  default-ssl.conf\n\n\u003cspan class=\"c\"\u003e# コンテナを抜ける\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# ホスト側にコピー\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container \u003cspan class=\"nb\"\u003ecp \u003c/span\u003ephp54apache:/etc/apache2/apache2.conf ./config/php\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container \u003cspan class=\"nb\"\u003ecp \u003c/span\u003ephp54apache:/etc/apache2/sites-available/000-default.conf ./config/php/sites\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container \u003cspan class=\"nb\"\u003ecp \u003c/span\u003ephp54apache:/etc/apache2/sites-available/default-ssl.conf ./config/php/sites\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこれらの \u003ccode\u003eapache2.conf\u003c/code\u003e、\u003ccode\u003e000-default.conf\u003c/code\u003e、\u003ccode\u003edefault-ssl.conf\u003c/code\u003e に記述してある DocumentRoot を変更します。\u003c/p\u003e\n\n\u003cp\u003e今回は以下のように変更しました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# DocumentRoot /var/www/html\u003c/span\u003e\nDocumentRoot /var/www/html/test\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこれで DocumentRoot の変更の準備は完了です。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"php-の設定\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#php-%E3%81%AE%E8%A8%AD%E5%AE%9A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ePHP の設定\u003c/h2\u003e\n\n\u003cp\u003ePHP は \u003ccode\u003ephp.ini\u003c/code\u003e によって設定を行います。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://hub.docker.com/_/php\" rel=\"nofollow noopener\" target=\"_blank\"\u003e公式ドキュメント\u003c/a\u003e をみると以下のように記述することで php.ini を指定するらしいです。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/d957ef1d79eb8e19774b468ca86c2b70acbaaf0d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f64393537366363622d373236302d363035322d333132632d6435646364353231386639642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"766\" alt=\"a.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fd9576ccb-7260-6052-312c-d5dcd5218f9d.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=2725f91f9bf71df098f37de53191fc07\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/d9576ccb-7260-6052-312c-d5dcd5218f9d.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fd9576ccb-7260-6052-312c-d5dcd5218f9d.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=82f3099833d0efca02477c625f18810f 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eしかし、コンテナを立ち上げてログインしてみても、 \u003ccode\u003ephp.ini-development\u003c/code\u003e や \u003ccode\u003ephp.ini-produciton\u003c/code\u003e のようなファイルは存在しませんでした。\u003c/p\u003e\n\n\u003cp\u003eおそらく Apache の設定でもそうであったように公式のドキュメントは過去のバージョンまで挙動は保証していないようです。\u003c/p\u003e\n\n\u003cp\u003eサンプルにあるような \u003ccode\u003ephp:7.4-fpm-alpine\u003c/code\u003e ならそれで良さそうですね。\u003c/p\u003e\n\n\u003cp\u003e今回は \u003ccode\u003ephp.ini-development\u003c/code\u003e や \u003ccode\u003ephp.ini-produciton\u003c/code\u003e については GitHub で公開してあったのでそちらの \u003ca href=\"https://github.com/php/php-src/blob/master/php.ini-development\" rel=\"nofollow noopener\" target=\"_blank\"\u003ephp.ini-development\u003c/a\u003e を元に php.ini を作成することにしました。\u003c/p\u003e\n\n\u003cp\u003ephp.ini の修正については\u003ca href=\"https://qiita.com/hikotaro_san/items/0aab2a53726674c50868\" id=\"reference-e9e480856c6db9c9c058\"\u003eこちら\u003c/a\u003eを参照して、ロケーションや言語の設定を修正しました。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"mysql-の設定ファイルの変更\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#mysql-%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%A4%89%E6%9B%B4\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eMySQL の設定ファイルの変更\u003c/h2\u003e\n\n\u003cp\u003eMySQL の設定ファイルは \u003ccode\u003emy.cnf\u003c/code\u003e によって行います。\u003c/p\u003e\n\n\u003cp\u003eMySQL の設定ファイルの my.cnf は \u003ca href=\"https://hub.docker.com/_/mysql\" rel=\"nofollow noopener\" target=\"_blank\"\u003e公式ドキュメント\u003c/a\u003e によると \u003ccode\u003e/etc/mysql/my.cnf\u003c/code\u003e に配置してあるとのことでした。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/c2d7ed3c9f151066ecffb395aaea135e16bfb1b6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f38306332386133392d336165332d366432302d333532652d6361363730363934653238312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1223\" alt=\"c.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F80c28a39-3ae3-6d20-352e-ca670694e281.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=e28c5809b45dcd25c08942a0ce87dc85\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/80c28a39-3ae3-6d20-352e-ca670694e281.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F80c28a39-3ae3-6d20-352e-ca670694e281.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=991e7199d8f3d84679f56ff6796d7b4e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eなのでそちらをローカルホストに持ってきて、適宜修正していきたいと思います。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# とりあえず mysql:5.5 のコンテナを動かしてログインする\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker image pull mysql:5.5\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container run \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"nv\"\u003eMYSQL_ROOT_PASSWORD\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003esample_pw \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e mysql55 \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e mysql:5.5\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e mysql55 /bin/bash\n\n\u003cspan class=\"c\"\u003e# /etc/mysql/my.cnf を確認\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e /etc/mysql/my.cnf\n/etc/mysql/my.cnf\n\n\u003cspan class=\"c\"\u003e# コンテナを抜ける\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# my.cnf をホスト側にコピー\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container \u003cspan class=\"nb\"\u003ecp \u003c/span\u003emysql55:/etc/mysql/my.cnf ./config/mysql/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eあとは環境に合わせて修正して、\u003ccode\u003emy.cnf\u003c/code\u003e を作成してください。\u003c/p\u003e\n\n\u003cp\u003e※ ちなみに今回は \u003ccode\u003emy.cnf\u003c/code\u003e の修正は行っていません。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"dockerfile-の作成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#dockerfile-%E3%81%AE%E4%BD%9C%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDockerfile の作成\u003c/h1\u003e\n\n\u003cp\u003eDockerfile は \u003ccode\u003ephp:5.4-apache\u003c/code\u003e と \u003ccode\u003emysql:5.5\u003c/code\u003e のイメージについて作成しました。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"php54-apache\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#php54-apache\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ephp:5.4-apache\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"Dockerfile\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003econfig/php/Dockerfile\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# image\u003c/span\u003e\n\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"s\"\u003e php:5.4-apache\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Set php.ini\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"s\"\u003e ./php.ini /usr/local/etc/php/\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Set apache conf (Before tag:5.4-apache)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"s\"\u003e ./apache2.conf /etc/apache2/\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"s\"\u003e ./sites/*.conf /etc/apache2/sites-available/\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Set apache conf (After tag:5.5-apache)\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# ENV APACHE_DOCUMENT_ROOT /var/www/html/test\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# RUN sed -ri -e 's!/var/www/html!${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/sites-available/*.conf\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# RUN sed -ri -e 's!/var/www/!${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/apache2.conf /etc/apache2/conf-available/*.conf\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Install MySQL connection module\u003c/span\u003e\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003eapt-get update \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e  \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e apt-get \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u003cspan class=\"nt\"\u003e-y\u003c/span\u003e libpq-dev \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e  \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e docker-php-ext-install pdo_mysql pdo_pgsql mysqli mbstring\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eここでは「DocumentRoot の変更」、「php.ini の配置」、「MySQL と疎通するためのモジュールを追加」しています。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"mysql55\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#mysql55\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003emysql:5.5\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"Dockerfile\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003econfig/mysql/Dockerfile\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# image\u003c/span\u003e\n\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"s\"\u003e mysql:5.5\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Set my.cnf\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"s\"\u003e ./my.cnf /etc/mysql/conf.d/\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Set Japanese\u003c/span\u003e\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003eapt-get update \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e apt-get \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u003cspan class=\"nt\"\u003e-y\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e  locales \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e  \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e apt-get clean \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e  \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003erm\u003c/span\u003e \u003cspan class=\"nt\"\u003e-rf\u003c/span\u003e /var/lib/apt/lists/\u003cspan class=\"k\"\u003e*\u003c/span\u003e\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003e\u003cspan class=\"nb\"\u003esed\u003c/span\u003e \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e \u003cspan class=\"nt\"\u003e-E\u003c/span\u003e \u003cspan class=\"s1\"\u003e's/# (ja_JP.UTF-8)/\\1/'\u003c/span\u003e /etc/locale.gen \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e  \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e locale-gen\n\u003cspan class=\"k\"\u003eENV\u003c/span\u003e\u003cspan class=\"s\"\u003e LANG ja_JP.UTF-8\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCMD\u003c/span\u003e\u003cspan class=\"s\"\u003e [\"mysqld\", \"--character-set-server=utf8\", \"--collation-server=utf8_unicode_ci\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eデフォルトのままであると MySQL にログインした後に日本語の入力ができなかったため、ここでは日本語を入力可能にするような設定をおこなています。\u003c/p\u003e\n\n\u003cp\u003eMySQL の日本語の設定は \u003ca href=\"https://oki2a24.com/2020/03/27/use-japanese-in-debian-based-docker-containers/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eこちら\u003c/a\u003e を参照しました。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"mysql-の初期データの投入\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#mysql-%E3%81%AE%E5%88%9D%E6%9C%9F%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E6%8A%95%E5%85%A5\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eMySQL の初期データの投入\u003c/h1\u003e\n\n\u003cp\u003edocker-compose 起動時に MySQL に初期データを投入してみたく、以下のような SQL を用意しました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"sql\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003einit.sql\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eDROP\u003c/span\u003e \u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e \u003cspan class=\"n\"\u003eIF\u003c/span\u003e \u003cspan class=\"k\"\u003eEXISTS\u003c/span\u003e \u003cspan class=\"n\"\u003esample_table\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e \u003cspan class=\"n\"\u003esample_table\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eid\u003c/span\u003e \u003cspan class=\"nb\"\u003eINT\u003c/span\u003e \u003cspan class=\"k\"\u003eNOT\u003c/span\u003e \u003cspan class=\"k\"\u003eNULL\u003c/span\u003e \u003cspan class=\"n\"\u003eAUTO_INCREMENT\u003c/span\u003e \u003cspan class=\"k\"\u003ePRIMARY\u003c/span\u003e \u003cspan class=\"k\"\u003eKEY\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"nb\"\u003eTEXT\u003c/span\u003e \u003cspan class=\"k\"\u003eNOT\u003c/span\u003e \u003cspan class=\"k\"\u003eNULL\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003echarset\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eutf8\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eINSERT\u003c/span\u003e \u003cspan class=\"k\"\u003eINTO\u003c/span\u003e \u003cspan class=\"n\"\u003esample_table\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eVALUES\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e\"太郎\"\u003c/span\u003e\u003cspan class=\"p\"\u003e),(\u003c/span\u003e\u003cspan class=\"nv\"\u003e\"花子\"\u003c/span\u003e\u003cspan class=\"p\"\u003e),(\u003c/span\u003e\u003cspan class=\"nv\"\u003e\"令和\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eコンテナ起動後にここで記述した SQL が実行されていることを確認します。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"docker-composeyml-の作成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#docker-composeyml-%E3%81%AE%E4%BD%9C%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003edocker-compose.yml の作成\u003c/h1\u003e\n\n\u003cp\u003e以下のように docker-compose.yml を作成しました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003edocker-compose.yml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eversion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'\u003c/span\u003e\u003cspan class=\"s\"\u003e3.8'\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003eservices\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# PHP Apache\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ephp-apache\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e./config/php\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eports\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"s\"\u003e8080:80\"\u003c/span\u003e\n    \u003cspan class=\"na\"\u003evolumes\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003e./html:/var/www/html\u003c/span\u003e\n    \u003cspan class=\"na\"\u003erestart\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ealways\u003c/span\u003e\n    \u003cspan class=\"na\"\u003edepends_on\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003emysql\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# MySQL\u003c/span\u003e\n  \u003cspan class=\"na\"\u003emysql\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e./config/mysql\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eports\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003e3306:3306\u003c/span\u003e\n    \u003cspan class=\"na\"\u003evolumes\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003e./config/mysql/initdb.d:/docker-entrypoint-initdb.d\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003e./data:/var/lib/mysql\u003c/span\u003e\n    \u003cspan class=\"na\"\u003erestart\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ealways\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eenvironment\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eMYSQL_ROOT_PASSWORD\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003esample_root_passward\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eMYSQL_DATABASE\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003esample_db\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eMYSQL_USER\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003esample_user\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eMYSQL_PASSWORD\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003esample_pass\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"mysql-のデータの永続化について\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#mysql-%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E6%B0%B8%E7%B6%9A%E5%8C%96%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eMySQL のデータの永続化について\u003c/h2\u003e\n\n\u003cp\u003eMySQL のデータディレクトリは /var/lib/mysql であり、 \u003ccode\u003e- ./data:/var/lib/mysql\u003c/code\u003e とあるようにホスト側の \u003ccode\u003e./data\u003c/code\u003e ディレクトリにマウントすることによってデータを永続化しております。\u003c/p\u003e\n\n\u003cp\u003e試してみたところ \u003ccode\u003edocker-compose stop\u003c/code\u003e や \u003ccode\u003edocker-compose down\u003c/code\u003e してもデータが永続化されていることが確認できました。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"docker-compose-使い方\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#docker-compose-%E4%BD%BF%E3%81%84%E6%96%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003edocker-compose 使い方\u003c/h1\u003e\n\n\u003cp\u003eいよいよ docker-compose を動かします。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"docker-compose-起動\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#docker-compose-%E8%B5%B7%E5%8B%95\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003edocker-compose 起動\u003c/h2\u003e\n\n\u003cp\u003eまずはなにも起動されていないことを確認します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker-compose ps\nName   Command   State   Ports\n\u003cspan class=\"nt\"\u003e------------------------------\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container \u003cspan class=\"nb\"\u003els\n\u003c/span\u003eCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e今回はわかりやすいようにコンテナも空の状態にしておきます。\u003c/p\u003e\n\n\u003cp\u003edocker-compose.yml が存在する階層で \u003ccode\u003edocker-compose up -d\u003c/code\u003e コマンドを実行することで、docker-compose.yml の記述をもとにコンテナが作成されます。\u003c/p\u003e\n\n\u003cp\u003e※ docker-compose のコマンドの \u003ccode\u003ebuild\u003c/code\u003e と \u003ccode\u003eup\u003c/code\u003e の違いやオプションについては\u003ca href=\"https://qiita.com/tegnike/items/bcdcee0320e11a928d46\" id=\"reference-7c2dbf1d7165bf4e8b5b\"\u003eこちら\u003c/a\u003eがわかりやすかったです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# image の作成\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker-compose build \u003cspan class=\"nt\"\u003e--no-cache\u003c/span\u003e\nSuccessfully tagged docker-compose-sample_php-apache:latest\n\n\u003cspan class=\"c\"\u003e# コンテナの構築・起動\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker-compose up \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e\nCreating network \u003cspan class=\"s2\"\u003e\"docker-compose-sample_default\"\u003c/span\u003e with the default driver\nCreating docker-compose-sample_mysql_1 ... \u003cspan class=\"k\"\u003edone\n\u003c/span\u003eCreating docker-compose-sample_php-apache_1 ... \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# docker-compose の確認\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker-compose ps\n               Name                            Command             State           Ports\n\u003cspan class=\"nt\"\u003e-------------------------------------------------------------------------------------------------\u003c/span\u003e\ndocker-compose-sample_mysql_1        docker-entrypoint.sh mysqld   Up      0.0.0.0:3306-\u0026gt;3306/tcp\ndocker-compose-sample_php-apache_1   apache2-foreground            Up      0.0.0.0:8080-\u0026gt;80/tcp\n\n\u003cspan class=\"c\"\u003e# コンテナの確認\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container \u003cspan class=\"nb\"\u003els\n\u003c/span\u003eCONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS              PORTS                    NAMES\n26b0cec2daad        docker-compose-sample_php-apache   \u003cspan class=\"s2\"\u003e\"apache2-foreground\"\u003c/span\u003e     3 minutes ago       Up 3 minutes        0.0.0.0:8080-\u0026gt;80/tcp     docker-compose-sample_php-apache_1\neaae044f4bba        mysql:5.5                          \u003cspan class=\"s2\"\u003e\"docker-entrypoint.s…\"\u003c/span\u003e   3 minutes ago       Up 3 minutes        0.0.0.0:3306-\u0026gt;3306/tcp   docker-compose-sample_mysql_1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eコンテナが動いていることが確認できました。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"php-apache-コンテナの確認\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#php-apache-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E7%A2%BA%E8%AA%8D\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ePHP-Apache コンテナの確認\u003c/h2\u003e\n\n\u003cp\u003eDocumentRoot の直下に配置する、php:5.4-apache コンテナの疎通確認用のページとして以下のようなファイルを用意しました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"php\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ehtml/test/index.php\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n\u003cspan class=\"k\"\u003eecho\u003c/span\u003e  \u003cspan class=\"k\"\u003e__DIR__\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ephpinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003ehttp://localhost:8080\u003c/code\u003e にアクセスすると以下のように表示されるはずです。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eecho  __DIR__;\u003c/code\u003e はその PHP ファイルが置かれている絶対パスを出力するので DocumentRoot の変更が行われていることが確認できます。\u003c/p\u003e\n\n\u003cp\u003eまた、\u003ccode\u003ephp.ini\u003c/code\u003e についてオリジナルものから修正を加えていれば、\u003ccode\u003ephpinfo();\u003c/code\u003e の出力でそちらも反映されていることも確認できるかと思います。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/4842ad07cbbdf07bcef3e7fc999ee749a61c71f8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f34346136396461612d303535372d613835322d303631622d6539326538666437323530622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"692\" alt=\"f.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F44a69daa-0557-a852-061b-e92e8fd7250b.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=f93df13f2936df34e83144f5f5f9a4db\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/44a69daa-0557-a852-061b-e92e8fd7250b.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F44a69daa-0557-a852-061b-e92e8fd7250b.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=92ad4a87606c7de6f522fdc7421aba9e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"mysql-コンテナの確認\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#mysql-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E7%A2%BA%E8%AA%8D\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eMySQL コンテナの確認\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003emysql:5.5\u003c/code\u003e のイメージで作成されたコンテナにログインして、初期データが投入されていることを確認します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eshell\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e# コンテナにログイン\n$ docker exec -it eaae044f4bba /bin/bash\n\n# MySQL にログイン\n$ mysql -p\nEnter password:\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eパスワードを求められるので docker-compose.yml で \u003ccode\u003eMYSQL_ROOT_PASSWORD\u003c/code\u003e の環境変数に登録した \u003ccode\u003esample_root_passward\u003c/code\u003e と入力するとログインできます。\u003c/p\u003e\n\n\u003cp\u003edocker-compose.yml に登録した \u003ccode\u003eMYSQL_DATABASE\u003c/code\u003e、\u003ccode\u003eMYSQL_USER\u003c/code\u003e が登録されていることを確認します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003emysql\u0026gt; \u003cspan class=\"k\"\u003eselect \u003c/span\u003euser, host from mysql.user\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n+-------------+-----------+\n| user        | host      |\n+-------------+-----------+\n| root        | %         |\n| sample_user | %         |\n| root        | localhost |\n+-------------+-----------+\n3 rows \u003cspan class=\"k\"\u003ein \u003c/span\u003e\u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e0.00 sec\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\nmysql\u0026gt; show databases\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sample_db          |\n+--------------------+\n4 rows \u003cspan class=\"k\"\u003ein \u003c/span\u003e\u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e0.00 sec\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003esample_user\u003c/code\u003e と \u003ccode\u003esample_db\u003c/code\u003e があることが確認できました。\u003c/p\u003e\n\n\u003cp\u003e続いて \u003ccode\u003einit.sql\u003c/code\u003e で作成したテーブルとカラムについても確認してみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003emysql\u0026gt; use sample_db\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nDatabase changed\n\nmysql\u0026gt; show tables\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n+---------------------+\n| Tables_in_sample_db |\n+---------------------+\n| sample_table        |\n+---------------------+\n1 row \u003cspan class=\"k\"\u003ein \u003c/span\u003e\u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e0.00 sec\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\nmysql\u0026gt; \u003cspan class=\"k\"\u003eselect\u003c/span\u003e \u003cspan class=\"k\"\u003e*\u003c/span\u003e from sample_table\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n+----+--------+\n| \u003cspan class=\"nb\"\u003eid\u003c/span\u003e | name   |\n+----+--------+\n|  1 | 太郎 |\n|  2 | 花子 |\n|  3 | 令和 |\n+----+--------+\n3 rows \u003cspan class=\"k\"\u003ein \u003c/span\u003e\u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e0.00 sec\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eテーブルとカラムについても問題なく確認できました。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"php-apache-から-mysql-コンテナへの疎通確認\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#php-apache-%E3%81%8B%E3%82%89-mysql-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%B8%E3%81%AE%E7%96%8E%E9%80%9A%E7%A2%BA%E8%AA%8D\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ePHP-Apache から MySQL コンテナへの疎通確認\u003c/h1\u003e\n\n\u003cp\u003ePHP-Apache から MySQL コンテナへの疎通確認用のページとして以下のようなファイルを用意しました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"php\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ehtml/test/connect.php\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n\u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// host=XXXの部分のXXXにはmysqlのサービス名を指定します\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$dsn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e'mysql:host=mysql;dbname=sample_db;'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$db\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003ePDO\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$dsn\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'sample_user'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'sample_pass'\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"nv\"\u003e$sql\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e'SELECT * FROM sample_table;'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$stmt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$db\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"nf\"\u003eprepare\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$sql\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$stmt\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"nf\"\u003eexecute\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$result\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$stmt\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"nf\"\u003efetchAll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"no\"\u003ePDO\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eFETCH_ASSOC\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003evar_dump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$result\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nc\"\u003ePDOException\u003c/span\u003e \u003cspan class=\"nv\"\u003e$e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$e\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"nf\"\u003egetMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eexit\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e※ 注意点として、ホスト名は \u003ccode\u003elocalhost\u003c/code\u003e や \u003ccode\u003e127.0.0.1\u003c/code\u003e ではなく、docker-compose.yml でサービス名として指定してた \u003ccode\u003emysql\u003c/code\u003e を使用します。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehttp://localhost:8080/connect.php\u003c/code\u003e にアクセスすると以下のように表示されればが PHP-Apache から MySQL コンテナへの疎通がうまく行っています。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/88170dd6da6c9ec8439369f9e3135da640679976/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f33303362636539342d616434302d643231372d663932362d6334633137333131386435632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"747\" alt=\"g.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F303bce94-ad40-d217-f926-c4c173118d5c.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=bbc9c39769f5e087fced004baaf07e54\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/303bce94-ad40-d217-f926-c4c173118d5c.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F303bce94-ad40-d217-f926-c4c173118d5c.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=dcff67f69841efb248ffe078445eb81d 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\nさきほど、初期投入されたデータが確認できますね。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"docker-compose-停止削除\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#docker-compose-%E5%81%9C%E6%AD%A2%E5%89%8A%E9%99%A4\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003edocker-compose 停止・削除\u003c/h2\u003e\n\n\u003cp\u003e以下のコマンドで 停止・削除 を行います。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# コンテナを停止\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker-compose stop\n\n\u003cspan class=\"c\"\u003e# コンテナを停止し、そのコンテナとネットワークの削除\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker-compose down\n\n\u003cspan class=\"c\"\u003e# コンテナを停止し、そのコンテナとネットワークを削除、さらにイメージも削除\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker-compose down \u003cspan class=\"nt\"\u003e--rmi\u003c/span\u003e all \u003cspan class=\"nt\"\u003e--volumes\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003e./config/mysql/initdb.d/init.sql\u003c/code\u003e の初期データ投入からやり直したい時などは \u003ccode\u003edocker-compose down --rmi all --volumes\u003c/code\u003e してから \u003ccode\u003e./data\u003c/code\u003e ディレクトリの中身も削除して \u003ccode\u003edocker-compose up -d\u003c/code\u003e でコンテナの構築・起動からやり直してください。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h1\u003e\n\n\u003cp\u003e以下を自動化する docker-compose の開発環境構築を行いました。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDocumentRoot の変更\u003c/li\u003e\n\u003cli\u003ephp.ini の変更\u003c/li\u003e\n\u003cli\u003emy.cnf の変更\u003c/li\u003e\n\u003cli\u003eMySQL への初期データの投入\u003c/li\u003e\n\u003cli\u003eMySQL のデータの永続化\u003c/li\u003e\n\u003cli\u003ePHP-Apache コンテナから MySQL コンテナへの疎通\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eつまり、これらの環境がワンライナーで構築できるようになりました。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"学んだこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AD%A6%E3%82%93%E3%81%A0%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e学んだこと\u003c/h1\u003e\n\n\u003cp\u003e今回初めて docker-compose で開発環境を構築してみて学んだことを羅列します。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e公式ドキュメント（DockerHub）は読んだ方がいい\n\n\u003cul\u003e\n\u003cli\u003eQiita よりも DockerHub を先に見た方がよさそうです。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003edocker-compose.yml と Dockerfile は書き分ける\n\n\u003cul\u003e\n\u003cli\u003e一度変更すればコンテナ起動後に変更のない設定ファイルなどは Dockerfile で \u003ccode\u003eCOPY\u003c/code\u003e でコンテナ側にファイルを配置して、コンテナ起動後に変更のあるものは docker-compose.yml でマウントさせるという書き分けがよさそうです。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eDockerfile をいきなり書くのは難しい\n\n\u003cul\u003e\n\u003cli\u003e以下の手順で Dockerfile を書くと良いです。\n\n\u003cul\u003e\n\u003cli\u003eベースイメージを決める\u003c/li\u003e\n\u003cli\u003eベースイメージのコンテナ内で作業しつつ、うまくいった処理をメモ\u003c/li\u003e\n\u003cli\u003e全て成功したらDockerfileを作成\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e以上になります。\u003c/p\u003e\n","body":"# はじめに\n\ndocker-compose を用いて Apache・PHP・MySQL の開発環境を構築してみた備忘録になります。\n\n# 構成図\n\n\n![ddd.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/83455a40-d189-8150-b9ab-358bf470e8cc.png)\n\n[GitHub](https://github.com/suguruTakahashi-1234/docker-compose-sample) にもあげました。ご参考まで。\n\n\n# できたこと\n\n以下を自動化する docker-compose の開発環境構築を行いました。\n\n- DocumentRoot の変更\n- php.ini の変更\n- my.cnf の変更\n- MySQL への初期データの投入\n- MySQL のデータの永続化\n- PHP-Apache コンテナから MySQL コンテナへの疎通\n\nつまり、これらの環境がワンライナーで構築できるようになりました。\n\n# バージョン情報\n\ndocker-compose はインストールされていることが前提になります。\n今回は以下のバージョンでの動きになります。\n\n```shell\n$ docker-compose -v\ndocker-compose version 1.26.2, build eefe0d31\n```\n\nPHP のバージョンは 5.4、MySQL のバージョンは 5.5 の環境を構築します。\nApache のバージョンは特に気にしていません。\n\n# ディレクトリ構造\n\nディレクトリ構造は以下のようになります。\n\n```shell\n.\n├── config\n│   ├── mysql\n│   │   ├── Dockerfile\n│   │   ├── initdb.d\n│   │   │   └── init.sql\n│   │   └── my.cnf\n│   └── php\n│       ├── Dockerfile\n│       ├── apache2.conf\n│       ├── php.ini\n│       └── sites\n│           ├── 000-default.conf\n│           └── default-ssl.conf\n├── data\n├── docker-compose.yml\n└── html\n    └── test\n        ├── connect.php\n        └── index.php\n```\n\n# 設定\n\n各サービスに以下のような設定ファイルがそれぞれあると思いますが、それらを変更したものを動かしたいと思います。\n\n## Apache の設定\n\n今回は DocumentRoot を変更してみます。\n\n[公式ドキュメント](https://hub.docker.com/_/php) をみると以下のように Dockerfile を記述することで DocumentRoot を変更できるようです。\n\n\u003cimg width=\"1181\" alt=\"b.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/723a16cf-4c9c-a0b5-889b-421886f715e4.png\"\u003e\n\n\n~~いろいろな記事をみるとコンテナから 000-default.conf などの設定ファイルをホスト側にもってきてそれを修正した後、Dockerfile の `COPY` でコンテナ側にコピーするようでした。~~\n\n~~やはり公式ドキュメントをみるのが一番ですね。~~\n\n公式ドキュメントのように行ったらコンテナが再起動ループに陥ってしまいました。\n\n※ 理由をよく調べたら php:5.5-apache 以降であればそれでよかったらしいです。\n\nなので、php:5.4-apache のイメージからコンテナを立ち上げて、元ファイルをホスト側にコピーして、それを編集することにしました。\n\n```shell\n# とりあえず php:5.4-apache のコンテナを動かしてログインする\n$ docker image pull php:5.4-apache\n$ docker container run --name php54apache -d php:5.4-apache\n$ docker exec -it php54apache /bin/bash\n\n# 設定ファイルを確認 ( php:5.4-apache 以前は apache2.conf の修正も必要)\n$ ls /etc/apache2/apache2.conf\nhttpd.conf\n\n$ ls /etc/apache2/sites-available\n000-default.conf  default-ssl.conf\n\n# コンテナを抜ける\n$ exit\n\n# ホスト側にコピー\n$ docker container cp php54apache:/etc/apache2/apache2.conf ./config/php\n$ docker container cp php54apache:/etc/apache2/sites-available/000-default.conf ./config/php/sites\n$ docker container cp php54apache:/etc/apache2/sites-available/default-ssl.conf ./config/php/sites\n```\n\nこれらの `apache2.conf`、`000-default.conf`、`default-ssl.conf` に記述してある DocumentRoot を変更します。\n\n今回は以下のように変更しました。\n\n```shell\n# DocumentRoot /var/www/html\nDocumentRoot /var/www/html/test\n```\nこれで DocumentRoot の変更の準備は完了です。\n\n## PHP の設定\n\nPHP は `php.ini` によって設定を行います。\n\n[公式ドキュメント](https://hub.docker.com/_/php) をみると以下のように記述することで php.ini を指定するらしいです。\n\n\u003cimg width=\"766\" alt=\"a.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/d9576ccb-7260-6052-312c-d5dcd5218f9d.png\"\u003e\n\nしかし、コンテナを立ち上げてログインしてみても、 `php.ini-development` や `php.ini-produciton` のようなファイルは存在しませんでした。\n\nおそらく Apache の設定でもそうであったように公式のドキュメントは過去のバージョンまで挙動は保証していないようです。\n\nサンプルにあるような `php:7.4-fpm-alpine` ならそれで良さそうですね。\n\n今回は `php.ini-development` や `php.ini-produciton` については GitHub で公開してあったのでそちらの [php.ini-development](https://github.com/php/php-src/blob/master/php.ini-development) を元に php.ini を作成することにしました。\n\nphp.ini の修正については[こちら](https://qiita.com/hikotaro_san/items/0aab2a53726674c50868)を参照して、ロケーションや言語の設定を修正しました。\n\n\n\n## MySQL の設定ファイルの変更\n\nMySQL の設定ファイルは `my.cnf` によって行います。\n\nMySQL の設定ファイルの my.cnf は [公式ドキュメント](https://hub.docker.com/_/mysql) によると `/etc/mysql/my.cnf` に配置してあるとのことでした。\n\n\u003cimg width=\"1223\" alt=\"c.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/80c28a39-3ae3-6d20-352e-ca670694e281.png\"\u003e\n\nなのでそちらをローカルホストに持ってきて、適宜修正していきたいと思います。\n\n```shell\n# とりあえず mysql:5.5 のコンテナを動かしてログインする\n$ docker image pull mysql:5.5\n$ docker container run -e MYSQL_ROOT_PASSWORD=sample_pw --name mysql55 -d mysql:5.5\n$ docker exec -it mysql55 /bin/bash\n\n# /etc/mysql/my.cnf を確認\n$ ls /etc/mysql/my.cnf\n/etc/mysql/my.cnf\n\n# コンテナを抜ける\n$ exit\n\n# my.cnf をホスト側にコピー\n$ docker container cp mysql55:/etc/mysql/my.cnf ./config/mysql/\n```\n\nあとは環境に合わせて修正して、`my.cnf` を作成してください。\n\n※ ちなみに今回は `my.cnf` の修正は行っていません。\n\n# Dockerfile の作成\n\nDockerfile は `php:5.4-apache` と `mysql:5.5` のイメージについて作成しました。\n\n## php:5.4-apache\n\n```Dockerfile:config/php/Dockerfile\n# image\nFROM php:5.4-apache\n\n# Set php.ini\nCOPY ./php.ini /usr/local/etc/php/\n\n# Set apache conf (Before tag:5.4-apache)\nCOPY ./apache2.conf /etc/apache2/\nCOPY ./sites/*.conf /etc/apache2/sites-available/\n\n# Set apache conf (After tag:5.5-apache)\n# ENV APACHE_DOCUMENT_ROOT /var/www/html/test\n# RUN sed -ri -e 's!/var/www/html!${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/sites-available/*.conf\n# RUN sed -ri -e 's!/var/www/!${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/apache2.conf /etc/apache2/conf-available/*.conf\n\n# Install MySQL connection module\nRUN apt-get update \\\n  \u0026\u0026 apt-get install -y libpq-dev \\\n  \u0026\u0026 docker-php-ext-install pdo_mysql pdo_pgsql mysqli mbstring\n```\n\nここでは「DocumentRoot の変更」、「php.ini の配置」、「MySQL と疎通するためのモジュールを追加」しています。\n\n## mysql:5.5\n\n```Dockerfile:config/mysql/Dockerfile\n# image\nFROM mysql:5.5\n\n# Set my.cnf\nCOPY ./my.cnf /etc/mysql/conf.d/\n\n# Set Japanese\nRUN apt-get update \u0026\u0026 apt-get install -y \\\n  locales \\\n  \u0026\u0026 apt-get clean \\\n  \u0026\u0026 rm -rf /var/lib/apt/lists/*\nRUN sed -i -E 's/# (ja_JP.UTF-8)/\\1/' /etc/locale.gen \\\n  \u0026\u0026 locale-gen\nENV LANG ja_JP.UTF-8\nCMD [\"mysqld\", \"--character-set-server=utf8\", \"--collation-server=utf8_unicode_ci\"]\n```\n\nデフォルトのままであると MySQL にログインした後に日本語の入力ができなかったため、ここでは日本語を入力可能にするような設定をおこなています。\n\nMySQL の日本語の設定は [こちら](https://oki2a24.com/2020/03/27/use-japanese-in-debian-based-docker-containers/) を参照しました。\n\n# MySQL の初期データの投入\n\ndocker-compose 起動時に MySQL に初期データを投入してみたく、以下のような SQL を用意しました。\n\n```sql:init.sql\nDROP TABLE IF EXISTS sample_table;\n\nCREATE TABLE sample_table (\n    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    name TEXT NOT NULL\n) charset=utf8;\n\nINSERT INTO sample_table (name) VALUES (\"太郎\"),(\"花子\"),(\"令和\");\n```\n\nコンテナ起動後にここで記述した SQL が実行されていることを確認します。\n\n# docker-compose.yml の作成\n\n以下のように docker-compose.yml を作成しました。\n\n```yml:docker-compose.yml\nversion: '3.8'\n\nservices:\n\n  # PHP Apache\n  php-apache:\n    build: ./config/php\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./html:/var/www/html\n    restart: always\n    depends_on:\n      - mysql\n\n  # MySQL\n  mysql:\n    build: ./config/mysql\n    ports:\n      - 3306:3306\n    volumes:\n      - ./config/mysql/initdb.d:/docker-entrypoint-initdb.d\n      - ./data:/var/lib/mysql\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: sample_root_passward\n      MYSQL_DATABASE: sample_db\n      MYSQL_USER: sample_user\n      MYSQL_PASSWORD: sample_pass\n```\n\n## MySQL のデータの永続化について\n\nMySQL のデータディレクトリは /var/lib/mysql であり、 `- ./data:/var/lib/mysql` とあるようにホスト側の `./data` ディレクトリにマウントすることによってデータを永続化しております。\n\n試してみたところ `docker-compose stop` や `docker-compose down` してもデータが永続化されていることが確認できました。\n\n# docker-compose 使い方\n\nいよいよ docker-compose を動かします。\n\n## docker-compose 起動\n\nまずはなにも起動されていないことを確認します。\n\n```shell\n$ docker-compose ps\nName   Command   State   Ports\n------------------------------\n\n$ docker container ls\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n````\n\n今回はわかりやすいようにコンテナも空の状態にしておきます。\n\ndocker-compose.yml が存在する階層で `docker-compose up -d` コマンドを実行することで、docker-compose.yml の記述をもとにコンテナが作成されます。\n\n※ docker-compose のコマンドの `build` と `up` の違いやオプションについては[こちら](https://qiita.com/tegnike/items/bcdcee0320e11a928d46)がわかりやすかったです。\n\n```shell\n# image の作成\n$ docker-compose build --no-cache\nSuccessfully tagged docker-compose-sample_php-apache:latest\n\n# コンテナの構築・起動\n$ docker-compose up -d\nCreating network \"docker-compose-sample_default\" with the default driver\nCreating docker-compose-sample_mysql_1 ... done\nCreating docker-compose-sample_php-apache_1 ... done\n\n# docker-compose の確認\n$ docker-compose ps\n               Name                            Command             State           Ports\n-------------------------------------------------------------------------------------------------\ndocker-compose-sample_mysql_1        docker-entrypoint.sh mysqld   Up      0.0.0.0:3306-\u003e3306/tcp\ndocker-compose-sample_php-apache_1   apache2-foreground            Up      0.0.0.0:8080-\u003e80/tcp\n\n# コンテナの確認\n$ docker container ls\nCONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS              PORTS                    NAMES\n26b0cec2daad        docker-compose-sample_php-apache   \"apache2-foreground\"     3 minutes ago       Up 3 minutes        0.0.0.0:8080-\u003e80/tcp     docker-compose-sample_php-apache_1\neaae044f4bba        mysql:5.5                          \"docker-entrypoint.s…\"   3 minutes ago       Up 3 minutes        0.0.0.0:3306-\u003e3306/tcp   docker-compose-sample_mysql_1\n```\n\nコンテナが動いていることが確認できました。\n\n## PHP-Apache コンテナの確認\n\nDocumentRoot の直下に配置する、php:5.4-apache コンテナの疎通確認用のページとして以下のようなファイルを用意しました。\n\n```php:html/test/index.php\n\u003c?php\necho  __DIR__;\nphpinfo();\n```\n\n`http://localhost:8080` にアクセスすると以下のように表示されるはずです。\n\n`echo  __DIR__;` はその PHP ファイルが置かれている絶対パスを出力するので DocumentRoot の変更が行われていることが確認できます。\n\nまた、`php.ini` についてオリジナルものから修正を加えていれば、`phpinfo();` の出力でそちらも反映されていることも確認できるかと思います。\n\n\u003cimg width=\"692\" alt=\"f.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/44a69daa-0557-a852-061b-e92e8fd7250b.png\"\u003e\n\n\n# MySQL コンテナの確認\n\n`mysql:5.5` のイメージで作成されたコンテナにログインして、初期データが投入されていることを確認します。\n\n```:shell\n# コンテナにログイン\n$ docker exec -it eaae044f4bba /bin/bash\n\n# MySQL にログイン\n$ mysql -p\nEnter password:\n```\n\nパスワードを求められるので docker-compose.yml で `MYSQL_ROOT_PASSWORD` の環境変数に登録した `sample_root_passward` と入力するとログインできます。\n\ndocker-compose.yml に登録した `MYSQL_DATABASE`、`MYSQL_USER` が登録されていることを確認します。\n\n```shell\nmysql\u003e select user, host from mysql.user;\n\n+-------------+-----------+\n| user        | host      |\n+-------------+-----------+\n| root        | %         |\n| sample_user | %         |\n| root        | localhost |\n+-------------+-----------+\n3 rows in set (0.00 sec)\n\nmysql\u003e show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sample_db          |\n+--------------------+\n4 rows in set (0.00 sec)\n```\n\n`sample_user` と `sample_db` があることが確認できました。\n\n続いて `init.sql` で作成したテーブルとカラムについても確認してみます。\n\n```shell\nmysql\u003e use sample_db;\nDatabase changed\n\nmysql\u003e show tables;\n+---------------------+\n| Tables_in_sample_db |\n+---------------------+\n| sample_table        |\n+---------------------+\n1 row in set (0.00 sec)\n\nmysql\u003e select * from sample_table;\n+----+--------+\n| id | name   |\n+----+--------+\n|  1 | 太郎 |\n|  2 | 花子 |\n|  3 | 令和 |\n+----+--------+\n3 rows in set (0.00 sec)\n```\n\nテーブルとカラムについても問題なく確認できました。\n\n# PHP-Apache から MySQL コンテナへの疎通確認\n\nPHP-Apache から MySQL コンテナへの疎通確認用のページとして以下のようなファイルを用意しました。\n\n```php:html/test/connect.php\n\u003c?php\ntry {\n    // host=XXXの部分のXXXにはmysqlのサービス名を指定します\n    $dsn = 'mysql:host=mysql;dbname=sample_db;';\n    $db = new PDO($dsn, 'sample_user', 'sample_pass');\n\n    $sql = 'SELECT * FROM sample_table;';\n    $stmt = $db-\u003eprepare($sql);\n    $stmt-\u003eexecute();\n    $result = $stmt-\u003efetchAll(PDO::FETCH_ASSOC);\n    var_dump($result);\n} catch (PDOException $e) {\n    echo $e-\u003egetMessage();\n    exit;\n}\n```\n※ 注意点として、ホスト名は `localhost` や `127.0.0.1` ではなく、docker-compose.yml でサービス名として指定してた `mysql` を使用します。\n\n`http://localhost:8080/connect.php` にアクセスすると以下のように表示されればが PHP-Apache から MySQL コンテナへの疎通がうまく行っています。\n\n\u003cimg width=\"747\" alt=\"g.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/303bce94-ad40-d217-f926-c4c173118d5c.png\"\u003e\nさきほど、初期投入されたデータが確認できますね。\n\n## docker-compose 停止・削除\n\n以下のコマンドで 停止・削除 を行います。\n\n```shell\n# コンテナを停止\n$ docker-compose stop\n\n# コンテナを停止し、そのコンテナとネットワークの削除\n$ docker-compose down\n\n# コンテナを停止し、そのコンテナとネットワークを削除、さらにイメージも削除\n$ docker-compose down --rmi all --volumes\n```\n\n`./config/mysql/initdb.d/init.sql` の初期データ投入からやり直したい時などは `docker-compose down --rmi all --volumes` してから `./data` ディレクトリの中身も削除して `docker-compose up -d` でコンテナの構築・起動からやり直してください。\n\n# まとめ\n\n以下を自動化する docker-compose の開発環境構築を行いました。\n\n- DocumentRoot の変更\n- php.ini の変更\n- my.cnf の変更\n- MySQL への初期データの投入\n- MySQL のデータの永続化\n- PHP-Apache コンテナから MySQL コンテナへの疎通\n\nつまり、これらの環境がワンライナーで構築できるようになりました。\n\n# 学んだこと\n\n今回初めて docker-compose で開発環境を構築してみて学んだことを羅列します。\n\n- 公式ドキュメント（DockerHub）は読んだ方がいい\n    - Qiita よりも DockerHub を先に見た方がよさそうです。\n- docker-compose.yml と Dockerfile は書き分ける\n    - 一度変更すればコンテナ起動後に変更のない設定ファイルなどは Dockerfile で `COPY` でコンテナ側にファイルを配置して、コンテナ起動後に変更のあるものは docker-compose.yml でマウントさせるという書き分けがよさそうです。\n- Dockerfile をいきなり書くのは難しい\n    - 以下の手順で Dockerfile を書くと良いです。\n        - ベースイメージを決める\n        - ベースイメージのコンテナ内で作業しつつ、うまくいった処理をメモ\n        - 全て成功したらDockerfileを作成\n\n以上になります。\n\n\n","coediting":false,"comments_count":0,"created_at":"2020-08-14T05:41:38+09:00","group":null,"id":"5daf89b2d33ef8d9fa2e","likes_count":53,"private":false,"reactions_count":0,"tags":[{"name":"PHP","versions":[]},{"name":"MySQL","versions":[]},{"name":"Apache","versions":[]},{"name":"Docker","versions":[]},{"name":"docker-compose","versions":[]}],"title":"docker-compose を用いて Apache・PHP・MySQL の開発環境を構築してみた","updated_at":"2021-02-24T23:21:40+09:00","url":"https://qiita.com/ikuraikura/items/5daf89b2d33ef8d9fa2e","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003ePython のフレームワークである Django のアプリケーションを用いて Dockerfile を作成してみた備忘録です。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"事前準備\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e事前準備\u003c/h1\u003e\n\n\u003cp\u003e事前準備として Docker の image と container は空の状態からスタートします。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ docker image ls\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\n$docker container ls\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS                  NAMES\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"django-プロジェクトの作成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#django-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDjango プロジェクトの作成\u003c/h1\u003e\n\n\u003cp\u003e今回は\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/d4377a16c0e42cf48287\" id=\"reference-6f5b52d6dec6aa70bcb0\"\u003eこちらの記事\u003c/a\u003eで作成した Django で作成したアプリを使用します。\u003c/p\u003e\n\n\u003cp\u003e記事を読まなくもよいように抑えておくべきことだけを説明すると、以下のコマンドを実行することでアプリが起動します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ python manage.py runserver\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eアプリが起動している状態で \u003ccode\u003ehttp://localhost:8000/hello\u003c/code\u003e にアクセスすると以下のような Hello World が表示される簡単なアプリです。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/d88212109e1a6cf243c035043f9adb0e6accbd90/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f63663131363434652d326364652d303966392d356664352d6531393738643830616136642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"314\" alt=\"スクリーンショット 2020-08-10 23.08.30.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fcf11644e-2cde-09f9-5fd5-e1978d80aa6d.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=1daa6cb74de651d3b417116beb17f334\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/cf11644e-2cde-09f9-5fd5-e1978d80aa6d.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fcf11644e-2cde-09f9-5fd5-e1978d80aa6d.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=88d1c0d41cafde2ea84d92160db6018f 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"構造\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%A7%8B%E9%80%A0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e構造\u003c/h2\u003e\n\n\u003cp\u003e以下に示したような構造になります。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/suguruTakahashi-1234/django-sample\" rel=\"nofollow noopener\" target=\"_blank\"\u003eGitHub\u003c/a\u003e にも公開しております。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"Dockerfile\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eDockerfile\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ tree\n.\n├── Dockerfile\n├── requirements.txt\n├── hello\n│   └── （省略）\n├── helloWorldProject\n│   └── （省略）\n├── README.md\n├── db.sqlite3\n└── manage.py\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003eDockerfile\u003c/code\u003e と \u003ccode\u003erequirements.txt\u003c/code\u003e は今回作成すべきファイルになるのでそちらについて解説します。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"dockerfile-の作成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#dockerfile-%E3%81%AE%E4%BD%9C%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDockerfile の作成\u003c/h1\u003e\n\n\u003cp\u003e今回は以下のように作成しました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"Dockerfile\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eDockerfile\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# python:3.8の公式 image をベースの image として設定\u003c/span\u003e\n\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"s\"\u003e python:3.8\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# 作業ディレクトリの作成\u003c/span\u003e\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir\u003c/span\u003e /code\n\n\u003cspan class=\"c\"\u003e# 作業ディレクトリの設定\u003c/span\u003e\n\u003cspan class=\"k\"\u003eWORKDIR\u003c/span\u003e\u003cspan class=\"s\"\u003e /code\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# カレントディレクトリにある資産をコンテナ上の指定のディレクトリにコピーする\u003c/span\u003e\n\u003cspan class=\"k\"\u003eADD\u003c/span\u003e\u003cspan class=\"s\"\u003e . /code\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# pipでrequirements.txtに指定されているパッケージを追加する\u003c/span\u003e\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003epip \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e requirements.txt\n\n\u003cspan class=\"c\"\u003e# 起動（コンテナのポート8002番で受け付けるように起動する）\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCMD\u003c/span\u003e\u003cspan class=\"s\"\u003e python3 manage.py runserver 0.0.0.0:8002\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e今回のファイルの内容は以下のようになります。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003epython:3.8の公式 image をベースにして、作業ディレクトリ（ \u003ccode\u003e/code\u003c/code\u003e ） を作成する\u003c/li\u003e\n\u003cli\u003e現在のソースを全てこのコンテナに写し換える\u003c/li\u003e\n\u003cli\u003e必要なモジュールを pip でインストールする\u003c/li\u003e\n\u003cli\u003eコンテナ起動時にアプリケーションを起動するということが書かれております。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eDockerfile の書き方については説明を省略いたします。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eRUN\u003c/code\u003e と \u003ccode\u003eCMD\u003c/code\u003e の違いは\u003ca href=\"https://qiita.com/YusukeHigaki/items/044164837daa5e845d50\" id=\"reference-60ad3c2e0c4416999bfe\"\u003eこちらの記事\u003c/a\u003eがわかりやすかったです。\u003cbr\u003e\n（簡単に説明すると、\u003ccode\u003eRUN\u003c/code\u003e は build 中に実行されるコマンドで、\u003ccode\u003eCMD\u003c/code\u003e はコンテナ起動時に実行されるコマンドです。）\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"requirementstxt-の作成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#requirementstxt-%E3%81%AE%E4%BD%9C%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003erequirements.txt の作成\u003c/h1\u003e\n\n\u003cp\u003eDockerfile で記述したように pip コマンドでインストールするモジュールは \u003ccode\u003erequirements.txt\u003c/code\u003e に記述するようにしました。\u003c/p\u003e\n\n\u003cp\u003e今回は Django が必要になるため、そちらを記述します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"txt\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003erequirements.txt\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003eDjango==3.1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e今回のようにモジュールが一つの場合は外部ファイルにする必要はあまりないですが、インストールするモジュールが複数ある場合はこのように記載すると管理が楽です。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"dockerfile-から-image-の作成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#dockerfile-%E3%81%8B%E3%82%89-image-%E3%81%AE%E4%BD%9C%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDockerfile から image の作成\u003c/h1\u003e\n\n\u003cp\u003eDockerfile を用意した後に \u003ccode\u003edocker build -t [作成する image 名] [Dockerfileまでの相対パス]\u003c/code\u003e コマンドを実行することで image が作成されます。\u003c/p\u003e\n\n\u003cp\u003e今回は \u003ccode\u003ehello-world\u003c/code\u003e という名前の image を作成します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ docker build -t hello-world .\n（省略）\nSuccessfully tagged hello-world:latest\n\n$ docker image ls\nREPOSITORY          TAG                 IMAGE ID            CREATED              SIZE\nhello-world         latest              6e2fc6616ab1        About a minute ago   922MB\npython              3.8                 6feb119dd186        5 days ago           882MB\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこのように \u003ccode\u003ehello-world\u003c/code\u003e という image が作成されたことがわかります。\u003cbr\u003e\nついでに \u003ccode\u003epython:3.8\u003c/code\u003e の image も pull されて表示されます。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eSIZE\u003c/code\u003e の項目をみると \u003ccode\u003epython\u003c/code\u003e よりも \u003ccode\u003ehello-world\u003c/code\u003e の方が大きいことから、元にした image に色々と追加されていることが伺えますね。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"コンテナの起動\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E8%B5%B7%E5%8B%95\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eコンテナの起動\u003c/h1\u003e\n\n\u003cp\u003eimage を作成したので、コンテナを起動させます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ docker container run -d -p 8001:8002 hello-world\n$ docker container ls\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\nff92b40204f3        hello-world         \"/bin/sh -c 'python3…\"   About an hour ago   Up About an hour    0.0.0.0:8001-\u0026gt;8002/tcp   funny_antonelli\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003erun\u003c/code\u003e コマンドのオプションについて補足は以下の通りになります。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e-d\u003c/code\u003e ：バックグラウンドで起動する\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e-p\u003c/code\u003e ：コンテナのポートを公開する\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e今回は \u003ccode\u003e8001:8002\u003c/code\u003eと指定しているので､「ホストの 8001 番ポート」と「コンテナの 8002 番ポート」を紐づけいているという意味になります。\u003c/p\u003e\n\n\u003cp\u003e（本来は 8001番 や 8002 番のポートは使用しませんが、ホストとコンテナのポート番号を意識するためにあえて変わった番号を用いております。）\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehttp://localhost:8001/hello\u003c/code\u003e にアクセスすると以下のように表示されるはずです。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/c3e662b6cc216ae86f5613dfcef59636e7b10afe/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f38613535386130372d666464342d363061302d613161632d3133633066373236356333662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"313\" alt=\"スクリーンショット 2020-08-11 2.13.29.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F8a558a07-fdd4-60a0-a1ac-13c0f7265c3f.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=a1cafbbe06e8a2e92486157e08fee68c\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/8a558a07-fdd4-60a0-a1ac-13c0f7265c3f.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F8a558a07-fdd4-60a0-a1ac-13c0f7265c3f.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=19684f0cba207735ee897a06fd0012b8 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"メリット\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eメリット\u003c/h1\u003e\n\n\u003cp\u003eDockerfile ファイルを記述することで、\u003c/p\u003e\n\n\u003cp\u003e『この Docker Image を pull してから、docker container run コマンドを実行した際は、必ず毎回、そのコンテナにログインして、このコマンドとこのコマンドを実行して〜（省略）』\u003c/p\u003e\n\n\u003cp\u003eなどの手順書が\u003c/p\u003e\n\n\u003cp\u003e『 Dockerfile があるディレクトリで docker build -t [イメージ名] . コマンドを実行する。』\u003c/p\u003e\n\n\u003cp\u003eの1行で済むようになります。\u003c/p\u003e\n\n\u003cp\u003e例えば、今回のケースであれば Dockerfile の \u003ccode\u003eFROM python:3.8\u003c/code\u003e より下は全部手順書に示さなければなりません。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003eDockerfile を作成した\u003c/li\u003e\n\u003cli\u003eDockerfile から image を作成した\u003c/li\u003e\n\u003cli\u003e作成した image からコンテナを起動して挙動を確認した\u003c/li\u003e\n\u003c/ul\u003e\n","body":"# はじめに\nPython のフレームワークである Django のアプリケーションを用いて Dockerfile を作成してみた備忘録です。\n\n# 事前準備\n\n事前準備として Docker の image と container は空の状態からスタートします。\n\n```\n$ docker image ls\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\n$docker container ls\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS                  NAMES\n```\n\n# Django プロジェクトの作成\n\n今回は[こちらの記事](https://qiita.com/sugurutakahashi12345/items/d4377a16c0e42cf48287)で作成した Django で作成したアプリを使用します。\n\n記事を読まなくもよいように抑えておくべきことだけを説明すると、以下のコマンドを実行することでアプリが起動します。\n\n```\n$ python manage.py runserver\n```\n\nアプリが起動している状態で `http://localhost:8000/hello` にアクセスすると以下のような Hello World が表示される簡単なアプリです。\n\n\u003cimg width=\"314\" alt=\"スクリーンショット 2020-08-10 23.08.30.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/cf11644e-2cde-09f9-5fd5-e1978d80aa6d.png\"\u003e\n\n\n##  構造\n\n以下に示したような構造になります。\n\n[GitHub](https://github.com/suguruTakahashi-1234/django-sample) にも公開しております。\n\n```Dockerfile:Dockerfile\n$ tree\n.\n├── Dockerfile\n├── requirements.txt\n├── hello\n│   └── （省略）\n├── helloWorldProject\n│   └── （省略）\n├── README.md\n├── db.sqlite3\n└── manage.py\n```\n\n`Dockerfile` と `requirements.txt` は今回作成すべきファイルになるのでそちらについて解説します。\n\n\n# Dockerfile の作成\n\n今回は以下のように作成しました。\n\n```Dockerfile:Dockerfile\n# python:3.8の公式 image をベースの image として設定\nFROM python:3.8\n\n# 作業ディレクトリの作成\nRUN mkdir /code\n\n# 作業ディレクトリの設定\nWORKDIR /code\n\n# カレントディレクトリにある資産をコンテナ上の指定のディレクトリにコピーする\nADD . /code\n\n# pipでrequirements.txtに指定されているパッケージを追加する\nRUN pip install -r requirements.txt\n\n# 起動（コンテナのポート8002番で受け付けるように起動する）\nCMD python3 manage.py runserver 0.0.0.0:8002\n```\n今回のファイルの内容は以下のようになります。\n\n- python:3.8の公式 image をベースにして、作業ディレクトリ（ `/code` ） を作成する\n- 現在のソースを全てこのコンテナに写し換える\n- 必要なモジュールを pip でインストールする\n- コンテナ起動時にアプリケーションを起動するということが書かれております。\n\nDockerfile の書き方については説明を省略いたします。\n\n`RUN` と `CMD` の違いは[こちらの記事](https://qiita.com/YusukeHigaki/items/044164837daa5e845d50)がわかりやすかったです。\n（簡単に説明すると、`RUN` は build 中に実行されるコマンドで、`CMD` はコンテナ起動時に実行されるコマンドです。）\n\n# requirements.txt の作成\n\nDockerfile で記述したように pip コマンドでインストールするモジュールは `requirements.txt` に記述するようにしました。\n\n今回は Django が必要になるため、そちらを記述します。\n\n```txt:requirements.txt\nDjango==3.1\n```\n\n今回のようにモジュールが一つの場合は外部ファイルにする必要はあまりないですが、インストールするモジュールが複数ある場合はこのように記載すると管理が楽です。\n\n# Dockerfile から image の作成\n\nDockerfile を用意した後に `docker build -t [作成する image 名] [Dockerfileまでの相対パス]` コマンドを実行することで image が作成されます。\n\n今回は `hello-world` という名前の image を作成します。\n\n```\n$ docker build -t hello-world .\n（省略）\nSuccessfully tagged hello-world:latest\n\n$ docker image ls\nREPOSITORY          TAG                 IMAGE ID            CREATED              SIZE\nhello-world         latest              6e2fc6616ab1        About a minute ago   922MB\npython              3.8                 6feb119dd186        5 days ago           882MB\n```\n\nこのように `hello-world` という image が作成されたことがわかります。\nついでに `python:3.8` の image も pull されて表示されます。\n\n`SIZE` の項目をみると `python` よりも `hello-world` の方が大きいことから、元にした image に色々と追加されていることが伺えますね。\n\n# コンテナの起動\n\nimage を作成したので、コンテナを起動させます。\n\n```\n$ docker container run -d -p 8001:8002 hello-world\n$ docker container ls\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\nff92b40204f3        hello-world         \"/bin/sh -c 'python3…\"   About an hour ago   Up About an hour    0.0.0.0:8001-\u003e8002/tcp   funny_antonelli\n```\n\n`run` コマンドのオプションについて補足は以下の通りになります。\n\n- `-d` ：バックグラウンドで起動する\n- `-p` ：コンテナのポートを公開する\n\n今回は `8001:8002`と指定しているので､「ホストの 8001 番ポート」と「コンテナの 8002 番ポート」を紐づけいているという意味になります。\n\n（本来は 8001番 や 8002 番のポートは使用しませんが、ホストとコンテナのポート番号を意識するためにあえて変わった番号を用いております。）\n\n`http://localhost:8001/hello` にアクセスすると以下のように表示されるはずです。\n\u003cimg width=\"313\" alt=\"スクリーンショット 2020-08-11 2.13.29.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/8a558a07-fdd4-60a0-a1ac-13c0f7265c3f.png\"\u003e\n\n# メリット\nDockerfile ファイルを記述することで、\n\n『この Docker Image を pull してから、docker container run コマンドを実行した際は、必ず毎回、そのコンテナにログインして、このコマンドとこのコマンドを実行して〜（省略）』\n\nなどの手順書が\n\n『 Dockerfile があるディレクトリで docker build -t [イメージ名] . コマンドを実行する。』\n\nの1行で済むようになります。\n\n例えば、今回のケースであれば Dockerfile の `FROM python:3.8` より下は全部手順書に示さなければなりません。\n\n# まとめ\n- Dockerfile を作成した\n- Dockerfile から image を作成した\n- 作成した image からコンテナを起動して挙動を確認した\n","coediting":false,"comments_count":0,"created_at":"2020-08-11T04:18:36+09:00","group":null,"id":"6d68e6bb9163961a8d4d","likes_count":2,"private":false,"reactions_count":0,"tags":[{"name":"Python","versions":[]},{"name":"Django","versions":[]},{"name":"Python3","versions":[]},{"name":"dockerfile","versions":[]}],"title":"Django の開発環境の Dockerfile を作成してみた","updated_at":"2020-08-15T00:40:32+09:00","url":"https://qiita.com/ikuraikura/items/6d68e6bb9163961a8d4d","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003ePython をちょっとだけ触ってみたく、最も人気である Django というフレームワークを用いてブラウザに \u003ccode\u003eHello World\u003c/code\u003e と表示させるまでやってみたので、その備忘録を投稿いたします。\u003c/p\u003e\n\n\u003cp\u003e今回こちらの記事を参考にさせていただきました。\u003c/p\u003e\n\n\u003cp\u003eDjangoで初めてのHello World\u003cbr\u003e\n\u003ca href=\"https://qiita.com/Yuji_6523/items/d601ad11ad49b9e7ab0e\" class=\"autolink\" id=\"reference-f4d432035320de91df2a\"\u003ehttps://qiita.com/Yuji_6523/items/d601ad11ad49b9e7ab0e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e前提として python と pip はインストール済みとします。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"django-コマンドのインストール\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#django-%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003edjango コマンドのインストール\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003epip install django\u003c/code\u003e と実行して、 django コマンドをインストールします。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ python --version\nPython 3.8.2\n\n$ pip install django\n# (省略)\n\n$ python -m django --version\n3.1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"django-プロジェクトの作成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#django-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDjango プロジェクトの作成\u003c/h1\u003e\n\n\u003cp\u003e今回は \u003ccode\u003ehelloWorldProject\u003c/code\u003e という名前のプロジェクトを作成してみた例になります。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003edjango-admin startproject [プロジェクト名] [作成するディレクトリ先]\u003c/code\u003e とコマンドを実行することでプロジェクトが作成できます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ django-admin startproject helloWorldProject .\n$ tree \n.\n├── helloWorldProject\n│   ├── __init__.py\n│   ├── asgi.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n└── manage.py\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"アプリケーションの追加\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E8%BF%BD%E5%8A%A0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eアプリケーションの追加\u003c/h1\u003e\n\n\u003cp\u003eこのままだと何もない状態なので、\u003ccode\u003eドメイン/hello\u003c/code\u003e とブラウザでアクセスしたときに起動するようなアプリケーションを追加してみます。\u003c/p\u003e\n\n\u003cp\u003e今回は \u003ccode\u003ehello\u003c/code\u003e という名前のアプリケーションを追加します。\u003cbr\u003e\n\u003ccode\u003epython manage.py startapp [アプリケーション名]\u003c/code\u003e というコマンドを実行することでアプリケーションを追加できます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ python manage.py startapp hello\n$ tree\n.\n├── hello\n│   ├── __init__.py\n│   ├── admin.py\n│   ├── apps.py\n│   ├── migrations\n│   │   └── __init__.py\n│   ├── models.py\n│   ├── tests.py\n│   └── views.py\n├── helloWorldProject\n│   ├── __init__.py\n│   ├── __pycache__\n│   │   ├── __init__.cpython-38.pyc\n│   │   └── settings.cpython-38.pyc\n│   ├── asgi.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n└── manage.py\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"settingspy-への追記\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#settingspy-%E3%81%B8%E3%81%AE%E8%BF%BD%E8%A8%98\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003esettings.py への追記\u003c/h2\u003e\n\n\u003cp\u003eこのままだと、\u003ccode\u003ehello\u003c/code\u003e アプリケーションは適用されていないので設定を追記します。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehelloWorldProject/settings.py\u003c/code\u003e に \u003ccode\u003ehello\u003c/code\u003e というアプリケーションがあることを追記します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"python\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ehelloWorldProject/settings.py\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eINSTALLED_APPS\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e'django.contrib.admin'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e'django.contrib.auth'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e'django.contrib.contenttypes'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e'django.contrib.sessions'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e'django.contrib.messages'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e'django.contrib.staticfiles'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e# 追加\n\u003c/span\u003e    \u003cspan class=\"s\"\u003e'hello'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ルーティング設定\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E8%A8%AD%E5%AE%9A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eルーティング設定\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003ehelloWorldProject/urls.py\u003c/code\u003e でルーティング設定を行います。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"python\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ehelloWorldProject/urls.py\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003edjango.contrib\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eadmin\u003c/span\u003e\n\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003edjango.urls\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einclude\u003c/span\u003e \u003cspan class=\"c1\"\u003e# include 追加\n\u003c/span\u003e\n\u003cspan class=\"n\"\u003eurlpatterns\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e'admin/'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eadmin\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esite\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eurls\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e# 追加\n\u003c/span\u003e    \u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e''\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einclude\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e'hello.urls'\u003c/span\u003e\u003cspan class=\"p\"\u003e)),\u003c/span\u003e\n\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eここに \u003ccode\u003epath('hello',\u003c/code\u003e と書くのもありですが、今回は、\u003ccode\u003ehello/urls.py\u003c/code\u003e というファイルを作成して、\u003ccode\u003eドメイン/hello\u003c/code\u003e とリクエストされた場合のルーティングについては \u003ccode\u003ehello/urls.py\u003c/code\u003e に丸投げします。\u003c/p\u003e\n\n\u003cp\u003eそうした理由はなるべく高凝集で低結合なプログラムを目指すためです。\u003c/p\u003e\n\n\u003cp\u003eさらに \u003ccode\u003ehello/urls.py\u003c/code\u003e を新規に作成して、\u003ccode\u003eドメイン/hello\u003c/code\u003e とアクセスされた場合 \u003ccode\u003ehello/views.py\u003c/code\u003e の index()関数を呼び出すように設定します。 \u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"python\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ehello/urls.py(新規追加ファイル)\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003edjango.urls\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e\n\n\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003e.\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eviews\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eurlpatterns\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e'hello'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eviews\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"view-の設定\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#view-%E3%81%AE%E8%A8%AD%E5%AE%9A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eview の設定\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003ehello/urls.py\u003c/code\u003e で設定したように \u003ccode\u003ehello/views.py\u003c/code\u003e に \u003ccode\u003eindex()関数\u003c/code\u003e を作成します。\u003c/p\u003e\n\n\u003cp\u003e今回は HTTPレスポンスで \u003ccode\u003eHello World\u003c/code\u003e と記述された \u003ccode\u003eContent-Type: text/html\u003c/code\u003e のファイルを返却するようにします。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"python\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ehello/views.py\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\n\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003edjango.http\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpResponse\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpResponse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e'Hello World'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"マイグレーション\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%9E%E3%82%A4%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eマイグレーション\u003c/h1\u003e\n\n\u003cp\u003e今回はあまり関係ないのですが、ここでいうマイグレーションとはアプリケーションで使うデータベースの定義を自動的に作成・管理する機能のことを指します。\u003c/p\u003e\n\n\u003cp\u003e以下のコマンドで実行できます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ python manage.py migrate\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eマイグレーションに成功すればコマンド実行後にエラーが出ないはずです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"ローカルホストでの起動\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%83%9B%E3%82%B9%E3%83%88%E3%81%A7%E3%81%AE%E8%B5%B7%E5%8B%95\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eローカルホストでの起動\u003c/h1\u003e\n\n\u003cp\u003e以下のコマンドでローカルホストに起動することができます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ python manage.py runserver\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eデフォルトではポート8000番で起動するので、 \u003ccode\u003ehttp://localhost:8000/hello\u003c/code\u003e にアクセスして、\u003ccode\u003epython:hello/views.py\u003c/code\u003e で記述した \u003ccode\u003eHello World\u003c/code\u003e が表示されてば成功です。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/ce4fc21428f92310085b4bc0fc57d83692dc4ff6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f33623862633033382d303231382d616330652d626132652d3164343263656134323261312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"314\" alt=\"スクリーンショット 2020-08-10 23.08.30.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F3b8bc038-0218-ac0e-ba2e-1d42cea422a1.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=97981993fa9eb0b7d5afaa43f4fa3005\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/3b8bc038-0218-ac0e-ba2e-1d42cea422a1.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F3b8bc038-0218-ac0e-ba2e-1d42cea422a1.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=662aa547f713303df99a2150f3ebe675 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n以上になります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003eDjango というフレームワークを用いてプロジェクトを作成できるようになった\u003c/li\u003e\n\u003cli\u003eDjango でアプリケーションを追加できるようになった\u003c/li\u003e\n\u003cli\u003eDjango でローカルホストでアプリケーションを起動して、動作が確認できるようなった\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"さいごに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eさいごに\u003c/h1\u003e\n\n\u003cp\u003e今回作成したプロジェクトは\u003ca href=\"https://github.com/suguruTakahashi-1234/django-sample\" rel=\"nofollow noopener\" target=\"_blank\"\u003eGitHub\u003c/a\u003eで公開しました。\u003c/p\u003e\n\n\u003cp\u003eこのプロジェクトを使用して Dockerfile 記述した記事も投稿しました。\u003cbr\u003e\n・\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/6d68e6bb9163961a8d4d\" id=\"reference-d6f2a87beebb9bca9e1d\"\u003eDjango の開発環境の Dockerfile を作成してみた\u003c/a\u003e\u003c/p\u003e\n","body":"# はじめに\nPython をちょっとだけ触ってみたく、最も人気である Django というフレームワークを用いてブラウザに `Hello World` と表示させるまでやってみたので、その備忘録を投稿いたします。\n\n今回こちらの記事を参考にさせていただきました。\n\nDjangoで初めてのHello World\nhttps://qiita.com/Yuji_6523/items/d601ad11ad49b9e7ab0e\n\n前提として python と pip はインストール済みとします。\n\n# django コマンドのインストール\n\n`pip install django` と実行して、 django コマンドをインストールします。\n\n```\n$ python --version\nPython 3.8.2\n\n$ pip install django\n# (省略)\n\n$ python -m django --version\n3.1\n```\n\n# Django プロジェクトの作成\n\n今回は `helloWorldProject` という名前のプロジェクトを作成してみた例になります。\n\n`django-admin startproject [プロジェクト名] [作成するディレクトリ先]` とコマンドを実行することでプロジェクトが作成できます。\n\n```\n$ django-admin startproject helloWorldProject .\n$ tree \n.\n├── helloWorldProject\n│   ├── __init__.py\n│   ├── asgi.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n└── manage.py\n```\n\n# アプリケーションの追加\n\nこのままだと何もない状態なので、`ドメイン/hello` とブラウザでアクセスしたときに起動するようなアプリケーションを追加してみます。\n\n今回は `hello` という名前のアプリケーションを追加します。\n`python manage.py startapp [アプリケーション名]` というコマンドを実行することでアプリケーションを追加できます。\n\n```\n$ python manage.py startapp hello\n$ tree\n.\n├── hello\n│   ├── __init__.py\n│   ├── admin.py\n│   ├── apps.py\n│   ├── migrations\n│   │   └── __init__.py\n│   ├── models.py\n│   ├── tests.py\n│   └── views.py\n├── helloWorldProject\n│   ├── __init__.py\n│   ├── __pycache__\n│   │   ├── __init__.cpython-38.pyc\n│   │   └── settings.cpython-38.pyc\n│   ├── asgi.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n└── manage.py\n```\n\n## settings.py への追記\n\nこのままだと、`hello` アプリケーションは適用されていないので設定を追記します。\n\n`helloWorldProject/settings.py` に `hello` というアプリケーションがあることを追記します。\n\n```python:helloWorldProject/settings.py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # 追加\n    'hello',\n]\n```\n\n## ルーティング設定\n\n`helloWorldProject/urls.py` でルーティング設定を行います。\n\n```python:helloWorldProject/urls.py\nfrom django.contrib import admin\nfrom django.urls import path, include # include 追加\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    # 追加\n    path('', include('hello.urls')),\n]\n```\n\nここに `path('hello',` と書くのもありですが、今回は、`hello/urls.py` というファイルを作成して、`ドメイン/hello` とリクエストされた場合のルーティングについては `hello/urls.py` に丸投げします。\n\nそうした理由はなるべく高凝集で低結合なプログラムを目指すためです。\n\nさらに `hello/urls.py` を新規に作成して、`ドメイン/hello` とアクセスされた場合 `hello/views.py` の index()関数を呼び出すように設定します。 \n\n```python:hello/urls.py(新規追加ファイル)\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('hello', views.index),\n]\n```\n\n## view の設定\n\n`hello/urls.py` で設定したように `hello/views.py` に `index()関数` を作成します。\n\n今回は HTTPレスポンスで `Hello World` と記述された `Content-Type: text/html` のファイルを返却するようにします。\n\n```python:hello/views.py\n\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse('Hello World')\n```\n\n# マイグレーション \n\n今回はあまり関係ないのですが、ここでいうマイグレーションとはアプリケーションで使うデータベースの定義を自動的に作成・管理する機能のことを指します。\n\n以下のコマンドで実行できます。\n\n```\n$ python manage.py migrate\n```\n\nマイグレーションに成功すればコマンド実行後にエラーが出ないはずです。\n\n# ローカルホストでの起動\n\n以下のコマンドでローカルホストに起動することができます。\n\n```\n$ python manage.py runserver\n```\n\nデフォルトではポート8000番で起動するので、 `http://localhost:8000/hello` にアクセスして、`python:hello/views.py` で記述した `Hello World` が表示されてば成功です。\n\u003cimg width=\"314\" alt=\"スクリーンショット 2020-08-10 23.08.30.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/3b8bc038-0218-ac0e-ba2e-1d42cea422a1.png\"\u003e\n以上になります。\n\n# まとめ\n- Django というフレームワークを用いてプロジェクトを作成できるようになった\n- Django でアプリケーションを追加できるようになった\n- Django でローカルホストでアプリケーションを起動して、動作が確認できるようなった\n\n# さいごに\n今回作成したプロジェクトは[GitHub](https://github.com/suguruTakahashi-1234/django-sample)で公開しました。\n\nこのプロジェクトを使用して Dockerfile 記述した記事も投稿しました。\n・[Django の開発環境の Dockerfile を作成してみた](https://qiita.com/sugurutakahashi12345/items/6d68e6bb9163961a8d4d)\n","coediting":false,"comments_count":0,"created_at":"2020-08-10T23:58:15+09:00","group":null,"id":"d4377a16c0e42cf48287","likes_count":2,"private":false,"reactions_count":0,"tags":[{"name":"Python","versions":[]},{"name":"Django","versions":[]},{"name":"Python3","versions":[]}],"title":"Django で Hello World（初心者）","updated_at":"2020-12-03T15:13:15+09:00","url":"https://qiita.com/ikuraikura/items/d4377a16c0e42cf48287","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003eDocker を勉強し始めると \u003ccode\u003eDockerfile\u003c/code\u003e や \u003ccode\u003edocker-compose\u003c/code\u003e などの用語が出てくると思いますが、『これらを利用すると何がうれしいのか』を軸にそれぞれについて説明したいと思います。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eDockerfile\u003c/code\u003e や \u003ccode\u003edocker-compose\u003c/code\u003e を勉強する前に見ていただければよりすんなり、頭に入っていきやすいと思います。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eこの記事で触れること\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDockerfile の使い所、メリット\u003c/li\u003e\n\u003cli\u003edocker-compose の使い所、メリット\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eこの記事で触れないこと\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDockerfile の書き方、サンプル\u003c/li\u003e\n\u003cli\u003edocker-compose の書き方、サンプル\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"dockerfile-と-docker-compose-を利用すると何がうれしいのか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#dockerfile-%E3%81%A8-docker-compose-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E3%81%A8%E4%BD%95%E3%81%8C%E3%81%86%E3%82%8C%E3%81%97%E3%81%84%E3%81%AE%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDockerfile と docker-compose を利用すると何がうれしいのか？\u003c/h1\u003e\n\n\u003cp\u003e先に結論からいうと、できるようになることは以下のようになります。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eDockerfile\u003c/code\u003e\u003cbr\u003e\nこれができると（Dockerfile を書けるようになると）自分の好きなようにカスタマイズした Docker Image をコマンド1行で作成できるようになります。\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003edocker-compose\u003c/code\u003e\u003cbr\u003e\nこれができると（コンテナ管理を docker-compose による管理で行うと）複数のコンテナで構成されるアプリケーションについて、Docker Image のビルドや各コンテナの起動・停止、ネットワーク接続をコマンド1行で実行できるようになります。\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eつまり、Docker のコンテナ環境が楽に構築できるようになります。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"最も効力を発揮する場面\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%9C%80%E3%82%82%E5%8A%B9%E5%8A%9B%E3%82%92%E7%99%BA%E6%8F%AE%E3%81%99%E3%82%8B%E5%A0%B4%E9%9D%A2\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e最も効力を発揮する場面\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003eDockerfile と docker-compose が 最も効力を発揮する場面は、チームメンバーに同じ Docker 環境を構築してもらうときです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eチームメンバーに Docker 環境の構築手順書を共有し、その手順書通りに環境を作ってもらうのではなく、\u003cstrong\u003eDockerfile や docker-compose を使ったコマンドを1行連携するだけで、Docker 環境を構築してもらうことができるようになります。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOUT：膨大な構築手順書\u003c/strong\u003e\u003cbr\u003e\n\u003cstrong\u003eIN：Dockerfile、docker-compose(.yml)、実行コマンド1行\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eまた、共有するものが、構築手順書であればエクセルなどのバイナリファイルだったものが、Dockerfile や docker-compose(.yml) ではテキストファイルとなるため、\u003cbr\u003e\n\u003cstrong\u003eGit での構成管理がとても楽になります。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e-おしまい-\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"ここからは余談-dockerfile-や-docker-compose-が何者かについての補足\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%93%E3%81%93%E3%81%8B%E3%82%89%E3%81%AF%E4%BD%99%E8%AB%87-dockerfile-%E3%82%84-docker-compose-%E3%81%8C%E4%BD%95%E8%80%85%E3%81%8B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E8%A3%9C%E8%B6%B3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e（ここからは余談） Dockerfile や docker-compose が何者かについての補足\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"dockerfile-について\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#dockerfile-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDockerfile について\u003c/h2\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"dockerfile-について説明する前に\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#dockerfile-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%AC%E6%98%8E%E3%81%99%E3%82%8B%E5%89%8D%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDockerfile について説明する前に\u003c/h3\u003e\n\n\u003cp\u003e皆さんはこんな経験ありませんか？\u003c/p\u003e\n\n\u003cp\u003e『Docker を勉強して使えるようになったけど、毎回毎回 \u003ccode\u003edocker container run\u003c/code\u003e コマンド実行後、コンテナにログインして足りないモジュールを導入したり、必要なディレクトリやファイルを作成するのが大変だわ。。。どうにかならないかしら。。。』\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eそれ、Dockerfile なら解決できます！\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"dockerfile\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#dockerfile\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDockerfile\u003c/h3\u003e\n\n\u003cp\u003eDockerfile とは自分の好きなようにカスタマイズした Docker Image を作成するためのファイルになります。\u003c/p\u003e\n\n\u003cp\u003eDocker を使用する際に \u003ccode\u003edocker container run\u003c/code\u003e コマンド実行後に \u003ccode\u003edocker exec -it [コンテナID] /bin/bash\u003c/code\u003e コマンドでコンテナにログインしたあとに、足りないモジュールのインストールやディレクトリ・ファイルの作成など、各種コマンドを実行することがあるかと思われます。\u003c/p\u003e\n\n\u003cp\u003eそれをあらかじめ Dockerfile に記述することで、そのようなコマンドを起動時に自動で実行してくれるカスタマイズ版 Docker Image を作成することができます。\u003c/p\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"dockerfile-を用いた-docker-image-の作成の方法\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#dockerfile-%E3%82%92%E7%94%A8%E3%81%84%E3%81%9F-docker-image-%E3%81%AE%E4%BD%9C%E6%88%90%E3%81%AE%E6%96%B9%E6%B3%95\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDockerfile を用いた Docker Image の作成の方法\u003c/h4\u003e\n\n\u003cp\u003eDockerfile の配置されたディレクトリで \u003ccode\u003edocker build -t [イメージ名] .\u003c/code\u003e コマンドを実行するとローカル環境に Dockerfile の内容を元にローカル環境に Docker Image が作成されます。\u003c/p\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"メリット\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eメリット\u003c/h4\u003e\n\n\u003cp\u003eDockerfile ファイルを記述することで、\u003c/p\u003e\n\n\u003cp\u003e『この Docker Image を pull してから、\u003ccode\u003edocker container run\u003c/code\u003e コマンドを実行した際は、必ず毎回、そのコンテナにログインして、このコマンドとこのコマンドを実行して〜（省略）』\u003c/p\u003e\n\n\u003cp\u003eなどの手順書が\u003c/p\u003e\n\n\u003cp\u003e『 Dockerfile があるディレクトリで \u003ccode\u003edocker build -t [イメージ名] .\u003c/code\u003e コマンドを実行する。』\u003c/p\u003e\n\n\u003cp\u003eの1行で済むようになります。\u003c/p\u003e\n\n\u003cp\u003eDockerfile ファイルについてのお話は以上になります。\u003cbr\u003e\nつづいて、docker-compose について説明します。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"docker-compos-について\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#docker-compos-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003edocker-compos について\u003c/h2\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"docker-compose-について説明する前に\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#docker-compose-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%AC%E6%98%8E%E3%81%99%E3%82%8B%E5%89%8D%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003edocker-compose について説明する前に\u003c/h3\u003e\n\n\u003cp\u003e皆さんはこんな経験ありませんか？\u003c/p\u003e\n\n\u003cp\u003e『動かすコンテナが一つの場合はあまり気にならないけど コンテナが複数ある環境を構築する場合、それらのコンテナ同士の接続の設定とかを \u003ccode\u003edocker container run\u003c/code\u003e コマンドのオプションで指定したり、その手順書をいちいち記述するのが大変だわ。。。どうにかならないかしら。。。』\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eそれ、docker-compose なら解決できます！\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"docker-compose\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#docker-compose\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003edocker-compose\u003c/h3\u003e\n\n\u003cp\u003edocker-compose とは複数のコンテナで構成されるアプリケーションについて、Docker Image のビルドや各コンテナの起動・停止などをより簡単に行えるようにするツールです。\u003c/p\u003e\n\n\u003cp\u003e複数のコンテナを起動させる場合、各コンテナを起動するために、それぞれ起動コマンドを実行する必要がありました。\u003c/p\u003e\n\n\u003cp\u003eまた、コンテナを起動する際に、環境変数の設定やポートの接続やらディスクのマウントやらいろいろなオプションを指定する必要があります。\u003c/p\u003e\n\n\u003cp\u003eコマンドや手順が複雑になると、他の環境で使う／使ってもらう場合に、ミスが発生しやすくなります。\u003c/p\u003e\n\n\u003cp\u003e他の環境でも同じ構成（同じ Docker イメージ）で動かせるという Docker のメリットを生かすには、起動手順なども簡単であってほしいですよね。\u003c/p\u003e\n\n\u003cp\u003edocker-compose では、Docker Image の作成やコンテナ起動のオプションなどを含め、複数のコンテナの定義を yml ファイル（docker-compose.yml）に書き、それを利用してDockerビルドやコンテナ起動をすることができます。\u003c/p\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"docker-compose-を用いた環境構築の仕方\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#docker-compose-%E3%82%92%E7%94%A8%E3%81%84%E3%81%9F%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E3%81%AE%E4%BB%95%E6%96%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003edocker-compose を用いた環境構築の仕方\u003c/h4\u003e\n\n\u003cp\u003edocker-compose.yml の配置されたディレクトリで \u003ccode\u003edocker-compose up -d\u003c/code\u003e コマンドを実行するだけです。\u003c/p\u003e\n\n\u003cp\u003eちなみに docker-compose.yml に書かれている内容で以下のような処理を実行します。\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eDocker Image 作成する（Dockerfile からイメージを作成することも可能）\u003c/li\u003e\n\u003cli\u003eその Docker Image を使って \u003ccode\u003edocker container run\u003c/code\u003e コマンドをいろいろオプションをつけて実行する（環境変数の宣言、ポートやボリュームの設定など）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"メリット-1\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88-1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eメリット\u003c/h4\u003e\n\n\u003cp\u003edocker-compose.yml ファイルを記述することで、\u003c/p\u003e\n\n\u003cp\u003e『まず、このディレクトリで \u003ccode\u003edocker build -t [イメージ名] .\u003c/code\u003e コマンド実行後に、これとこれのコマンドを実行して、\u003ccode\u003edocker container run [イメージA]\u003c/code\u003e と \u003ccode\u003edocker container run [イメージB]\u003c/code\u003e を行って〜』\u003c/p\u003e\n\n\u003cp\u003eなどの Docker 環境構築手順書が\u003c/p\u003e\n\n\u003cp\u003e『docker-compose.yml ファイルがあるディレクトリで \u003ccode\u003edocker-compose up -d\u003c/code\u003e コマンドを実行する。』\u003c/p\u003e\n\n\u003cp\u003eの1行で済むようになります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"さいごに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eさいごに\u003c/h1\u003e\n\n\u003cp\u003e『今まで頑張って書いてきた構築手順書とは一体何だったんだろう？』とちょっと悲しくなりますが、どんどん便利な世の中になっていきますね。\u003c/p\u003e\n","body":"\n# はじめに\n\nDocker を勉強し始めると `Dockerfile` や `docker-compose` などの用語が出てくると思いますが、『これらを利用すると何がうれしいのか』を軸にそれぞれについて説明したいと思います。\n\n`Dockerfile` や `docker-compose` を勉強する前に見ていただければよりすんなり、頭に入っていきやすいと思います。\n\n**この記事で触れること**\n\n- Dockerfile の使い所、メリット\n- docker-compose の使い所、メリット\n\n**この記事で触れないこと**\n\n- Dockerfile の書き方、サンプル\n- docker-compose の書き方、サンプル\n\n# Dockerfile と docker-compose を利用すると何がうれしいのか？\n\n先に結論からいうと、できるようになることは以下のようになります。\n\n- `Dockerfile`\nこれができると（Dockerfile を書けるようになると）自分の好きなようにカスタマイズした Docker Image をコマンド1行で作成できるようになります。\n\n- `docker-compose`\nこれができると（コンテナ管理を docker-compose による管理で行うと）複数のコンテナで構成されるアプリケーションについて、Docker Image のビルドや各コンテナの起動・停止、ネットワーク接続をコマンド1行で実行できるようになります。\n\n**つまり、Docker のコンテナ環境が楽に構築できるようになります。**\n\n# 最も効力を発揮する場面\n\n**Dockerfile と docker-compose が 最も効力を発揮する場面は、チームメンバーに同じ Docker 環境を構築してもらうときです。**\n\nチームメンバーに Docker 環境の構築手順書を共有し、その手順書通りに環境を作ってもらうのではなく、**Dockerfile や docker-compose を使ったコマンドを1行連携するだけで、Docker 環境を構築してもらうことができるようになります。**\n\n**OUT：膨大な構築手順書**\n**IN：Dockerfile、docker-compose(.yml)、実行コマンド1行**\n\nまた、共有するものが、構築手順書であればエクセルなどのバイナリファイルだったものが、Dockerfile や docker-compose(.yml) ではテキストファイルとなるため、\n**Git での構成管理がとても楽になります。**\n\n-おしまい-\n\n# （ここからは余談） Dockerfile や docker-compose が何者かについての補足\n\n## Dockerfile について\n\n### Dockerfile について説明する前に\n\n皆さんはこんな経験ありませんか？\n\n『Docker を勉強して使えるようになったけど、毎回毎回 `docker container run` コマンド実行後、コンテナにログインして足りないモジュールを導入したり、必要なディレクトリやファイルを作成するのが大変だわ。。。どうにかならないかしら。。。』\n\n**それ、Dockerfile なら解決できます！**\n\n\n### Dockerfile\n\nDockerfile とは自分の好きなようにカスタマイズした Docker Image を作成するためのファイルになります。\n\nDocker を使用する際に `docker container run` コマンド実行後に `docker exec -it [コンテナID] /bin/bash` コマンドでコンテナにログインしたあとに、足りないモジュールのインストールやディレクトリ・ファイルの作成など、各種コマンドを実行することがあるかと思われます。\n\nそれをあらかじめ Dockerfile に記述することで、そのようなコマンドを起動時に自動で実行してくれるカスタマイズ版 Docker Image を作成することができます。\n\n\n#### Dockerfile を用いた Docker Image の作成の方法\nDockerfile の配置されたディレクトリで `docker build -t [イメージ名] .` コマンドを実行するとローカル環境に Dockerfile の内容を元にローカル環境に Docker Image が作成されます。\n\n#### メリット\nDockerfile ファイルを記述することで、\n\n『この Docker Image を pull してから、`docker container run` コマンドを実行した際は、必ず毎回、そのコンテナにログインして、このコマンドとこのコマンドを実行して〜（省略）』\n\nなどの手順書が\n\n『 Dockerfile があるディレクトリで `docker build -t [イメージ名] .` コマンドを実行する。』\n\nの1行で済むようになります。\n\nDockerfile ファイルについてのお話は以上になります。\nつづいて、docker-compose について説明します。\n\n\n## docker-compos について\n\n### docker-compose について説明する前に\n\n皆さんはこんな経験ありませんか？\n\n『動かすコンテナが一つの場合はあまり気にならないけど コンテナが複数ある環境を構築する場合、それらのコンテナ同士の接続の設定とかを `docker container run` コマンドのオプションで指定したり、その手順書をいちいち記述するのが大変だわ。。。どうにかならないかしら。。。』\n\n**それ、docker-compose なら解決できます！**\n\n\n### docker-compose\ndocker-compose とは複数のコンテナで構成されるアプリケーションについて、Docker Image のビルドや各コンテナの起動・停止などをより簡単に行えるようにするツールです。\n\n複数のコンテナを起動させる場合、各コンテナを起動するために、それぞれ起動コマンドを実行する必要がありました。\n\nまた、コンテナを起動する際に、環境変数の設定やポートの接続やらディスクのマウントやらいろいろなオプションを指定する必要があります。\n\nコマンドや手順が複雑になると、他の環境で使う／使ってもらう場合に、ミスが発生しやすくなります。\n\n他の環境でも同じ構成（同じ Docker イメージ）で動かせるという Docker のメリットを生かすには、起動手順なども簡単であってほしいですよね。\n\ndocker-compose では、Docker Image の作成やコンテナ起動のオプションなどを含め、複数のコンテナの定義を yml ファイル（docker-compose.yml）に書き、それを利用してDockerビルドやコンテナ起動をすることができます。\n\n#### docker-compose を用いた環境構築の仕方\n\ndocker-compose.yml の配置されたディレクトリで `docker-compose up -d` コマンドを実行するだけです。\n\nちなみに docker-compose.yml に書かれている内容で以下のような処理を実行します。\n\n1. Docker Image 作成する（Dockerfile からイメージを作成することも可能）\n2. その Docker Image を使って `docker container run` コマンドをいろいろオプションをつけて実行する（環境変数の宣言、ポートやボリュームの設定など）\n\n\n#### メリット\ndocker-compose.yml ファイルを記述することで、\n\n『まず、このディレクトリで `docker build -t [イメージ名] .` コマンド実行後に、これとこれのコマンドを実行して、`docker container run [イメージA]` と `docker container run [イメージB]` を行って〜』\n\nなどの Docker 環境構築手順書が\n\n『docker-compose.yml ファイルがあるディレクトリで `docker-compose up -d` コマンドを実行する。』\n\nの1行で済むようになります。\n\n\n# さいごに\n『今まで頑張って書いてきた構築手順書とは一体何だったんだろう？』とちょっと悲しくなりますが、どんどん便利な世の中になっていきますね。\n","coediting":false,"comments_count":0,"created_at":"2020-08-10T01:28:23+09:00","group":null,"id":"0b1ceb92c9240aacca02","likes_count":33,"private":false,"reactions_count":0,"tags":[{"name":"Docker","versions":[]},{"name":"dockerfile","versions":[]},{"name":"docker-compose","versions":[]}],"title":"Dockerfile と docker-compose を利用すると何がうれしいのか？","updated_at":"2021-02-05T16:11:01+09:00","url":"https://qiita.com/ikuraikura/items/0b1ceb92c9240aacca02","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e「 CI/CD ぐらい一人でできるようになりたい！」と思い、実際にやってみた備忘録になります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"流れ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%B5%81%E3%82%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e流れ\u003c/h1\u003e\n\n\u003col\u003e\n\u003cli\u003eCI/CD 対象のプロジェクトの作成\u003c/li\u003e\n\u003cli\u003eCI\u003c/li\u003e\n\u003cli\u003eCD\u003c/li\u003e\n\u003cli\u003eCI/CD の結果を Slack に通知する\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"流れ-に対応する記事\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%B5%81%E3%82%8C-%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B%E8%A8%98%E4%BA%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\"流れ\" に対応する記事\u003c/h1\u003e\n\n\u003cp\u003e以下の記事を投稿しました。\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/ed35018025a5732a46a5\" id=\"reference-14e219925c263acdd6d0\"\u003evue-cliでプロジェクト作成してあれこれ試してみた（初心者向け）\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/aeca12d9c5a5526c724c\" id=\"reference-a12efbe1468563069dc0\"\u003eCircleCI 試してみた\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/04b78b946322b8b410f7\" id=\"reference-f73e80e6d57708542a1d\"\u003eCircleCI から Firebase Hosting にデプロイするまで\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/fd17fdf36b7b34f1fe31\" id=\"reference-eb8ac597df82d97af209\"\u003eCircleCI の Job の結果を Slack に通知する\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"途中で挫折しないためのポイント-3つ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%80%94%E4%B8%AD%E3%81%A7%E6%8C%AB%E6%8A%98%E3%81%97%E3%81%AA%E3%81%84%E3%81%9F%E3%82%81%E3%81%AE%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88-3%E3%81%A4\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e途中で挫折しないためのポイント 3つ\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003eCI/CD 対象のプロジェクトは作り込まない\u003c/li\u003e\n\u003cli\u003eCI と CD の仕組みは分けて作成する\u003c/li\u003e\n\u003cli\u003e興味のあるサービスを選択する\u003c/li\u003e\n\u003c/ul\u003e\n","body":"# はじめに\n「 CI/CD ぐらい一人でできるようになりたい！」と思い、実際にやってみた備忘録になります。\n\n# 流れ\n1. CI/CD 対象のプロジェクトの作成\n2. CI\n3. CD\n4. CI/CD の結果を Slack に通知する\n\n# \"流れ\" に対応する記事\n\n以下の記事を投稿しました。\n\n1. [vue-cliでプロジェクト作成してあれこれ試してみた（初心者向け）](https://qiita.com/sugurutakahashi12345/items/ed35018025a5732a46a5)\n2. [CircleCI 試してみた](https://qiita.com/sugurutakahashi12345/items/aeca12d9c5a5526c724c)\n3. [CircleCI から Firebase Hosting にデプロイするまで](https://qiita.com/sugurutakahashi12345/items/04b78b946322b8b410f7)\n4. [CircleCI の Job の結果を Slack に通知する](https://qiita.com/sugurutakahashi12345/items/fd17fdf36b7b34f1fe31)\n\n# 途中で挫折しないためのポイント 3つ\n\n- CI/CD 対象のプロジェクトは作り込まない\n- CI と CD の仕組みは分けて作成する\n- 興味のあるサービスを選択する\n","coediting":false,"comments_count":1,"created_at":"2020-08-03T03:30:51+09:00","group":null,"id":"1a4234d7234d8b6d4f1a","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"GitHub","versions":[]},{"name":"CircleCI","versions":[]},{"name":"Slack","versions":[]},{"name":"Firebase","versions":[]},{"name":"CICD","versions":[]}],"title":"初心者が1人で CircleCI で CI/CD できるようになるまで","updated_at":"2021-03-13T02:46:46+09:00","url":"https://qiita.com/ikuraikura/items/1a4234d7234d8b6d4f1a","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"やりたいこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eやりたいこと\u003c/h1\u003e\n\n\u003cp\u003eCircleCI のJob の結果を Slack に通知することです。\u003c/p\u003e\n\n\u003cp\u003eこちらの記事を参考にさせていただきました。\u003cbr\u003e\n\u003ca href=\"https://qiita.com/k_bobchin/items/11f0d778de09502de1f3#3-circleciconfigyml%E3%82%92%E8%A8%AD%E5%AE%9A\" id=\"reference-1d37d6abbbe5612e3095\"\u003eCircleCI Orbsで、jobの結果をslackに通知する\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e記事の流れどおりで作成してみた備忘録のようなものになります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"webhook-url-の発行\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#webhook-url-%E3%81%AE%E7%99%BA%E8%A1%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eWebhook URL の発行\u003c/h1\u003e\n\n\u003cp\u003eCircleCI の対象のリポジトリから右上の「Project Settings」をクリックします。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/13928c2a16bc0204a2281b75d9f468008e264143/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f35353635663833622d663266322d336263642d663566372d3461356336303436363932382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1920\" alt=\"qwerr.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F5565f83b-f2f2-3bcd-f5f7-4a5c60466928.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=dc7e7ae714715520a39d1194a326d055\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/5565f83b-f2f2-3bcd-f5f7-4a5c60466928.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F5565f83b-f2f2-3bcd-f5f7-4a5c60466928.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=3a957480a5db25c24f13c43a424d4c3f 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e「Slack Integrations」を選択して、「Slack's CircleCI Integration page」のリンクをクリックします。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/1b0ee12becfffdf4858239bca2f88f2751689724/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f37623733636262342d623333312d666563612d653330392d3565653164653935346366642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1458\" alt=\"a.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F7b73cbb4-b331-feca-e309-5ee1de954cfd.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=22ad57c48ed04840228abc072e0af9dd\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/7b73cbb4-b331-feca-e309-5ee1de954cfd.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F7b73cbb4-b331-feca-e309-5ee1de954cfd.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=1bb3eeb55bd57cdb16bb60c6ea01e971 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e通知したいルームを選択して（下の画像の右上）、「Add to Slack」をクリックする。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/4bfc9b3bdff41ceea4ee21ced9573fac05092b9c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f36623865303236632d326139352d616238322d643233372d6264306332643862643833312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1454\" alt=\"b.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F6b8e026c-2a95-ab82-d237-bd0c2d8bd831.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=89a11a834c05a879e12f2eca2938daee\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/6b8e026c-2a95-ab82-d237-bd0c2d8bd831.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F6b8e026c-2a95-ab82-d237-bd0c2d8bd831.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=2568e3f9590fb12ef8a1875c41c226ca 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e通知するチャンネルを選択して、「Add CircleCI Integration」をクリックする。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/0d9dc815aad784439077be2992e9644f8084f635/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f39613732663462332d323439322d356235342d636266382d3264366237356461363532302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1455\" alt=\"c.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F9a72f4b3-2492-5b54-cbf8-2d6b75da6520.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=df30913f2efe86b774b0cf61a302cf3e\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/9a72f4b3-2492-5b54-cbf8-2d6b75da6520.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F9a72f4b3-2492-5b54-cbf8-2d6b75da6520.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=7a290a443634b7a5513ff9750eaed52f 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eURLが発行されるので確認して、一番下までスクロールして「Save Integration」をクリックする。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/4c603254bd0b1062050590e660fa9d813fd9f6d8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f31656639313235332d666437662d643234332d616431662d3766653530356433656264612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1453\" alt=\"d.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F1ef91253-fd7f-d243-ad1f-7fe505d3ebda.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=d5d9ef726be700a650225769a15c7acc\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/1ef91253-fd7f-d243-ad1f-7fe505d3ebda.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F1ef91253-fd7f-d243-ad1f-7fe505d3ebda.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=d037b2aeff6d084424ac6560c94926bb 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/1a8c0adb0a59d87030da65bd49b96d9b31229237/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f33633331356238392d616134352d663966372d373564382d3637343435633039633236342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1456\" alt=\"e.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F3c315b89-aa45-f9f7-75d8-67445c09c264.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=26c50b2438ae19b9deda5d33c9f1b3b9\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/3c315b89-aa45-f9f7-75d8-67445c09c264.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F3c315b89-aa45-f9f7-75d8-67445c09c264.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=917a62da4dbed3a0e3a2acd1dce446e1 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこれでURLが発行されました。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"webhook-url-の登録\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#webhook-url-%E3%81%AE%E7%99%BB%E9%8C%B2\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eWebhook URL の登録\u003c/h1\u003e\n\n\u003cp\u003e先ほど表示したCircleCIの設定ページの「Add Webhook URL」をクリックします。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/42cbca077ebffc16330878778dd607c0f86846d9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f32633634373630392d653133362d313738392d383639332d3436613463373936393134652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1458\" alt=\"aa.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F2c647609-e136-1789-8693-46a4c796914e.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=45c576d43b853c8edc1def6399e867f0\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/2c647609-e136-1789-8693-46a4c796914e.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F2c647609-e136-1789-8693-46a4c796914e.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=436c6dccfadf000ce925c4fddfd3ca7b 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e発行されたWebhook URLをコピーして貼り付けます。ここでは自動的に「SLACK_WEBHOOK」という環境変数名で登録されます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/f5d67a8e2e38a19702b7cb5f51a51577a300360b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f65643466643765652d313934652d343364352d376461332d6238353530646266613031652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"552\" alt=\"aaaa.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fed4fd7ee-194e-43d5-7da3-b8550dbfa01e.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=8fb953b04c98f3f4b7a3a8ce3fe0ce28\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ed4fd7ee-194e-43d5-7da3-b8550dbfa01e.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fed4fd7ee-194e-43d5-7da3-b8550dbfa01e.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=303e6225217258f0dfe201bf79f8693f 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"slack-ords-の確認\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#slack-ords-%E3%81%AE%E7%A2%BA%E8%AA%8D\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eSlack Ords の確認\u003c/h1\u003e\n\n\u003cp\u003e「Add Slack Ord」をクリックします。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/8b656d5e98372c75e8f23cbc07d940659c67f965/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f33383763303330632d663834622d303465632d643139332d3530373466643138396463612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1064\" alt=\"qwww.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F387c030c-f84b-04ec-d193-5074fd189dca.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=a971ae423d1af4b901c5a42e941359d1\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/387c030c-f84b-04ec-d193-5074fd189dca.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F387c030c-f84b-04ec-d193-5074fd189dca.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=3f04a112ae3e8698841be99c3fd3b03e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e以下のような画面に遷移します。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/84d4d357e21da06dc6c86c071ed4a333a6ee720e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f63636232386530322d333465652d373562622d666632372d3831663639373334326533362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1255\" alt=\"12334.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fccb28e02-34ee-75bb-ff27-81f697342e36.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=94ba2ecdaaf0f03649ec7b73fe9f064c\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ccb28e02-34ee-75bb-ff27-81f697342e36.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fccb28e02-34ee-75bb-ff27-81f697342e36.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=24b451a34d7244a9227fab133fdda896 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eSlack Orb の使用の仕方が記述されているので、ここをみながら \u003ccode\u003e.circleci/config.yml\u003c/code\u003e の設定を行っていきます。\u003c/p\u003e\n\n\u003cp\u003eちなみに Ords を使用すると \u003ccode\u003e.circleci/config.yml\u003c/code\u003e の記述量が減り、簡単に実装できるということなので、CircleCI 2.1 以上であれば積極的に使用した方がいいものらしいです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"circleciconfigyml-の設定\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#circleciconfigyml-%E3%81%AE%E8%A8%AD%E5%AE%9A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e.circleci/config.yml の設定\u003c/h1\u003e\n\n\u003cp\u003e今回は以下のように設定ました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yml\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eversion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e2.1\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003eexecutors\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003edefault\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eworking_directory\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e~/workspace\u003c/span\u003e\n    \u003cspan class=\"na\"\u003edocker\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eimage\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enode:12\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003eorbs\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eslack\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ecircleci/slack@3.4.2\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003ecommands\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003erestore_npm\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esteps\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erestore_cache\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eRestore npm dependencies\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ekey\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm-{{ checksum \"package.json\" }}\u003c/span\u003e\n\n  \u003cspan class=\"na\"\u003esave_npm\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esteps\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003esave_cache\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eCache npm dependencies\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ekey\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm-{{ checksum \"package.json\" }}\u003c/span\u003e\n          \u003cspan class=\"na\"\u003epaths\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003e~/workspace/node_modules\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003ejobs\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eexecutor\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edefault\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esteps\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003echeckout\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003erestore_npm\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eInstall dependencies\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm install\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eLint\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm run lint\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eBuild\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm run build\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eTest\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm run test:unit\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003esave_npm\u003c/span\u003e\n\n  \u003cspan class=\"na\"\u003edeploy\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eexecutor\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edefault\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esteps\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003echeckout\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003erestore_npm\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eBuild\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm run build\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eCheck dist\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003els -la dist\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eDeploy to Firebase Hosting\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e./node_modules/.bin/firebase deploy --token=$FIREBASE_TOKEN\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003eslack/status\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003esuccess_message\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'\u003c/span\u003e\u003cspan class=\"s\"\u003e:ok:\\nRepository:\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e$CIRCLE_PROJECT_REPONAME\\nBranch:\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e$CIRCLE_BRANCH\\nPull\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003eRequests:\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e$CIRCLE_PULL_REQUESTS\\nDeploy\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003eSuccess!'\u003c/span\u003e\n          \u003cspan class=\"na\"\u003efailure_message\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'\u003c/span\u003e\u003cspan class=\"s\"\u003e:ng:\\nRepository:\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e$CIRCLE_PROJECT_REPONAME\\nBranch:\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e$CIRCLE_BRANCH\\nPull\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003eRequests:\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e$CIRCLE_PULL_REQUESTS\\nDeploy\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003eFailure!'\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ewebhook\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"s\"\u003e${SLACK_WEBHOOK}\"\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003eworkflows\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003epush-build\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ejobs\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003ebuild\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003edeploy\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003erequires\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003ebuild\u003c/span\u003e\n          \u003cspan class=\"na\"\u003efilters\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"na\"\u003ebranches\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n              \u003cspan class=\"na\"\u003eonly\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003emaster\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eOrb の使い方は \u003ccode\u003eorbs:\u003c/code\u003e で \u003ccode\u003eOrb名\u003c/code\u003e: \u003ccode\u003e使用するOrb@タグ名\u003c/code\u003e と記述して、 Job で \u003ccode\u003eOrb名/xxx\u003c/code\u003e と記述すれば Orb 側で定義してある \u003ccode\u003exxx\u003c/code\u003e コマンドが実行できます。\u003c/p\u003e\n\n\u003cp\u003eまた circleci/\u003ca href=\"mailto:slack@3.4.2v\" class=\"autolink\"\u003eslack@3.4.2v\u003c/a\u003e で使えるコマンドは以下の通りです。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eapproval: Notify Slack about an awaiting approval job.\u003c/li\u003e\n\u003cli\u003enotify: Notify a Slack channel with a custom message.\u003c/li\u003e\n\u003cli\u003estatus: Send a status alert at the end of a job based on success or failure. Must be the last step in a job.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e今回は \u003ccode\u003estatus\u003c/code\u003e を使用します。 \u003cbr\u003e\n\u003ccode\u003estatus\u003c/code\u003e は Job が \u003ccode\u003e成功\u003c/code\u003e or \u003ccode\u003e失敗\u003c/code\u003e に応じてアラートを通知するコマンドです。\u003c/p\u003e\n\n\u003cp\u003eSlack の通知についての設定を抜粋すると以下のようになります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yml\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e# 省略\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003eorbs\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eslack\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ecircleci/slack@3.4.2\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# 省略\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003ejobs\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# 省略\u003c/span\u003e\n  \u003cspan class=\"na\"\u003edeploy\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eexecutor\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edefault\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esteps\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003echeckout\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003erestore_npm\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eBuild\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm run build\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eCheck dist\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003els -la dist\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eDeploy to Firebase Hosting\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e./node_modules/.bin/firebase deploy --token=$FIREBASE_TOKEN\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003eslack/status\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003esuccess_message\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'\u003c/span\u003e\u003cspan class=\"s\"\u003e:ok:\\nRepository:\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e$CIRCLE_PROJECT_REPONAME\\nBranch:\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e$CIRCLE_BRANCH\\nPull\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003eRequests:\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e$CIRCLE_PULL_REQUESTS\\nDeploy\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003eSuccess!'\u003c/span\u003e\n          \u003cspan class=\"na\"\u003efailure_message\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'\u003c/span\u003e\u003cspan class=\"s\"\u003e:ng:\\nRepository:\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e$CIRCLE_PROJECT_REPONAME\\nBranch:\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e$CIRCLE_BRANCH\\nPull\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003eRequests:\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e$CIRCLE_PULL_REQUESTS\\nDeploy\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003eFailure!'\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ewebhook\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"s\"\u003e${SLACK_WEBHOOK}\"\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# 省略\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e今回の場合は \u003ccode\u003edeploy\u003c/code\u003e の Job が \u003ccode\u003e成功\u003c/code\u003e or \u003ccode\u003e失敗\u003c/code\u003e に応じて \u003ccode\u003e- slack/status:\u003c/code\u003e 以下の \u003ccode\u003esuccess_message\u003c/code\u003e or \u003ccode\u003efailure_message\u003c/code\u003e で定義したメッセージが Slack に通知されます。\u003c/p\u003e\n\n\u003cp\u003eちなみに、いろいろ実験した結果、\u003ccode\u003e- slack/status:\u003c/code\u003e の直前の Step でなくても、Job で定義された Step のどこか一箇所でも失敗していると \u003ccode\u003efailure_message\u003c/code\u003e が飛ぶようになっているみたいです。\u003c/p\u003e\n\n\u003cp\u003e実際に通知した例は以下のようになります。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/adee7fd5d2f03fdf44a45613b979617556af0f82/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f31643835303834312d383865612d323064622d323564612d6536616663396463386635352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"637\" alt=\"1233444.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F1d850841-88ea-20db-25da-e6afc9dc8f55.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=02430481de5527a8794bef683ee5f393\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/1d850841-88ea-20db-25da-e6afc9dc8f55.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F1d850841-88ea-20db-25da-e6afc9dc8f55.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=57d7218c8bfe943851ea7afb7005dc5e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n出力する内容はプロジェクトの運用に合わせて設定してください。\u003c/p\u003e\n\n\u003cp\u003e以上になります。\u003c/p\u003e\n","body":"# やりたいこと\nCircleCI のJob の結果を Slack に通知することです。\n\nこちらの記事を参考にさせていただきました。\n[CircleCI Orbsで、jobの結果をslackに通知する]\n(https://qiita.com/k_bobchin/items/11f0d778de09502de1f3#3-circleciconfigyml%E3%82%92%E8%A8%AD%E5%AE%9A)\n\n記事の流れどおりで作成してみた備忘録のようなものになります。\n\n# Webhook URL の発行\n\nCircleCI の対象のリポジトリから右上の「Project Settings」をクリックします。\n\u003cimg width=\"1920\" alt=\"qwerr.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/5565f83b-f2f2-3bcd-f5f7-4a5c60466928.png\"\u003e\n\n「Slack Integrations」を選択して、「Slack's CircleCI Integration page」のリンクをクリックします。\n\u003cimg width=\"1458\" alt=\"a.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/7b73cbb4-b331-feca-e309-5ee1de954cfd.png\"\u003e\n\n通知したいルームを選択して（下の画像の右上）、「Add to Slack」をクリックする。\n\u003cimg width=\"1454\" alt=\"b.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/6b8e026c-2a95-ab82-d237-bd0c2d8bd831.png\"\u003e\n\n通知するチャンネルを選択して、「Add CircleCI Integration」をクリックする。\n\u003cimg width=\"1455\" alt=\"c.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/9a72f4b3-2492-5b54-cbf8-2d6b75da6520.png\"\u003e\n\nURLが発行されるので確認して、一番下までスクロールして「Save Integration」をクリックする。\n\u003cimg width=\"1453\" alt=\"d.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/1ef91253-fd7f-d243-ad1f-7fe505d3ebda.png\"\u003e\n\u003cimg width=\"1456\" alt=\"e.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/3c315b89-aa45-f9f7-75d8-67445c09c264.png\"\u003e\n\nこれでURLが発行されました。\n\n# Webhook URL の登録\n\n先ほど表示したCircleCIの設定ページの「Add Webhook URL」をクリックします。\n\u003cimg width=\"1458\" alt=\"aa.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/2c647609-e136-1789-8693-46a4c796914e.png\"\u003e\n\n発行されたWebhook URLをコピーして貼り付けます。ここでは自動的に「SLACK_WEBHOOK」という環境変数名で登録されます。\n\u003cimg width=\"552\" alt=\"aaaa.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ed4fd7ee-194e-43d5-7da3-b8550dbfa01e.png\"\u003e\n\n# Slack Ords の確認\n\n「Add Slack Ord」をクリックします。\n\u003cimg width=\"1064\" alt=\"qwww.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/387c030c-f84b-04ec-d193-5074fd189dca.png\"\u003e\n\n以下のような画面に遷移します。\n\u003cimg width=\"1255\" alt=\"12334.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ccb28e02-34ee-75bb-ff27-81f697342e36.png\"\u003e\n\nSlack Orb の使用の仕方が記述されているので、ここをみながら `.circleci/config.yml` の設定を行っていきます。\n\nちなみに Ords を使用すると `.circleci/config.yml` の記述量が減り、簡単に実装できるということなので、CircleCI 2.1 以上であれば積極的に使用した方がいいものらしいです。\n\n# .circleci/config.yml の設定\n\n今回は以下のように設定ました。\n\n```yml\nversion: 2.1\n\nexecutors:\n  default:\n    working_directory: ~/workspace\n    docker:\n      - image: node:12\n\norbs:\n  slack: circleci/slack@3.4.2\n\ncommands:\n  restore_npm:\n    steps:\n      - restore_cache:\n          name: Restore npm dependencies\n          key: npm-{{ checksum \"package.json\" }}\n\n  save_npm:\n    steps:\n      - save_cache:\n          name: Cache npm dependencies\n          key: npm-{{ checksum \"package.json\" }}\n          paths:\n            - ~/workspace/node_modules\n\njobs:\n  build:\n    executor: default\n    steps:\n      - checkout\n      - restore_npm\n      - run:\n          name: Install dependencies\n          command: npm install\n      - run:\n          name: Lint\n          command: npm run lint\n      - run:\n          name: Build\n          command: npm run build\n      - run:\n          name: Test\n          command: npm run test:unit\n      - save_npm\n\n  deploy:\n    executor: default\n    steps:\n      - checkout\n      - restore_npm\n      - run:\n          name: Build\n          command: npm run build\n      - run:\n          name: Check dist\n          command: ls -la dist\n      - run:\n          name: Deploy to Firebase Hosting\n          command: ./node_modules/.bin/firebase deploy --token=$FIREBASE_TOKEN\n      - slack/status:\n          success_message: ':ok:\\nRepository: $CIRCLE_PROJECT_REPONAME\\nBranch: $CIRCLE_BRANCH\\nPull Requests: $CIRCLE_PULL_REQUESTS\\nDeploy Success!'\n          failure_message: ':ng:\\nRepository: $CIRCLE_PROJECT_REPONAME\\nBranch: $CIRCLE_BRANCH\\nPull Requests: $CIRCLE_PULL_REQUESTS\\nDeploy Failure!'\n          webhook: \"${SLACK_WEBHOOK}\"\n\nworkflows:\n  push-build:\n    jobs:\n      - build\n      - deploy:\n          requires:\n            - build\n          filters:\n            branches:\n              only: master\n```\n\nOrb の使い方は `orbs:` で `Orb名`: `使用するOrb@タグ名` と記述して、 Job で `Orb名/xxx` と記述すれば Orb 側で定義してある `xxx` コマンドが実行できます。\n\nまた circleci/slack@3.4.2v で使えるコマンドは以下の通りです。\n\n- approval: Notify Slack about an awaiting approval job.\n- notify: Notify a Slack channel with a custom message.\n- status: Send a status alert at the end of a job based on success or failure. Must be the last step in a job.\n\n今回は `status` を使用します。 \n`status` は Job が `成功` or `失敗` に応じてアラートを通知するコマンドです。\n\nSlack の通知についての設定を抜粋すると以下のようになります。\n\n```yml\n# 省略\n\norbs:\n  slack: circleci/slack@3.4.2\n\n# 省略\n\njobs:\n# 省略\n  deploy:\n    executor: default\n    steps:\n      - checkout\n      - restore_npm\n      - run:\n          name: Build\n          command: npm run build\n      - run:\n          name: Check dist\n          command: ls -la dist\n      - run:\n          name: Deploy to Firebase Hosting\n          command: ./node_modules/.bin/firebase deploy --token=$FIREBASE_TOKEN\n      - slack/status:\n          success_message: ':ok:\\nRepository: $CIRCLE_PROJECT_REPONAME\\nBranch: $CIRCLE_BRANCH\\nPull Requests: $CIRCLE_PULL_REQUESTS\\nDeploy Success!'\n          failure_message: ':ng:\\nRepository: $CIRCLE_PROJECT_REPONAME\\nBranch: $CIRCLE_BRANCH\\nPull Requests: $CIRCLE_PULL_REQUESTS\\nDeploy Failure!'\n          webhook: \"${SLACK_WEBHOOK}\"\n\n# 省略\n```\n\n今回の場合は `deploy` の Job が `成功` or `失敗` に応じて `- slack/status:` 以下の `success_message` or `failure_message` で定義したメッセージが Slack に通知されます。\n\nちなみに、いろいろ実験した結果、`- slack/status:` の直前の Step でなくても、Job で定義された Step のどこか一箇所でも失敗していると `failure_message` が飛ぶようになっているみたいです。\n\n実際に通知した例は以下のようになります。\n\u003cimg width=\"637\" alt=\"1233444.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/1d850841-88ea-20db-25da-e6afc9dc8f55.png\"\u003e\n出力する内容はプロジェクトの運用に合わせて設定してください。\n\n以上になります。\n","coediting":false,"comments_count":0,"created_at":"2020-08-03T01:52:03+09:00","group":null,"id":"fd17fdf36b7b34f1fe31","likes_count":8,"private":false,"reactions_count":0,"tags":[{"name":"CircleCI","versions":[]},{"name":"Slack","versions":[]}],"title":"CircleCI の Job の結果を Slack に通知する ","updated_at":"2020-08-03T14:12:00+09:00","url":"https://qiita.com/ikuraikura/items/fd17fdf36b7b34f1fe31","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"やりたいこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eやりたいこと\u003c/h1\u003e\n\n\u003cp\u003eCircleCI によって GitHub の master ブランチへのプルリクエストをマージしたタイミングで Firebase Hosting 環境にデプロイすることです。\u003c/p\u003e\n\n\u003cp\u003eFirebase を始めて利用する人向けに説明します。\u003c/p\u003e\n\n\u003cp\u003eまた、CircleCI の説明については割愛します。\u003cbr\u003e\nCircleCI について知りたい方は\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/aeca12d9c5a5526c724c\" id=\"reference-400a5b4d595c5a6bc098\"\u003eこちら\u003c/a\u003eの記事を読んでみてください。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"firebase-hosting-にコマンドラインからデプロイするまで\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#firebase-hosting-%E3%81%AB%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%8B%E3%82%89%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eFirebase Hosting にコマンドラインからデプロイするまで\u003c/h1\u003e\n\n\u003cp\u003eCircleCI から Firebase Hosting にコマンドラインからデプロイ前に、まずはコマンドラインから Firebase Hosting にデプロイまでについて説明します。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"クラウド上でのプロジェクトの作成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E4%B8%8A%E3%81%A7%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eクラウド上でのプロジェクトの作成\u003c/h2\u003e\n\n\u003cp\u003eまずは、Firebase のプロジェクトを作成します。\u003cbr\u003e\n\u003ca href=\"https://firebase.google.com/?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eFirebase\u003c/a\u003e のサイトから「使ってみる」をクリックします。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/5b2da32f296be60b8704eb254d06bb87499aa259/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f32346236353438312d643035322d663932622d363033372d3664353661333332326237372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1261\" alt=\"a.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F24b65481-d052-f92b-6037-6d56a3322b77.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=8cae6f5ddcd1876b27a07cc9d01ec693\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/24b65481-d052-f92b-6037-6d56a3322b77.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F24b65481-d052-f92b-6037-6d56a3322b77.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=34a694bbb1eb4d76aa9f26e856b4fd9b 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n「プロジェクトを作成」をクリックします。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/2243d6b5e878dc3b55ec4e370d464608dc375292/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f61383164393534342d383539332d636134362d653939632d3930383661373238643035392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1253\" alt=\"b.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fa81d9544-8593-ca46-e99c-9086a728d059.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=025ccf6cb4a6d3a3be0ecdfeeb316f1d\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/a81d9544-8593-ca46-e99c-9086a728d059.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fa81d9544-8593-ca46-e99c-9086a728d059.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=6650bcfbdec87850ad6d43387f70da4b 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n適当な名前をつけて「続行」をクリックします。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/e8794eeea165d5171e2b4502f56bca24c814ecaa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f65343237633234382d646265352d346335642d313063332d6236383634333066353863332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1260\" alt=\"c.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fe427c248-dbe5-4c5d-10c3-b686430f58c3.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=e0461db904e55910c2f5f4c8649aed07\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/e427c248-dbe5-4c5d-10c3-b686430f58c3.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fe427c248-dbe5-4c5d-10c3-b686430f58c3.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=7e27dd47dcba0c5ccedfc0760a53dcb8 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n「続行」をクリックします。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/485358dcd856f7dfc14afcdd9d1c91aae73906ef/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f30343039323965642d643362342d623865622d393763392d3737613235326138653465372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"856\" alt=\"d.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F040929ed-d3b4-b8eb-97c9-77a252a8e4e7.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=6c11505e57de51c8e2c1c70269d84067\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/040929ed-d3b4-b8eb-97c9-77a252a8e4e7.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F040929ed-d3b4-b8eb-97c9-77a252a8e4e7.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=9ab3016770838ee5af390b01cabf8644 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n全部チェックつけて「プロジェクトを作成」をクリックします。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/e789939fe3d560925b94de9962f3759553a393a6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f37643036303266312d636137662d666237362d623063622d3236383638356164356532392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"799\" alt=\"e.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F7d0602f1-ca7f-fb76-b0cb-268685ad5e29.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=13116358eb902a86cfccab0f029347db\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/7d0602f1-ca7f-fb76-b0cb-268685ad5e29.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F7d0602f1-ca7f-fb76-b0cb-268685ad5e29.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=44ac1133e8df3f06789be11e1938226e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n「続行」をクリックします。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/1a46bbf598e7185cf9254360d06b72f6034fd115/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f65633937333536322d636330622d633738332d386362612d6332646166386664646565342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"369\" alt=\"f.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fec973562-cc0b-c783-8cba-c2daf8fddee4.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=bb77b66b454a77b9ed21ba724ea1edcf\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ec973562-cc0b-c783-8cba-c2daf8fddee4.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fec973562-cc0b-c783-8cba-c2daf8fddee4.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=05d7a736fede238cdd17323c27160bd9 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\nダッシュボードに遷移できたらプロジェクトの作成の終了です。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/76169cfba9616b175eb37b928ac34b239d36d532/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f35666565333564662d303363662d383431302d376434652d3065353130366134313366332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1255\" alt=\"g.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F5fee35df-03cf-8410-7d4e-0e5106a413f3.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=7442749d56e2d64c577516c4eac057f5\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/5fee35df-03cf-8410-7d4e-0e5106a413f3.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F5fee35df-03cf-8410-7d4e-0e5106a413f3.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=c3de721221a38c07f1d0372bcf6c5507 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"firebase-login\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#firebase-login\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003efirebase login\u003c/h2\u003e\n\n\u003cp\u003eローカル環境で firebase コマンドを有効にするために firebase-tools をインストールする必要があるので \u003ccode\u003enpm install -g\u003c/code\u003e でインストールします。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003efirebase-toolsインストール\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003enpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e firebase-tools\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e続いてログインコマンドを実行し、Googleアカウントを紐づけます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eログイン\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003efirebase login\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eブラウザにこのような表示がでてきたらログイン完了です。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/cc47bda0cbebb5ca354d1d5d4c961612ba0eff05/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f63363466313564372d616363352d313735302d386336352d3334363135333061396333652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"457\" alt=\"h.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fc64f15d7-acc5-1750-8c65-3461530a9c3e.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=f1952cd2a6a0cdb839a3ccd8179ab7b0\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/c64f15d7-acc5-1750-8c65-3461530a9c3e.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fc64f15d7-acc5-1750-8c65-3461530a9c3e.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=f1f9adc5155d36b62ce489e92ecb83bb 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"firebase-init\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#firebase-init\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003efirebase init\u003c/h2\u003e\n\n\u003cp\u003eFirebase Hostingにてデプロイさせたいプロジェクトにcdコマンドなどで移動して \u003ccode\u003efirebase init\u003c/code\u003e を実行します。\u003cbr\u003e\ngitプロジェクトでいうと .gitignore がある階層で実行するイメージです。\u003c/p\u003e\n\n\u003cp\u003e今回、実際に \u003ccode\u003efirebase init\u003c/code\u003e を実行したリポジトリは\u003ca href=\"https://github.com/suguruTakahashi-1234/circle-test\" rel=\"nofollow noopener\" target=\"_blank\"\u003eこちら\u003c/a\u003eに公開しております。\u003cbr\u003e\nvue-cli にて作成したプロジェクトになります。\u003cbr\u003e\nこのプロジェクトを作成した記事は\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/ed35018025a5732a46a5\" id=\"reference-d5eff6feefb31b68e165\"\u003eこちら\u003c/a\u003eになります。ご参考までに。\u003c/p\u003e\n\n\u003cp\u003e適当なディレクトリに移動して \u003ccode\u003efirebase init\u003c/code\u003e を実行します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003einit\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003efirebase init\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e対話方式で設定を求められます。\u003c/p\u003e\n\n\u003cp\u003e各環境に合わせて設定してください。今回の場合は以下に設定しました。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e? Which Firebase CLI features do you want to set up for this folder? Press Space to select fea\ntures, then Enter to confirm your choices.\u003c/code\u003e -\u0026gt; Hosting を選択。\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e? Please select an option\u003c/code\u003e -\u0026gt; Use an existing project を選択。\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e? Select a default Firebase project for this directory\u003c/code\u003e -\u0026gt; さきほど作成したプロジェクトを選択。\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e? What do you want to use as your public directory?\u003c/code\u003e -\u0026gt; \u003ccode\u003edist\u003c/code\u003e ディレクトリを指定。これは vue-cli プロジェクトは \u003ccode\u003enpm run build\u003c/code\u003e コマンドによって \u003ccode\u003edist\u003c/code\u003e ディレクトリに build したソースを配置するように設定しているため。ここは各環境に合わせて設定してください。\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e? Configure as a single-page app (rewrite all urls to /index.html)?\u003c/code\u003e -\u0026gt; SPA ではないので No を選択。\n\u003ca href=\"https://camo.qiitausercontent.com/4b5a277c333f0a1703823badd2829cfacedc10e7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f61646235653636612d303866662d323036322d366438382d6231396431373738323866332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"691\" alt=\"j.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fadb5e66a-08ff-2062-6d88-b19d177828f3.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=8cb8fe415658c4d68590466ac13bb891\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/adb5e66a-08ff-2062-6d88-b19d177828f3.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fadb5e66a-08ff-2062-6d88-b19d177828f3.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=b2e8c55e3d245c91c1b353058669a791 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e（↑このようなコンソールが表示されます）\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"firebase-deploy\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#firebase-deploy\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003efirebase deploy\u003c/h2\u003e\n\n\u003cp\u003eこの段階でコマンドによるデプロイが可能になります。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003enpm run build\u003c/code\u003e コマンドによって \u003ccode\u003edist\u003c/code\u003e ディレクトリに build したソースを配置されます。（これは vue-cli での設定です。）\u003c/p\u003e\n\n\u003cp\u003eそして \u003ccode\u003efirebase deploy\u003c/code\u003e コマンドを実行することによって \u003ccode\u003edist\u003c/code\u003e ディレクトリに配置されたファイル郡が Firebase Hosting にデプロイされます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eコマンドによるデプロイ\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003enpm run build\nfirebase deploy\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eデプロイしたページにはコンソールに表示されるURLからアクセスできます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/47b61f9412e3f8026d2821400838364e9ca72ede/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f36363132643861332d653034322d623733632d373362362d6330663365653966653036322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"630\" alt=\"x.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F6612d8a3-e042-b73c-73b6-c0f3ee9fe062.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=8b9e3c649b6f7b4c0e706f8790438cb9\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/6612d8a3-e042-b73c-73b6-c0f3ee9fe062.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F6612d8a3-e042-b73c-73b6-c0f3ee9fe062.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=a057bcb35b96068a217f4724440a95b0 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eコンソールに表示されている \u003ccode\u003ehttps://vuesample-e2c8b.web.app\u003c/code\u003e にアクセスすると自作のWebページが表示されていることがわかります。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/afdd7a3eb593d5305fb096ab9b01e9db2a2cf625/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f32313166396534302d623761322d376364622d303963642d3065376636393433633462332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F211f9e40-b7a2-7cdb-09cd-0e7f6943c4b3.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=7db854c059ddfb3fde281987bdeeae16\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/211f9e40-b7a2-7cdb-09cd-0e7f6943c4b3.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F211f9e40-b7a2-7cdb-09cd-0e7f6943c4b3.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=6c227e5699b97aeeb6057c452f5556dd 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eWebサーバーを用意することなく簡単に世の中にデプロイできましたね！\u003cbr\u003e\nこれだけでもすごいことです！\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"circleci-から-firebase-hosting-にデプロイするまで\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#circleci-%E3%81%8B%E3%82%89-firebase-hosting-%E3%81%AB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eCircleCI から Firebase Hosting にデプロイするまで\u003c/h1\u003e\n\n\u003cp\u003eコマンドラインからデプロイできるところまで先ほど説明しました。\u003cbr\u003e\nそしてこれから CircleCI から Firebase Hosting にデプロイするまでについて説明します。\u003c/p\u003e\n\n\u003cp\u003e基本的な流れは以下のようになります。\u003cbr\u003e\u003cbr\u003e\n1. \u003ccode\u003efirebase-tools\u003c/code\u003e のプロジェクトへのインストール\u003cbr\u003e\n2. Firebase のトークンの CircleCI への登録\u003cbr\u003e\n3. \u003ccode\u003efirebase deploy\u003c/code\u003e コマンドの \u003ccode\u003e.circleci/config.yml\u003c/code\u003e への設定\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"1-firebase-tools-のプロジェクトへのインストール\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#1-firebase-tools-%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%B8%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e1. \u003ccode\u003efirebase-tools\u003c/code\u003e のプロジェクトへのインストール\u003c/h2\u003e\n\n\u003cp\u003eCircleCI で動く Pipeline に firebase-tools をインストールさせる必要があるので、ローカルのプロジェクトに対して \u003ccode\u003enpm install --save-dev firebase-tools\u003c/code\u003e コマンドを実行することによって、CircleCI の Pipeline 上で \u003ccode\u003enpm install\u003c/code\u003e した際に firebase-tools がインストールされるようにします。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003enpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u003cspan class=\"nt\"\u003e--save-dev\u003c/span\u003e firebase-tools\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"2-firebase-のトークンの-circleci-への登録\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#2-firebase-%E3%81%AE%E3%83%88%E3%83%BC%E3%82%AF%E3%83%B3%E3%81%AE-circleci-%E3%81%B8%E3%81%AE%E7%99%BB%E9%8C%B2\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e2. Firebase のトークンの CircleCI への登録\u003c/h2\u003e\n\n\u003cp\u003e自身の環境外からデプロイするためには Firebase のトークンが必要なため、それを生成して CircleCI に登録します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eFirebaseのトークンの生成\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003efirebase login:ci\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e以下のようにトークンが生成されます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/f29e652b35b323edf9a03a77b7e1e0d2adf155d4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f37666464343636662d613636342d373661332d653866312d6661626336626665383863332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F7fdd466f-a664-76a3-e8f1-fabc6bfe88c3.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=fcddf24d910d8c6dc3dd79a74a70771b\" alt=\"https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_259125_c72d35ab-7c9c-5dbc-a471-515bee8666be.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/7fdd466f-a664-76a3-e8f1-fabc6bfe88c3.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F7fdd466f-a664-76a3-e8f1-fabc6bfe88c3.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=7f51a25e334cc669c353038258017278 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eトークンが生成されたので、こちらを CircleCI に登録しに行きます。\u003c/p\u003e\n\n\u003cp\u003eCircleCI のサイトから右上の「Project Settings」をクリックする。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/624756ad174a5a03a9bd553327a36b9a421bff8f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f33656133633139342d356362382d333034652d363136652d3862386430383834386636362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F3ea3c194-5cb8-304e-616e-8b8d08848f66.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=59ba1fd213a526244f46a0e9f4121910\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/3ea3c194-5cb8-304e-616e-8b8d08848f66.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F3ea3c194-5cb8-304e-616e-8b8d08848f66.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=e774e8eea63ee4169f384393d590fd2b 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e「Environment Variables」 -\u0026gt; 「Add Environment Variables」をクリックする。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/12bccf337ba153fe12dbc83fc747829612113a9a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f34356566646435622d353538622d656266332d613836332d3938643465636337373836382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1792\" alt=\"l.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F45efdd5b-558b-ebf3-a863-98d4ecc77868.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=3a1cb9dd5797cdc60335c8324f6b2097\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/45efdd5b-558b-ebf3-a863-98d4ecc77868.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F45efdd5b-558b-ebf3-a863-98d4ecc77868.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=54090cc84a2a19d948a0c5524b3018b3 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eName に FIREBASE_TOKEN、Value に先ほど生成したトークンを設定して「Add Variable」をクリックする。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/c2415fbd719042827861121438fda50f16be5157/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f66653763613335652d376338312d303561642d306331662d6534376335636232376164612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"581\" alt=\"m.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Ffe7ca35e-7c81-05ad-0c1f-e47c5cb27ada.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=0fc520e9e912b056ac4edac7a34f7432\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/fe7ca35e-7c81-05ad-0c1f-e47c5cb27ada.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Ffe7ca35e-7c81-05ad-0c1f-e47c5cb27ada.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=58e23df4bff14dd4519a9321c09b3e6b 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e登録完了になります。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/aa5d19a90dbc7c25d1751208f96ce2295246495a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f39313761646137622d306433392d613266632d656362342d3139663037363839303032362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1045\" alt=\"n.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F917ada7b-0d39-a2fc-ecb4-19f076890026.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=cd42702daede6dff39e36569ba264fbd\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/917ada7b-0d39-a2fc-ecb4-19f076890026.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F917ada7b-0d39-a2fc-ecb4-19f076890026.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=990da8e84be810c7ff3d9e09da8165e3 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこれで .circleci/config.yml のコマンド上で \u003ccode\u003e$FIREBASE_TOKEN\u003c/code\u003e と宣言すれば、トークンが使用できます。\u003c/p\u003e\n\n\u003cp\u003e※ Firebase ID が記載されている .firebaserc を .gitignore に登録している場合は同様の手順で、\u003ccode\u003e$FIREBASE_ID\u003c/code\u003e を登録して、デプロイコマンド時に \u003ccode\u003e$FIREBASE_ID\u003c/code\u003e を指定してください。今回は .firebaserc を .gitignore として登録していないのでそちらについてはスキップします。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"3-firebase-deploy-コマンドの-circleciconfigyml-への設定\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#3-firebase-deploy-%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%AE-circleciconfigyml-%E3%81%B8%E3%81%AE%E8%A8%AD%E5%AE%9A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e3. \u003ccode\u003efirebase deploy\u003c/code\u003e コマンドの \u003ccode\u003e.circleci/config.yml\u003c/code\u003e への設定\u003c/h2\u003e\n\n\u003cp\u003e今回は \u003ccode\u003e.circleci/config.yml\u003c/code\u003e を以下のように登録しました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yml\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eversion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e2.1\u003c/span\u003e\n\u003cspan class=\"na\"\u003eexecutors\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003edefault\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eworking_directory\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e~/workspace\u003c/span\u003e\n    \u003cspan class=\"na\"\u003edocker\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eimage\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enode:12\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003ecommands\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003erestore_npm\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esteps\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erestore_cache\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eRestore npm dependencies\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ekey\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm-{{ checksum \"package.json\" }}\u003c/span\u003e\n\n  \u003cspan class=\"na\"\u003esave_npm\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esteps\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003esave_cache\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eCache npm dependencies\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ekey\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm-{{ checksum \"package.json\" }}\u003c/span\u003e\n          \u003cspan class=\"na\"\u003epaths\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003e~/workspace/node_modules\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003ejobs\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eexecutor\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edefault\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esteps\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003echeckout\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003erestore_npm\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eInstall dependencies\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm install\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eLint\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm run lint\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eBuild\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm run build\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eTest\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm run test:unit\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003esave_npm\u003c/span\u003e\n  \u003cspan class=\"na\"\u003edeploy\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eexecutor\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edefault\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esteps\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003echeckout\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003erestore_npm\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eBuild\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm run build\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eCheck dist\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003els -la dist\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eDeploy to Firebase Hosting\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e./node_modules/.bin/firebase deploy --token=$FIREBASE_TOKEN\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003eworkflows\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003epush-build\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ejobs\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003ebuild\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003edeploy\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003erequires\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003ebuild\u003c/span\u003e\n          \u003cspan class=\"na\"\u003efilters\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"na\"\u003ebranches\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n              \u003cspan class=\"na\"\u003eonly\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003emaster\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eポイントは Firebase Hosting にデプロイするのは master ブランチに Push された場合のみに設定したところです。（\u003ccode\u003efilters\u003c/code\u003eの箇所になります。）\u003c/p\u003e\n\n\u003cp\u003eつまり、以下のようにプルリクエストのために開発用ブランチでPushした場合は \u003ccode\u003ebuild\u003c/code\u003e のジョブのみ走り、master ブランチへのプルリクエストがマージされたタイミング、または master ブランチへ直接 Push した場合は \u003ccode\u003ebuild\u003c/code\u003e と \u003ccode\u003edeploy\u003c/code\u003e の2つのジョブが走るように設定しました。\u003c/p\u003e\n\n\u003cp\u003eもちろんプロジェクトの運用にもよりますがこのようにも設定できるということで、紹介も兼ねて設定しました。\u003c/p\u003e\n\n\u003cp\u003e下図のように feature/firebase ブランチでは \u003ccode\u003ebuild\u003c/code\u003e しか走ってないですが、master ブランチでは \u003ccode\u003ebuild\u003c/code\u003e と \u003ccode\u003edeploy\u003c/code\u003e の2つのジョブが走るようになっているのが確認できますね。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/481c679d2674ab616a82f62ec9b29a9c8fcb671e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f34613431636563372d623935382d656566652d316565372d6562653338383330646162362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1085\" alt=\"aas.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F4a41cec7-b958-eefe-1ee7-ebe38830dab6.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=ebff0fb1d3c3e8cb73c520266d2c9f91\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/4a41cec7-b958-eefe-1ee7-ebe38830dab6.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F4a41cec7-b958-eefe-1ee7-ebe38830dab6.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=17a6520fc8a1e30409e9bb4767c68e79 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e以上が CircleCI から Firebase にデプロイするまでになります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"さいごに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eさいごに\u003c/h1\u003e\n\n\u003cp\u003e次は今回のデプロイの結果を Slack で通知する仕組みを作成したいと思います。\u003c/p\u003e\n\n\u003cp\u003e次の記事↓\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/fd17fdf36b7b34f1fe31\" id=\"reference-70c57ad77b0a59ab8e34\"\u003eCircleCI の Job の結果を Slack に通知する\u003c/a\u003e\u003c/p\u003e\n","body":"# やりたいこと\nCircleCI によって GitHub の master ブランチへのプルリクエストをマージしたタイミングで Firebase Hosting 環境にデプロイすることです。\n\nFirebase を始めて利用する人向けに説明します。\n\nまた、CircleCI の説明については割愛します。\nCircleCI について知りたい方は[こちら](https://qiita.com/sugurutakahashi12345/items/aeca12d9c5a5526c724c)の記事を読んでみてください。\n\n# Firebase Hosting にコマンドラインからデプロイするまで\n\nCircleCI から Firebase Hosting にコマンドラインからデプロイ前に、まずはコマンドラインから Firebase Hosting にデプロイまでについて説明します。\n\n## クラウド上でのプロジェクトの作成\n\nまずは、Firebase のプロジェクトを作成します。\n[Firebase](https://firebase.google.com/?hl=ja) のサイトから「使ってみる」をクリックします。\n\u003cimg width=\"1261\" alt=\"a.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/24b65481-d052-f92b-6037-6d56a3322b77.png\"\u003e\n「プロジェクトを作成」をクリックします。\n\u003cimg width=\"1253\" alt=\"b.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/a81d9544-8593-ca46-e99c-9086a728d059.png\"\u003e\n適当な名前をつけて「続行」をクリックします。\n\u003cimg width=\"1260\" alt=\"c.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/e427c248-dbe5-4c5d-10c3-b686430f58c3.png\"\u003e\n「続行」をクリックします。\n\u003cimg width=\"856\" alt=\"d.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/040929ed-d3b4-b8eb-97c9-77a252a8e4e7.png\"\u003e\n全部チェックつけて「プロジェクトを作成」をクリックします。\n\u003cimg width=\"799\" alt=\"e.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/7d0602f1-ca7f-fb76-b0cb-268685ad5e29.png\"\u003e\n「続行」をクリックします。\n\u003cimg width=\"369\" alt=\"f.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ec973562-cc0b-c783-8cba-c2daf8fddee4.png\"\u003e\nダッシュボードに遷移できたらプロジェクトの作成の終了です。\n\u003cimg width=\"1255\" alt=\"g.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/5fee35df-03cf-8410-7d4e-0e5106a413f3.png\"\u003e\n\n## firebase login\n\nローカル環境で firebase コマンドを有効にするために firebase-tools をインストールする必要があるので `npm install -g` でインストールします。\n\n```bash:firebase-toolsインストール\nnpm install -g firebase-tools\n```\n\n続いてログインコマンドを実行し、Googleアカウントを紐づけます。\n\n```bash:ログイン\nfirebase login\n```\n\nブラウザにこのような表示がでてきたらログイン完了です。\n\u003cimg width=\"457\" alt=\"h.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/c64f15d7-acc5-1750-8c65-3461530a9c3e.png\"\u003e\n\n## firebase init\n\nFirebase Hostingにてデプロイさせたいプロジェクトにcdコマンドなどで移動して `firebase init` を実行します。\ngitプロジェクトでいうと .gitignore がある階層で実行するイメージです。\n\n今回、実際に `firebase init` を実行したリポジトリは[こちら](https://github.com/suguruTakahashi-1234/circle-test)に公開しております。\nvue-cli にて作成したプロジェクトになります。\nこのプロジェクトを作成した記事は[こちら](https://qiita.com/sugurutakahashi12345/items/ed35018025a5732a46a5)になります。ご参考までに。\n\n適当なディレクトリに移動して `firebase init` を実行します。\n\n```bash:init\nfirebase init\n```\n\n対話方式で設定を求められます。\n\n各環境に合わせて設定してください。今回の場合は以下に設定しました。\n\n - `? Which Firebase CLI features do you want to set up for this folder? Press Space to select fea\ntures, then Enter to confirm your choices.` -\u003e Hosting を選択。\n - `? Please select an option` -\u003e Use an existing project を選択。\n - `? Select a default Firebase project for this directory` -\u003e さきほど作成したプロジェクトを選択。\n - `? What do you want to use as your public directory?` -\u003e `dist` ディレクトリを指定。これは vue-cli プロジェクトは `npm run build` コマンドによって `dist` ディレクトリに build したソースを配置するように設定しているため。ここは各環境に合わせて設定してください。\n - `? Configure as a single-page app (rewrite all urls to /index.html)?` -\u003e SPA ではないので No を選択。\n\u003cimg width=\"691\" alt=\"j.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/adb5e66a-08ff-2062-6d88-b19d177828f3.png\"\u003e\n\n（↑このようなコンソールが表示されます）\n\n## firebase deploy\n\nこの段階でコマンドによるデプロイが可能になります。\n\n`npm run build` コマンドによって `dist` ディレクトリに build したソースを配置されます。（これは vue-cli での設定です。）\n\n\nそして `firebase deploy` コマンドを実行することによって `dist` ディレクトリに配置されたファイル郡が Firebase Hosting にデプロイされます。\n\n```bash:コマンドによるデプロイ\nnpm run build\nfirebase deploy\n```\nデプロイしたページにはコンソールに表示されるURLからアクセスできます。\n\u003cimg width=\"630\" alt=\"x.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/6612d8a3-e042-b73c-73b6-c0f3ee9fe062.png\"\u003e\n\nコンソールに表示されている `https://vuesample-e2c8b.web.app` にアクセスすると自作のWebページが表示されていることがわかります。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/211f9e40-b7a2-7cdb-09cd-0e7f6943c4b3.png)\n\nWebサーバーを用意することなく簡単に世の中にデプロイできましたね！\nこれだけでもすごいことです！\n\n\n# CircleCI から Firebase Hosting にデプロイするまで\nコマンドラインからデプロイできるところまで先ほど説明しました。\nそしてこれから CircleCI から Firebase Hosting にデプロイするまでについて説明します。\n\n基本的な流れは以下のようになります。  \n1. `firebase-tools` のプロジェクトへのインストール\n2. Firebase のトークンの CircleCI への登録\n3. `firebase deploy` コマンドの `.circleci/config.yml` への設定\n\n## 1. `firebase-tools` のプロジェクトへのインストール\n\nCircleCI で動く Pipeline に firebase-tools をインストールさせる必要があるので、ローカルのプロジェクトに対して `npm install --save-dev firebase-tools` コマンドを実行することによって、CircleCI の Pipeline 上で `npm install` した際に firebase-tools がインストールされるようにします。\n\n```bash\nnpm install --save-dev firebase-tools\n```\n\n## 2. Firebase のトークンの CircleCI への登録\n\n自身の環境外からデプロイするためには Firebase のトークンが必要なため、それを生成して CircleCI に登録します。\n\n```bash:Firebaseのトークンの生成\nfirebase login:ci\n```\n以下のようにトークンが生成されます。\n![https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_259125_c72d35ab-7c9c-5dbc-a471-515bee8666be.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/7fdd466f-a664-76a3-e8f1-fabc6bfe88c3.png)\n\nトークンが生成されたので、こちらを CircleCI に登録しに行きます。\n\nCircleCI のサイトから右上の「Project Settings」をクリックする。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/3ea3c194-5cb8-304e-616e-8b8d08848f66.png)\n\n「Environment Variables」 -\u003e 「Add Environment Variables」をクリックする。\n\u003cimg width=\"1792\" alt=\"l.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/45efdd5b-558b-ebf3-a863-98d4ecc77868.png\"\u003e\n\nName に FIREBASE_TOKEN、Value に先ほど生成したトークンを設定して「Add Variable」をクリックする。\n\u003cimg width=\"581\" alt=\"m.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/fe7ca35e-7c81-05ad-0c1f-e47c5cb27ada.png\"\u003e\n\n登録完了になります。\n\u003cimg width=\"1045\" alt=\"n.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/917ada7b-0d39-a2fc-ecb4-19f076890026.png\"\u003e\n\nこれで .circleci/config.yml のコマンド上で `$FIREBASE_TOKEN` と宣言すれば、トークンが使用できます。\n\n※ Firebase ID が記載されている .firebaserc を .gitignore に登録している場合は同様の手順で、`$FIREBASE_ID` を登録して、デプロイコマンド時に `$FIREBASE_ID` を指定してください。今回は .firebaserc を .gitignore として登録していないのでそちらについてはスキップします。\n\n## 3. `firebase deploy` コマンドの `.circleci/config.yml` への設定\n\n今回は `.circleci/config.yml` を以下のように登録しました。\n\n```yml\nversion: 2.1\nexecutors:\n  default:\n    working_directory: ~/workspace\n    docker:\n      - image: node:12\n\ncommands:\n  restore_npm:\n    steps:\n      - restore_cache:\n          name: Restore npm dependencies\n          key: npm-{{ checksum \"package.json\" }}\n\n  save_npm:\n    steps:\n      - save_cache:\n          name: Cache npm dependencies\n          key: npm-{{ checksum \"package.json\" }}\n          paths:\n            - ~/workspace/node_modules\n\njobs:\n  build:\n    executor: default\n    steps:\n      - checkout\n      - restore_npm\n      - run:\n          name: Install dependencies\n          command: npm install\n      - run: \n          name: Lint\n          command: npm run lint\n      - run: \n          name: Build\n          command: npm run build\n      - run:\n          name: Test\n          command: npm run test:unit\n      - save_npm\n  deploy:\n    executor: default\n    steps:\n      - checkout\n      - restore_npm\n      - run: \n          name: Build\n          command: npm run build\n      - run:\n          name: Check dist\n          command: ls -la dist\n      - run:\n          name: Deploy to Firebase Hosting\n          command: ./node_modules/.bin/firebase deploy --token=$FIREBASE_TOKEN\n\nworkflows:\n  push-build:\n    jobs:\n      - build\n      - deploy:\n          requires:\n            - build\n          filters:\n            branches:\n              only: master\n```\nポイントは Firebase Hosting にデプロイするのは master ブランチに Push された場合のみに設定したところです。（`filters`の箇所になります。）\n\nつまり、以下のようにプルリクエストのために開発用ブランチでPushした場合は `build` のジョブのみ走り、master ブランチへのプルリクエストがマージされたタイミング、または master ブランチへ直接 Push した場合は `build` と `deploy` の2つのジョブが走るように設定しました。\n\nもちろんプロジェクトの運用にもよりますがこのようにも設定できるということで、紹介も兼ねて設定しました。\n\n下図のように feature/firebase ブランチでは `build` しか走ってないですが、master ブランチでは `build` と `deploy` の2つのジョブが走るようになっているのが確認できますね。\n\n\u003cimg width=\"1085\" alt=\"aas.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/4a41cec7-b958-eefe-1ee7-ebe38830dab6.png\"\u003e\n\n以上が CircleCI から Firebase にデプロイするまでになります。\n\n# さいごに\n次は今回のデプロイの結果を Slack で通知する仕組みを作成したいと思います。\n\n次の記事↓\n[CircleCI の Job の結果を Slack に通知する](https://qiita.com/sugurutakahashi12345/items/fd17fdf36b7b34f1fe31)\n","coediting":false,"comments_count":0,"created_at":"2020-08-02T16:42:12+09:00","group":null,"id":"04b78b946322b8b410f7","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"CircleCI","versions":[]},{"name":"Firebase","versions":[]}],"title":"CircleCI から Firebase Hosting にデプロイするまで","updated_at":"2020-12-23T15:19:38+09:00","url":"https://qiita.com/ikuraikura/items/04b78b946322b8b410f7","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/tatane616/items/8624e61473a9957d9a819\"\u003eGitHub+CircleCI入門\u003c/a\u003eの記事をみて、この記事のように実践しようとしたら、話の途中で vue-cli がでてきてよくわからなかったので、実際に動かしてみたことを備忘録のついでに記事を書いてみました。\u003c/p\u003e\n\n\u003cp\u003e※ Webフロントエンド開発超初心者です。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"vue-cliとは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#vue-cli%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003evue-cliとは\u003c/h1\u003e\n\n\u003cp\u003eコマンドラインを使ってvue.jsで開発を行うための前準備を支援してくれるツールらしいです。\u003cbr\u003e\nwebpackも一緒にインストールされるでプロジェクトを作成すればすぐに開発を開始することができます。\u003c/p\u003e\n\n\u003cp\u003ewebpackについての説明は\u003ca href=\"https://scrapbox.io/vue-yawaraka/webpack(vue-cli)%E3%81%AF%E4%BD%95%E3%82%92%E3%81%97%E3%81%A6%E3%81%8F%E3%82%8C%E3%82%8B%E3%82%82%E3%81%AE%E3%81%AA%E3%81%AE%E3%81%8B\" rel=\"nofollow noopener\" target=\"_blank\"\u003eここのサイト\u003c/a\u003eが簡単でわかりやすかったです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"インストール\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eインストール\u003c/h1\u003e\n\n\u003cp\u003enpm install でインストールします。\u003cbr\u003e\n一応バージョンも確認。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eインストール\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e @vue/cli\n（省略）\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evue \u003cspan class=\"nt\"\u003e--version\u003c/span\u003e\n@vue/cli 4.4.6\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"プロジェクトの作成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eプロジェクトの作成\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003evue create [プロジェクト名]\u003c/code\u003e でプロジェクト作成。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eプロジェクトの作成\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evue create my-project\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003evue create コマンド入力後、質問されるがお好みで設定します。\u003cbr\u003e\nもし、ここで選択し忘れても、あとからでも導入できる（らしい）のであまり気にしないほうが良さそうです。\u003c/p\u003e\n\n\u003cp\u003eちなみに今回は以下のようにしました。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/14b449a978aaa05790c0c32f84fb1a898b1cb6d8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f32633931366131332d613535642d663433382d343762382d6336313430353730626561332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"581\" alt=\"スクリーンショット 2020-07-29 1.55.54.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F2c916a13-a55d-f438-47b8-c6140570bea3.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=b73d07a0ae92b8f5e1257f7021cecf61\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/2c916a13-a55d-f438-47b8-c6140570bea3.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F2c916a13-a55d-f438-47b8-c6140570bea3.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=0d17d16308ec8e4faa1efe6449ecc6c9 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"ローカルサーバーの起動\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AE%E8%B5%B7%E5%8B%95\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eローカルサーバーの起動\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003enpm run serve\u003c/code\u003e でローカルサーバーが起動します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eローカルサーバーの起動\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003emy-project\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm run serve\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eコンソールはこんな感じです↓\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/5411832897c5f0e23e640cc2e1bf334e298eea5d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f36633034333164362d623631382d346630632d653636392d6232323531636436326132302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"526\" alt=\"スクリーンショット 2020-07-29 2.01.51.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F6c0431d6-b618-4f0c-e669-b2251cd62a20.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=60657302f5f355792ed40ffff9af5688\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/6c0431d6-b618-4f0c-e669-b2251cd62a20.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F6c0431d6-b618-4f0c-e669-b2251cd62a20.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=071be7a7bb9f239a15232f7ba31db8cd 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eとりあえず動いたみたいなので \u003ca href=\"http://localhost:8080/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://localhost:8080/\u003c/a\u003e にアクセスしてみるともうWebページが作成されていました。（はやすぎ！）\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/f2c006178b60765bddb2158bf00ee7732cbd8e4a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f32313336633235322d356533342d373562342d396463372d3937643531316439643734622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"667\" alt=\"スクリーンショット 2020-07-29 2.04.42.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F2136c252-5e34-75b4-9dc7-97d511d9d74b.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=3897367d527e0f0fdacc7ce960e52c60\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/2136c252-5e34-75b4-9dc7-97d511d9d74b.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F2136c252-5e34-75b4-9dc7-97d511d9d74b.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=d8687acc5f864db279575744405703a7 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"ビルド\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%93%E3%83%AB%E3%83%89\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eビルド\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003enpm run build\u003c/code\u003e でビルドしてくれます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eビルド\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm run build\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこれによってなにが起きているかというと、distというディレクトリに必要な html, js, css などのファイルたちをいい感じにまとめてくれているみたいです。\u003c/p\u003e\n\n\u003cp\u003e本番環境にはこのdistディレクトリの内容をデプロイすればいいわけですねーなるほど\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/4cdff995c8bc8e4ec756ec3f0810678308f58ea0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f65383135373566642d366235632d633237332d643562612d3038363334626434363935302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"749\" alt=\"スクリーンショット 2020-07-29 2.24.29.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fe81575fd-6b5c-c273-d5ba-08634bd46950.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=a25882fafdaede997ffe698462ade12d\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/e81575fd-6b5c-c273-d5ba-08634bd46950.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fe81575fd-6b5c-c273-d5ba-08634bd46950.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=446c3ef59511ce15682b5c6ffaca1704 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"unitテスト\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#unit%E3%83%86%E3%82%B9%E3%83%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eUnitテスト\u003c/h1\u003e\n\n\u003cp\u003eインストールのオプションでUnitテスト機能も追加しておいたので実施してみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eUnitテスト\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm run \u003cspan class=\"nb\"\u003etest\u003c/span\u003e:unit\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eコンソール上はこんな感じです。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/8d797340ba302a7922da16d90be0b62a3b2e2683/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f61353465393331392d333435642d356162642d333433642d3965373533663963636431652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"534\" alt=\"スクリーンショット 2020-07-29 2.31.39.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fa54e9319-345d-5abd-343d-9e753f9ccd1e.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=6c14a10497709fe5a79ebb94e1c293f7\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/a54e9319-345d-5abd-343d-9e753f9ccd1e.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fa54e9319-345d-5abd-343d-9e753f9ccd1e.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=9bd32d14c6cca07bb82b67b6fbe919ca 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eどうやら、tests/unit/example.spec.js に書かれたテストコードが動いているみたいです。\u003c/p\u003e\n\n\u003cp\u003eためしにわざと間違えてみます。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/9d24d1424fed2cf6e0b5b063e95f1581fa57eb97/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f61353534303464372d643133392d333862392d663234382d3836343639656634636435332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"842\" alt=\"スクリーンショット 2020-07-29 2.34.46.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fa55404d7-d139-38b9-f248-86469ef4cd53.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=7c02cb6bffc3b8a7417162cdc6cbf44b\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/a55404d7-d139-38b9-f248-86469ef4cd53.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fa55404d7-d139-38b9-f248-86469ef4cd53.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=3ccab694dfad6cb2e3165a871cc21b46 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\nなんか赤が出てすごいことになりました笑\u003cbr\u003e\nこれは \u003ccode\u003e--silent\u003c/code\u003e のオプションをつけると良いとのことです。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/frost_star/items/83d58072374d61de9e10\" id=\"reference-387e09e70ed072a5c867\"\u003enpm run testするときはnpmログを切ったほうがいい\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eUnitテスト\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm run \u003cspan class=\"nb\"\u003etest\u003c/span\u003e:unit \u003cspan class=\"nt\"\u003e--silent\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/ad682d0df95ff201261255a3fbc2f81b022405c7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f37643430383335342d393462622d393937322d316465372d6234646532363161383939622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"599\" alt=\"スクリーンショット 2020-07-29 2.44.10.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F7d408354-94bb-9972-1de7-b4de261a899b.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=b6901021e95fbb6bed93e423c7154cbc\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/7d408354-94bb-9972-1de7-b4de261a899b.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F7d408354-94bb-9972-1de7-b4de261a899b.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=88f12a4b0573b71db7670b9f3c96806e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\nこれで実行すると npm ERR! が消えてめっちゃすっきりしました。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"lint\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#lint\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003elint\u003c/h1\u003e\n\n\u003cp\u003elint とはフォーマットを整えてくれたり、コード上よくないところを注意してくれるらしいです。\u003cbr\u003e\n\u003ccode\u003enpm run lint\u003c/code\u003eで実行します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003elint\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm run lint\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cdel\u003e実際にこちらのコマンドで実行してみましたがよくわかりませんでした。\u003c/del\u003e\u003cbr\u003e\n\u003cdel\u003eわざと間違えてみるような記述をしましたが検知してくれなかったです。。。（なぜ？）\u003c/del\u003e\u003cbr\u003e\n\u003cdel\u003eデフォルトの設定だけではいけなさそうです。\u003c/del\u003e\u003cbr\u003e\n\u003cdel\u003e今後わかり次第追記します。\u003c/del\u003e\u003c/p\u003e\n\n\u003cp\u003e例えば、以下のように \u003ccode\u003eimport\u003c/code\u003e の綴りをわざと間違えた状態で \u003ccode\u003enpm run lint\u003c/code\u003e を実行するとエラー箇所を検知してくれました。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/932245d515efa2b5ecef0c7fead77e7c1f89f9dd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f66663466393663302d623131642d313334632d343234302d3730386536313764376630612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fff4f96c0-b11d-134c-4240-708e617d7f0a.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=39371c1687d30f8ffd3865e8495cbc55\" alt=\"スクリーンショット 2020-12-23 15.08.05.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ff4f96c0-b11d-134c-4240-708e617d7f0a.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fff4f96c0-b11d-134c-4240-708e617d7f0a.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=581b618eb0bf92e001850d1ae5f43870 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e（でも、これってVSCodeが教えてくれるからわざわざ lint を実行する必要はないのでは、、、？ どなたか lint の効果的な活用方法を教えてただきたいです。）\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"さいごに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eさいごに\u003c/h1\u003e\n\n\u003cp\u003e一応、今回作成したものをGitHubの\u003ca href=\"https://github.com/suguruTakahashi-1234/circle-test\" rel=\"nofollow noopener\" target=\"_blank\"\u003eリポジトリ\u003c/a\u003eを公開しました。\u003c/p\u003e\n\n\u003cp\u003e今後はこちらを CircleCI に連携したいと思っております。\u003c/p\u003e\n\n\u003cp\u003e次の記事↓\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/aeca12d9c5a5526c724c\" id=\"reference-f952251acbf046c04d25\"\u003eCircleCI 試してみた\u003c/a\u003e\u003c/p\u003e\n","body":"# はじめに\n[GitHub+CircleCI入門](https://qiita.com/tatane616/items/8624e61473a9957d9a819)の記事をみて、この記事のように実践しようとしたら、話の途中で vue-cli がでてきてよくわからなかったので、実際に動かしてみたことを備忘録のついでに記事を書いてみました。\n\n※ Webフロントエンド開発超初心者です。\n\n# vue-cliとは\nコマンドラインを使ってvue.jsで開発を行うための前準備を支援してくれるツールらしいです。\nwebpackも一緒にインストールされるでプロジェクトを作成すればすぐに開発を開始することができます。\n\nwebpackについての説明は[ここのサイト](https://scrapbox.io/vue-yawaraka/webpack(vue-cli)%E3%81%AF%E4%BD%95%E3%82%92%E3%81%97%E3%81%A6%E3%81%8F%E3%82%8C%E3%82%8B%E3%82%82%E3%81%AE%E3%81%AA%E3%81%AE%E3%81%8B)が簡単でわかりやすかったです。\n\n# インストール\nnpm install でインストールします。\n一応バージョンも確認。\n\n```bash:インストール\n$ npm install -g @vue/cli\n（省略）\n$ vue --version\n@vue/cli 4.4.6\n```\n\n# プロジェクトの作成\n\n`vue create [プロジェクト名]` でプロジェクト作成。\n\n```bash:プロジェクトの作成\n$ vue create my-project\n```\nvue create コマンド入力後、質問されるがお好みで設定します。\nもし、ここで選択し忘れても、あとからでも導入できる（らしい）のであまり気にしないほうが良さそうです。\n\nちなみに今回は以下のようにしました。\n\u003cimg width=\"581\" alt=\"スクリーンショット 2020-07-29 1.55.54.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/2c916a13-a55d-f438-47b8-c6140570bea3.png\"\u003e\n\n# ローカルサーバーの起動\n`npm run serve` でローカルサーバーが起動します。\n\n```bash:ローカルサーバーの起動\n$ cd my-project\n$ npm run serve\n```\n\nコンソールはこんな感じです↓\n\u003cimg width=\"526\" alt=\"スクリーンショット 2020-07-29 2.01.51.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/6c0431d6-b618-4f0c-e669-b2251cd62a20.png\"\u003e\n\nとりあえず動いたみたいなので http://localhost:8080/ にアクセスしてみるともうWebページが作成されていました。（はやすぎ！）\n\u003cimg width=\"667\" alt=\"スクリーンショット 2020-07-29 2.04.42.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/2136c252-5e34-75b4-9dc7-97d511d9d74b.png\"\u003e\n\n# ビルド\n\n`npm run build` でビルドしてくれます。\n\n```bash:ビルド\n$ npm run build\n```\n\nこれによってなにが起きているかというと、distというディレクトリに必要な html, js, css などのファイルたちをいい感じにまとめてくれているみたいです。\n\n本番環境にはこのdistディレクトリの内容をデプロイすればいいわけですねーなるほど\n\n\u003cimg width=\"749\" alt=\"スクリーンショット 2020-07-29 2.24.29.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/e81575fd-6b5c-c273-d5ba-08634bd46950.png\"\u003e\n\n# Unitテスト\n\nインストールのオプションでUnitテスト機能も追加しておいたので実施してみます。\n\n```bash:Unitテスト\n$ npm run test:unit\n```\nコンソール上はこんな感じです。\n\u003cimg width=\"534\" alt=\"スクリーンショット 2020-07-29 2.31.39.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/a54e9319-345d-5abd-343d-9e753f9ccd1e.png\"\u003e\n\nどうやら、tests/unit/example.spec.js に書かれたテストコードが動いているみたいです。\n\nためしにわざと間違えてみます。\n\n\u003cimg width=\"842\" alt=\"スクリーンショット 2020-07-29 2.34.46.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/a55404d7-d139-38b9-f248-86469ef4cd53.png\"\u003e\nなんか赤が出てすごいことになりました笑\nこれは `--silent` のオプションをつけると良いとのことです。\n\n[npm run testするときはnpmログを切ったほうがいい](https://qiita.com/frost_star/items/83d58072374d61de9e10)\n\n```bash:Unitテスト\n$ npm run test:unit --silent\n```\n\u003cimg width=\"599\" alt=\"スクリーンショット 2020-07-29 2.44.10.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/7d408354-94bb-9972-1de7-b4de261a899b.png\"\u003e\nこれで実行すると npm ERR! が消えてめっちゃすっきりしました。\n\n# lint\n\nlint とはフォーマットを整えてくれたり、コード上よくないところを注意してくれるらしいです。\n`npm run lint`で実行します。\n\n```bash:lint\n$ npm run lint\n```\n\n~~実際にこちらのコマンドで実行してみましたがよくわかりませんでした。~~\n~~わざと間違えてみるような記述をしましたが検知してくれなかったです。。。（なぜ？）~~\n~~デフォルトの設定だけではいけなさそうです。~~\n~~今後わかり次第追記します。~~\n\n例えば、以下のように `import` の綴りをわざと間違えた状態で `npm run lint` を実行するとエラー箇所を検知してくれました。\n![スクリーンショット 2020-12-23 15.08.05.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ff4f96c0-b11d-134c-4240-708e617d7f0a.png)\n\n（でも、これってVSCodeが教えてくれるからわざわざ lint を実行する必要はないのでは、、、？ どなたか lint の効果的な活用方法を教えてただきたいです。）\n\n# さいごに\n一応、今回作成したものをGitHubの[リポジトリ](https://github.com/suguruTakahashi-1234/circle-test)を公開しました。\n\n今後はこちらを CircleCI に連携したいと思っております。\n\n次の記事↓\n[CircleCI 試してみた](https://qiita.com/sugurutakahashi12345/items/aeca12d9c5a5526c724c)\n","coediting":false,"comments_count":0,"created_at":"2020-07-29T03:16:28+09:00","group":null,"id":"ed35018025a5732a46a5","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"Vue.js","versions":[]},{"name":"vue-cli","versions":[]}],"title":"vue-cli でプロジェクト作成してあれこれ試してみた（初心者向け）","updated_at":"2020-12-23T15:15:26+09:00","url":"https://qiita.com/ikuraikura/items/ed35018025a5732a46a5","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003eGit と連携した CI/CD を勉強したく、GitHub と連携できる CircleCI なるサービスがあるとのことなのでそちらを試してみた内容をまとめたいと思います。\u003c/p\u003e\n\n\u003cp\u003e※初心者の備忘録になります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"やったこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eやったこと\u003c/h1\u003e\n\n\u003cp\u003e一旦、適当なリポジトリで CircleCI の使用感を確かめてから、本命のリポジトリで試してみました。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"とりあえず-circleci-を動かしてみる\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A-circleci-%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eとりあえず CircleCI を動かしてみる\u003c/h1\u003e\n\n\u003cp\u003e適当な\u003ca href=\"https://github.com/suguruTakahashi-1234/sample_web_page/tree/circleci-project-setup\" rel=\"nofollow noopener\" target=\"_blank\"\u003eGitHubリポジトリ\u003c/a\u003eで試してみます。\u003c/p\u003e\n\n\u003cp\u003e原理は一旦置いておいて、とりあえず試すための手順を説明します。\u003c/p\u003e\n\n\u003cp\u003e今回、使用するリポジトリのファイルは以下の通りです（なんでもいいです）。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/825169cc937084205ee5dda5f92b2d8c5b76ef7a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f64376262313462652d316466352d336637382d373330322d3531393931643938376533362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"945\" alt=\"a.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fd7bb14be-1df5-3f78-7302-51991d987e36.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=f81fab33664d0029767c3957e1727043\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/d7bb14be-1df5-3f78-7302-51991d987e36.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fd7bb14be-1df5-3f78-7302-51991d987e36.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=b06690cb833cc5f9edac0461abe4bcc4 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://app.circleci.com/projects\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://app.circleci.com/projects\u003c/a\u003e にアクセスすると以下のように連携したGitHubのリポジトリが表示されます。\u003cbr\u003e\n今回は sample_web_page リポジトリを用いており、そこの「Set Up Project」を選択します。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/1fd6553b6e67b321b5ac44128d98961beef93268/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f37353831316232662d623430332d326539332d613461312d3838636634643831623739342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"763\" alt=\"b.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F75811b2f-b403-2e93-a4a1-88cf4d81b794.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=9176d28da8da72c6687d0b3f5e1c6031\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/75811b2f-b403-2e93-a4a1-88cf4d81b794.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F75811b2f-b403-2e93-a4a1-88cf4d81b794.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=6c7c98ffeb4343536af2401d474461c3 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n以下の画面が表示されるのでとりあえず、「Add Config」を選択します。\u003cbr\u003e\nこれによって、画面下のデフォルトの内容で設定ファイルが追加されます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/5a8d2e7a380e63c52cb43eae3f8b1dd6c0eccb6c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f64343538623631392d623037332d343339632d313434382d6537626335303339326263632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"768\" alt=\"c.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fd458b619-b073-439c-1448-e7bc50392bcc.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=3798138ca6f1529b71b3d382556f4053\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/d458b619-b073-439c-1448-e7bc50392bcc.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fd458b619-b073-439c-1448-e7bc50392bcc.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=5612de6346254cf6c3213717fb44f58d 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n「Add Config」を選択すると、いきなり Pipeline が動きます。\u003c/p\u003e\n\n\u003cp\u003eよくみると \u003ccode\u003ecircleci-project-setup\u003c/code\u003e という見知らぬブランチが表示されていることがわかります。\u003cbr\u003e\n「Add Config」すると勝手にこのリモートブランチが作成されるみたいです。\u003c/p\u003e\n\n\u003cp\u003eさきほどの設定ファイルもこのリモートブランチに追加されて、その設定ファイルを読みこんで Pipeline が動き出して、それがうまく動作して「SUCCESS」となるそうです。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/e5ef9c04fe23ee9c5002808983ebaa968a5832de/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f38326638366630392d656161312d346633612d646531302d6630323936633566373336332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1081\" alt=\"d.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F82f86f09-eaa1-4f3a-de10-f0296c5f7363.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=b5c05c3765159720b0eb8ab2804eb168\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/82f86f09-eaa1-4f3a-de10-f0296c5f7363.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F82f86f09-eaa1-4f3a-de10-f0296c5f7363.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=5157858d72c6688bc0173a42b069c648 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ccode\u003ecircleci-project-setup\u003c/code\u003e ブランチを確認しにいったら、やはり設定ファイルが作成されていましたね。\u003cbr\u003e\nパスは \u003ccode\u003e.circleci/config.yml\u003c/code\u003e です。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/93a6dd84183096db8afa846e2e0af90fc4ca6888/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f66626132303733342d336465632d623864312d306362392d3339306439366537316439342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1249\" alt=\"e.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Ffba20734-3dec-b8d1-0cb9-390d96e71d94.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=285ea4eef013eba89a1ee968fadee616\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/fba20734-3dec-b8d1-0cb9-390d96e71d94.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Ffba20734-3dec-b8d1-0cb9-390d96e71d94.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bf7adfedfd3e71d3b9118dfb599cee53 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\nとりあえず、動かすことには成功したようです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"ローカルでの確認\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E3%81%AE%E7%A2%BA%E8%AA%8D\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eローカルでの確認\u003c/h1\u003e\n\n\u003cp\u003e次にローカルでも CicleCI が動くとのことなので動かしてみたいと思います。\u003c/p\u003e\n\n\u003cp\u003eちなみに config.yml の設定ファイルを新規作成、または更新するときは、いちいちPushしてリモートのCicleCIで稼働は確認せずに、一度ローカルで動くことを確認してからPushするのがいいとのことです。（なるほど！）\u003c/p\u003e\n\n\u003cp\u003eこの記事を参考にしました。\u003cbr\u003e\n\u003ca href=\"https://qiita.com/13Slhr77Cgzn892/items/81831234aa605e4b6464\" id=\"reference-586eb5a8aabe5943d4af\"\u003eCircleCI 2.0 をlocalで動かす\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e※前提としてDockerが入っていることになります。\u003c/p\u003e\n\n\u003cp\u003e以下のコマンドでインストールできます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ecircleciコマンドのインストール\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003echmod\u003c/span\u003e +x /usr/local/bin/circleci\ncircleci update\n\n（省略）\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecircleci version\n\ncircleci version: 0.1.0\nINFO: We\u003cspan class=\"se\"\u003e\\'\u003c/span\u003eve built a brand new CLI \u003cspan class=\"k\"\u003efor \u003c/span\u003eCircleCI! Please run \u003cspan class=\"s1\"\u003e'circleci switch'\u003c/span\u003e to upgrade.\nBuild Agent version: 1.0.37604-d5a5647e\nBuilt: 2020-07-28T20:10:21+0000\n\n\u003cspan class=\"c\"\u003e# アップデートのため 'circleci switch' コマンドを求められたので実行\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecircleci switch\n（省略）\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecircleci version\n0.1.8764+bb7188b \u003cspan class=\"o\"\u003e(\u003c/span\u003erelease\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003ecircleci コマンドをインストールできました。\u003c/p\u003e\n\n\u003cp\u003eここからは先ほど、とりあえず試してみた \u003ccode\u003ecircleci-project-setup\u003c/code\u003e ブランチの \u003ccode\u003e.circleci/config.yml\u003c/code\u003e で試すとどうなるか検証してみます。\u003c/p\u003e\n\n\u003cp\u003eまず、\u003ccode\u003ecircleci config validate -c .circleci/config.yml\u003c/code\u003e コマンドで validation チェックします。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003evalidate\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecircleci config validate \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e .circleci/config.yml\nConfig file at .circleci/config.yml is valid.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e成功したのでビルドを試してみます。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ecircleci build .circleci/config.yml\u003c/code\u003e コマンドを実行するとローカル環境で \u003ccode\u003e.circleci/config.yml\u003c/code\u003e ファイルを読みこんでビルドが走ります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eローカル環境での実行\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecircleci build .circleci/config.yml\n（なぜかエラー出力）\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eうまくいきませんでした。。。\u003cbr\u003e\n成功すると、Dockerが動き出して、リモートのCicleCI上で行っていることが起こります。\u003c/p\u003e\n\n\u003cp\u003e調べてみたらどうやら v2.1系には対応していないとのことでした。（\u003ca href=\"https://qiita.com/nemotoy/items/7a9b8958a051df1de40f\" id=\"reference-866fc7fabec1afaaaff1\"\u003eソース\u003c/a\u003e）\u003c/p\u003e\n\n\u003cp\u003e一旦、validation チェックだけのためになってしまいましたが、なにもしないよりはマシなので、これでいきたいと思います。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"本命のリポジトリでいろいろ試してみる\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%9C%AC%E5%91%BD%E3%81%AE%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%A7%E3%81%84%E3%82%8D%E3%81%84%E3%82%8D%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e本命のリポジトリでいろいろ試してみる\u003c/h1\u003e\n\n\u003cp\u003eVue.js で作成したプロジェクトで CicleCI を試してみたいと思います。\u003c/p\u003e\n\n\u003cp\u003eVue.js のプロジェクトであれば、npm の各種コマンドやユニットテストも実行可能なので、そちらも CicleCI でビルドを走らせてより開発案件に近い形で実行させます。\u003c/p\u003e\n\n\u003cp\u003e操作は\u003ca href=\"https://qiita.com/tatane616/items/8624e61473a9957d9a81\" id=\"reference-0f7d5543292d4e644cd2\"\u003eこちらの記事\u003c/a\u003eを参考にさせていただきました。\u003c/p\u003e\n\n\u003cp\u003eリポジトリは\u003ca href=\"https://github.com/suguruTakahashi-1234/circle-test\" rel=\"nofollow noopener\" target=\"_blank\"\u003eこちら\u003c/a\u003eになります。\u003c/p\u003e\n\n\u003cp\u003eちなみにこのリポジトリは \u003ca href=\"https://qiita.com/sugurutakahashi12345/items/ed35018025a5732a46a5\" id=\"reference-b78a28f4e7b303e90e3c\"\u003evue-cliでプロジェクト作成してあれこれ試してみた（初心者向け）\u003c/a\u003eで作成したものになります。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"configyml-の設定\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#configyml-%E3%81%AE%E8%A8%AD%E5%AE%9A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003econfig.yml の設定\u003c/h2\u003e\n\n\u003cp\u003e本記事では割愛しますが、このあたりの記事が config.yml の書き方の説明がわかりやすかったです。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/tatane616/items/8624e61473a9957d9a81\"\u003eGitHub+CircleCI入門\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://qiita.com/gold-kou/items/4c7e62434af455e977c2\" id=\"reference-15da5375bee6d68a1998\"\u003eいまさらだけどCircleCIに入門したので分かりやすくまとめてみた\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e今回設定した config.yml は以下の通りです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003econfig.yml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\n\u003cspan class=\"na\"\u003eversion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e2.1\u003c/span\u003e\n\u003cspan class=\"na\"\u003eexecutors\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003edefault\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eworking_directory\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e~/workspace\u003c/span\u003e\n    \u003cspan class=\"na\"\u003edocker\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eimage\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enode:12\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003ecommands\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003erestore_npm\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esteps\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erestore_cache\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eRestore npm dependencies\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ekey\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm-{{ checksum \"package.json\" }}\u003c/span\u003e\n\n  \u003cspan class=\"na\"\u003esave_npm\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esteps\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003esave_cache\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eCache npm dependencies\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ekey\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm-{{ checksum \"package.json\" }}\u003c/span\u003e\n          \u003cspan class=\"na\"\u003epaths\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003e~/workspace/node_modules\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003ejobs\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003esetup\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eexecutor\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edefault\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esteps\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003echeckout\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eInstall dependencies\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm install\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003esave_npm\u003c/span\u003e\n\n  \u003cspan class=\"na\"\u003elint\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eexecutor\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edefault\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esteps\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003echeckout\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003erestore_npm\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eLint\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm run lint\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003esave_npm\u003c/span\u003e\n\n  \u003cspan class=\"na\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eexecutor\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edefault\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esteps\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003echeckout\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003erestore_npm\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eBuild\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm run build\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003esave_npm\u003c/span\u003e\n\n  \u003cspan class=\"na\"\u003etest\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eexecutor\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edefault\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esteps\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003echeckout\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003erestore_npm\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eTest\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enpm run test:unit\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003esave_npm\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003eworkflows\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003epull-request\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ejobs\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003esetup\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003elint\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003erequires\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003esetup\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003erequires\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003elint\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003etest\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003erequires\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003ebuild\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこの設定は以下のようになります。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eexecutors:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003edocker : Dockerイメージは \u003ccode\u003enode:12\u003c/code\u003e を利用\u003c/li\u003e\n\u003cli\u003eworking_directory : ワーキングディレクトリを \u003ccode\u003e~/workspace\u003c/code\u003e に設定（※working_directory で指定したディレクトリが存在しない場合は、自動的に作成されます。） \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ecommands\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003erestore_npm : package.json のハッシュをキーにして node_modules のキャッシュを復元（npm系のお決まりみたいです）\u003c/li\u003e\n\u003cli\u003esave_npm : package.json のハッシュをキーにして node_modules のキャッシュを保存（npm系のお決まりみたいです）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ejobs\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003esetup : \u003ccode\u003enpm install\u003c/code\u003e コマンドを実施する\u003c/li\u003e\n\u003cli\u003elint : \u003ccode\u003enpm run lint\u003c/code\u003e コマンドを実施する\u003c/li\u003e\n\u003cli\u003ebuild : \u003ccode\u003enpm run build\u003c/code\u003e コマンドを実施する\u003c/li\u003e\n\u003cli\u003etest : \u003ccode\u003enpm run test:unit\u003c/code\u003e コマンドを実施する\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eworkflows\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003epull-request: setup \u0026gt; lint \u0026gt; build \u0026gt; test と jobを順次実行する pull-request と言う名前のワークフロー\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e本稿でも記述したように一旦こちらのファイルはリモートに上げる前に、ローカルで実行してみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003econfig.yml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecircleci config validate \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e .circleci/config.yml\nConfig file at .circleci/config.yml is valid.\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecircleci build .circleci/config.yml\n（エラーでした）\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eまたもや、うまくいきませんでした。。。\u003cbr\u003e\n調べてみたらどうやら restore_npm や save_npm は対応していないとのことです。（\u003ca href=\"https://qiita.com/nemotoy/items/7a9b8958a051df1de40f\"\u003eソース\u003c/a\u003e）\u003c/p\u003e\n\n\u003cp\u003eあんまり、ローカルでの動きは保証されてないみたいですね。。。\u003cbr\u003e\n結局リモートで確かめるしかないようです。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"circleci-のビルドのタイミング\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#circleci-%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%9F%E3%83%B3%E3%82%B0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eCircleCI のビルドのタイミング\u003c/h2\u003e\n\n\u003cp\u003eCircleCI が走るタイミングはデフォルトでは、どんなブランチでも Push されたときにビルドが走る設定になっております。\u003c/p\u003e\n\n\u003cp\u003eビルドのタイミングは細かく設定することもでき、例えば特定のブランチを選択したり、Push ではなく Pull Request のタイミング、またはcronのようなスケジューリングなども設定することができます。（\u003ca href=\"https://udomomo.hatenablog.com/entry/2020/03/08/232353\" rel=\"nofollow noopener\" target=\"_blank\"\u003eやり方\u003c/a\u003e）\u003c/p\u003e\n\n\u003cp\u003eまた、話が若干それますが CircleCI のビルドが成功しないと、Pull Request 時にマージできないようにも設定できます。(\u003ca href=\"https://qiita.com/gold-kou/items/4c7e62434af455e977c2#%E4%BB%BB%E6%84%8Fci%E3%81%AB%E6%88%90%E5%8A%9F%E3%81%97%E3%81%AA%E3%81%84%E3%81%A8%E3%83%9E%E3%83%BC%E3%82%B8%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E3%81%97%E3%81%9F%E3%81%84github%E5%81%B4%E3%81%AE%E8%A8%AD%E5%AE%9A\" id=\"reference-15da5375bee6d68a1998\"\u003eやり方\u003c/a\u003e)\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"pull-requst-での-circleci-ビルドの確認\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#pull-requst-%E3%81%A7%E3%81%AE-circleci-%E3%83%93%E3%83%AB%E3%83%89%E3%81%AE%E7%A2%BA%E8%AA%8D\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ePull Requst での CircleCI ビルドの確認\u003c/h2\u003e\n\n\u003cp\u003e上記のように Pull Request を出さなくても Push のタイミングでビルドが走りますが、今回は実際の運用を想定して検証用のブランチを Push したのちに Pull Request を出して動きを確認してみたいと思います。\u003c/p\u003e\n\n\u003cp\u003ePush したのちに Pull Request を出して CircleCI のビルドに成功すると、以下のように Pull Request の画面で \u003ccode\u003eAll checks have passed\u003c/code\u003e と表示されます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/b350f87e0b2aaf9ced1a69a3bec398722326b663/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f66326231646638382d373762322d666139332d356331362d6635363166656539373466362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"952\" alt=\"ss.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Ff2b1df88-77b2-fa93-5c16-f561fee974f6.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=ddbeb0f731cfe9ea18d044155735fcfa\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/f2b1df88-77b2-fa93-5c16-f561fee974f6.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Ff2b1df88-77b2-fa93-5c16-f561fee974f6.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=3f1ce40b2835de5d2188c647abcca4d7 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e次に、この状態からあえて、ユニットテストを失敗するようにコミットを入れて、Push した結果が以下になります。\u003c/p\u003e\n\n\u003cp\u003e一目瞭然で、ビルドにエラーが発生したことが確認できますね。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/1a4e8f68f8c9e2c78bc79db284a6195f62a973ff/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f39643436343262662d396232312d316261382d633665642d6637646436633438326464382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"836\" alt=\"sss.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F9d4642bf-9b21-1ba8-c6ed-f7dd6c482dd8.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=2863b54ce27ebb656d1a152a00053fb8\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/9d4642bf-9b21-1ba8-c6ed-f7dd6c482dd8.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F9d4642bf-9b21-1ba8-c6ed-f7dd6c482dd8.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=f759665f69d8ef3f0d62cb863a3a7ac5 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\nさらに失敗した test の 「Details」 をクリックしてエラーの内容を確認します。 \u003c/p\u003e\n\n\u003cp\u003eすると CircleCI のサイトに遷移して、test の中のどこのStepで失敗したかがわかるように表示されます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/ff59c36db3892620eda4830aed981a04b66dcbeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f36336133336264662d373661352d316561362d323234392d6630613166363736343862642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1241\" alt=\"スクリーンショット 2020-07-30 2.29.33.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F63a33bdf-76a5-1ea6-2249-f0a1f67648bd.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=2842a7a3bc4fa43e71fd62c6e2ddfc74\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/63a33bdf-76a5-1ea6-2249-f0a1f67648bd.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F63a33bdf-76a5-1ea6-2249-f0a1f67648bd.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=64e05fc24eab3012528be87aef051063 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eここまでが一通り試してみた結果になります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"さいごに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eさいごに\u003c/h1\u003e\n\n\u003cp\u003e個人的に初の CI は経験できましたが CD まではできていないので、次は CD を実施したいと思います。\u003c/p\u003e\n\n\u003cp\u003e次の記事↓\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/04b78b946322b8b410f7\" id=\"reference-8f5f9319a477df4b8d05\"\u003eCircleCI から Firebase Hosting にデプロイするまで\u003c/a\u003e\u003c/p\u003e\n","body":"# はじめに\nGit と連携した CI/CD を勉強したく、GitHub と連携できる CircleCI なるサービスがあるとのことなのでそちらを試してみた内容をまとめたいと思います。\n\n※初心者の備忘録になります。\n\n# やったこと\n一旦、適当なリポジトリで CircleCI の使用感を確かめてから、本命のリポジトリで試してみました。\n\n# とりあえず CircleCI を動かしてみる\n\n適当な[GitHubリポジトリ](https://github.com/suguruTakahashi-1234/sample_web_page/tree/circleci-project-setup)で試してみます。\n\n原理は一旦置いておいて、とりあえず試すための手順を説明します。\n\n今回、使用するリポジトリのファイルは以下の通りです（なんでもいいです）。\n\u003cimg width=\"945\" alt=\"a.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/d7bb14be-1df5-3f78-7302-51991d987e36.png\"\u003e\nhttps://app.circleci.com/projects にアクセスすると以下のように連携したGitHubのリポジトリが表示されます。\n今回は sample_web_page リポジトリを用いており、そこの「Set Up Project」を選択します。\n\u003cimg width=\"763\" alt=\"b.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/75811b2f-b403-2e93-a4a1-88cf4d81b794.png\"\u003e\n以下の画面が表示されるのでとりあえず、「Add Config」を選択します。\nこれによって、画面下のデフォルトの内容で設定ファイルが追加されます。\n\u003cimg width=\"768\" alt=\"c.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/d458b619-b073-439c-1448-e7bc50392bcc.png\"\u003e\n「Add Config」を選択すると、いきなり Pipeline が動きます。\n\nよくみると `circleci-project-setup` という見知らぬブランチが表示されていることがわかります。\n「Add Config」すると勝手にこのリモートブランチが作成されるみたいです。\n\nさきほどの設定ファイルもこのリモートブランチに追加されて、その設定ファイルを読みこんで Pipeline が動き出して、それがうまく動作して「SUCCESS」となるそうです。\n\u003cimg width=\"1081\" alt=\"d.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/82f86f09-eaa1-4f3a-de10-f0296c5f7363.png\"\u003e\n`circleci-project-setup` ブランチを確認しにいったら、やはり設定ファイルが作成されていましたね。\nパスは `.circleci/config.yml` です。\n\u003cimg width=\"1249\" alt=\"e.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/fba20734-3dec-b8d1-0cb9-390d96e71d94.png\"\u003e\nとりあえず、動かすことには成功したようです。\n\n# ローカルでの確認\n次にローカルでも CicleCI が動くとのことなので動かしてみたいと思います。\n\nちなみに config.yml の設定ファイルを新規作成、または更新するときは、いちいちPushしてリモートのCicleCIで稼働は確認せずに、一度ローカルで動くことを確認してからPushするのがいいとのことです。（なるほど！）\n\nこの記事を参考にしました。\n[CircleCI 2.0 をlocalで動かす](https://qiita.com/13Slhr77Cgzn892/items/81831234aa605e4b6464)\n\n※前提としてDockerが入っていることになります。\n\n以下のコマンドでインストールできます。\n\n```bash:circleciコマンドのインストール\n$ curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci \u0026\u0026 chmod +x /usr/local/bin/circleci\ncircleci update\n\n（省略）\n\n$ circleci version\n\ncircleci version: 0.1.0\nINFO: We\\'ve built a brand new CLI for CircleCI! Please run 'circleci switch' to upgrade.\nBuild Agent version: 1.0.37604-d5a5647e\nBuilt: 2020-07-28T20:10:21+0000\n\n# アップデートのため 'circleci switch' コマンドを求められたので実行\n$ circleci switch\n（省略）\n\n$ circleci version\n0.1.8764+bb7188b (release)\n```\ncircleci コマンドをインストールできました。\n\nここからは先ほど、とりあえず試してみた `circleci-project-setup` ブランチの `.circleci/config.yml` で試すとどうなるか検証してみます。\n\nまず、`circleci config validate -c .circleci/config.yml` コマンドで validation チェックします。\n\n```bash:validate\n$ circleci config validate -c .circleci/config.yml\nConfig file at .circleci/config.yml is valid.\n```\n\n成功したのでビルドを試してみます。\n\n`circleci build .circleci/config.yml` コマンドを実行するとローカル環境で `.circleci/config.yml` ファイルを読みこんでビルドが走ります。\n\n```bash:ローカル環境での実行\n$ circleci build .circleci/config.yml\n（なぜかエラー出力）\n```\n\nうまくいきませんでした。。。\n成功すると、Dockerが動き出して、リモートのCicleCI上で行っていることが起こります。\n\n調べてみたらどうやら v2.1系には対応していないとのことでした。（[ソース](https://qiita.com/nemotoy/items/7a9b8958a051df1de40f)）\n\n一旦、validation チェックだけのためになってしまいましたが、なにもしないよりはマシなので、これでいきたいと思います。\n\n# 本命のリポジトリでいろいろ試してみる\n\nVue.js で作成したプロジェクトで CicleCI を試してみたいと思います。\n\nVue.js のプロジェクトであれば、npm の各種コマンドやユニットテストも実行可能なので、そちらも CicleCI でビルドを走らせてより開発案件に近い形で実行させます。\n\n操作は[こちらの記事](https://qiita.com/tatane616/items/8624e61473a9957d9a81)を参考にさせていただきました。\n\nリポジトリは[こちら](https://github.com/suguruTakahashi-1234/circle-test)になります。\n\nちなみにこのリポジトリは [vue-cliでプロジェクト作成してあれこれ試してみた（初心者向け）](https://qiita.com/sugurutakahashi12345/items/ed35018025a5732a46a5)で作成したものになります。\n\n## config.yml の設定\n\n本記事では割愛しますが、このあたりの記事が config.yml の書き方の説明がわかりやすかったです。\n\n[GitHub+CircleCI入門](https://qiita.com/tatane616/items/8624e61473a9957d9a81)\n[いまさらだけどCircleCIに入門したので分かりやすくまとめてみた](https://qiita.com/gold-kou/items/4c7e62434af455e977c2)\n\n今回設定した config.yml は以下の通りです。\n\n```yml:config.yml\n\nversion: 2.1\nexecutors:\n  default:\n    working_directory: ~/workspace\n    docker:\n      - image: node:12\n\ncommands:\n  restore_npm:\n    steps:\n      - restore_cache:\n          name: Restore npm dependencies\n          key: npm-{{ checksum \"package.json\" }}\n\n  save_npm:\n    steps:\n      - save_cache:\n          name: Cache npm dependencies\n          key: npm-{{ checksum \"package.json\" }}\n          paths:\n            - ~/workspace/node_modules\n\njobs:\n  setup:\n    executor: default\n    steps:\n      - checkout\n      - run:\n          name: Install dependencies\n          command: npm install\n      - save_npm\n\n  lint:\n    executor: default\n    steps:\n      - checkout\n      - restore_npm\n      - run: \n          name: Lint\n          command: npm run lint\n      - save_npm\n\n  build:\n    executor: default\n    steps:\n      - checkout\n      - restore_npm\n      - run: \n          name: Build\n          command: npm run build\n      - save_npm\n\n  test:\n    executor: default\n    steps:\n      - checkout\n      - restore_npm\n      - run: \n          name: Test\n          command: npm run test:unit\n      - save_npm\n\nworkflows:\n  pull-request:\n    jobs:\n      - setup\n      - lint:\n          requires:\n            - setup\n      - build:\n          requires:\n            - lint\n      - test:\n          requires:\n            - build\n```\nこの設定は以下のようになります。\n\n- executors:\n - docker : Dockerイメージは `node:12` を利用\n - working_directory : ワーキングディレクトリを `~/workspace` に設定（※working_directory で指定したディレクトリが存在しない場合は、自動的に作成されます。） \n\n- commands\n - restore_npm : package.json のハッシュをキーにして node_modules のキャッシュを復元（npm系のお決まりみたいです）\n - save_npm : package.json のハッシュをキーにして node_modules のキャッシュを保存（npm系のお決まりみたいです）\n- jobs\n - setup : `npm install` コマンドを実施する\n - lint : `npm run lint` コマンドを実施する\n - build : `npm run build` コマンドを実施する\n - test : `npm run test:unit` コマンドを実施する\n- workflows\n - pull-request: setup \u003e lint \u003e build \u003e test と jobを順次実行する pull-request と言う名前のワークフロー\n\n本稿でも記述したように一旦こちらのファイルはリモートに上げる前に、ローカルで実行してみます。\n\n```bash:config.yml\n$ circleci config validate -c .circleci/config.yml\nConfig file at .circleci/config.yml is valid.\n\n$ circleci build .circleci/config.yml\n（エラーでした）\n```\nまたもや、うまくいきませんでした。。。\n調べてみたらどうやら restore_npm や save_npm は対応していないとのことです。（[ソース](https://qiita.com/nemotoy/items/7a9b8958a051df1de40f)）\n\nあんまり、ローカルでの動きは保証されてないみたいですね。。。\n結局リモートで確かめるしかないようです。\n\n## CircleCI のビルドのタイミング\nCircleCI が走るタイミングはデフォルトでは、どんなブランチでも Push されたときにビルドが走る設定になっております。\n\nビルドのタイミングは細かく設定することもでき、例えば特定のブランチを選択したり、Push ではなく Pull Request のタイミング、またはcronのようなスケジューリングなども設定することができます。（[やり方](https://udomomo.hatenablog.com/entry/2020/03/08/232353)）\n\nまた、話が若干それますが CircleCI のビルドが成功しないと、Pull Request 時にマージできないようにも設定できます。([やり方](https://qiita.com/gold-kou/items/4c7e62434af455e977c2#%E4%BB%BB%E6%84%8Fci%E3%81%AB%E6%88%90%E5%8A%9F%E3%81%97%E3%81%AA%E3%81%84%E3%81%A8%E3%83%9E%E3%83%BC%E3%82%B8%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E3%81%97%E3%81%9F%E3%81%84github%E5%81%B4%E3%81%AE%E8%A8%AD%E5%AE%9A))\n\n## Pull Requst での CircleCI ビルドの確認\n\n上記のように Pull Request を出さなくても Push のタイミングでビルドが走りますが、今回は実際の運用を想定して検証用のブランチを Push したのちに Pull Request を出して動きを確認してみたいと思います。\n\nPush したのちに Pull Request を出して CircleCI のビルドに成功すると、以下のように Pull Request の画面で `All checks have passed` と表示されます。\n\u003cimg width=\"952\" alt=\"ss.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/f2b1df88-77b2-fa93-5c16-f561fee974f6.png\"\u003e\n\n次に、この状態からあえて、ユニットテストを失敗するようにコミットを入れて、Push した結果が以下になります。\n\n一目瞭然で、ビルドにエラーが発生したことが確認できますね。\n\u003cimg width=\"836\" alt=\"sss.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/9d4642bf-9b21-1ba8-c6ed-f7dd6c482dd8.png\"\u003e\nさらに失敗した test の 「Details」 をクリックしてエラーの内容を確認します。 \n\nすると CircleCI のサイトに遷移して、test の中のどこのStepで失敗したかがわかるように表示されます。\n\u003cimg width=\"1241\" alt=\"スクリーンショット 2020-07-30 2.29.33.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/63a33bdf-76a5-1ea6-2249-f0a1f67648bd.png\"\u003e\n\nここまでが一通り試してみた結果になります。\n\n# さいごに\n個人的に初の CI は経験できましたが CD まではできていないので、次は CD を実施したいと思います。\n\n次の記事↓\n[CircleCI から Firebase Hosting にデプロイするまで](https://qiita.com/sugurutakahashi12345/items/04b78b946322b8b410f7)\n","coediting":false,"comments_count":0,"created_at":"2020-07-29T01:32:26+09:00","group":null,"id":"aeca12d9c5a5526c724c","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"CICD","versions":[]},{"name":"CircleCI2.1","versions":[]}],"title":"CircleCI 試してみた","updated_at":"2020-11-04T01:50:22+09:00","url":"https://qiita.com/ikuraikura/items/aeca12d9c5a5526c724c","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null}]