[{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/afd14d2939a4a26fefa4\" id=\"reference-3e3e3332695d482b5258\"\u003eこちらの記事\u003c/a\u003eの続編になります。\u003c/p\u003e\n\n\u003cp\u003e前回は Serverless Framework を使って hello 関数を Lambda にデプロイしたところまで行いました。\u003cbr\u003e\n（Lambda をただデプロイできれば前編の記事は見なくても全然大丈夫です。）\u003c/p\u003e\n\n\u003cp\u003e今回はそれを API Gateway 経由で API として公開し、さらに DynamoDB との疎通にも試みるものになります。\u003c/p\u003e\n\n\u003cp\u003e以下の Serverless Framework の\u003ca\u003e公式サンプル\u003c/a\u003eを参考にしました。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.serverless.com/examples/aws-node-rest-api\" rel=\"nofollow noopener\" target=\"_blank\"\u003eAWS | REST API Example\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.serverless.com/examples/aws-node-rest-api-with-dynamodb\" rel=\"nofollow noopener\" target=\"_blank\"\u003eAWS | REST API With DynamoDB\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"できたこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A7%E3%81%8D%E3%81%9F%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eできたこと\u003c/h1\u003e\n\n\u003cp\u003e以下の図の環境を Serverless Framework で構築しました。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/b0c99e29c9886cf13df67bd96fcee82b023301f1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f31303230353031612d346539612d613731372d373539362d3237633938363837366532632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F1020501a-4e9a-a717-7596-27c986876e2c.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=e2b029e1ab6f87238a2ba0ab4dba2ae4\" alt=\"png.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/1020501a-4e9a-a717-7596-27c986876e2c.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F1020501a-4e9a-a717-7596-27c986876e2c.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=c1bf796566e43e64503b5ada429929e7 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eソースは \u003ca href=\"https://github.com/suguruTakahashi-1234/sls-hogehoge\" rel=\"nofollow noopener\" target=\"_blank\"\u003eGitHub\u003c/a\u003e に公開したのでそちらを参照してください。\u003cbr\u003e\n公式サンプルの\u003ca href=\"https://www.serverless.com/examples/aws-node-rest-api-with-dynamodb\" rel=\"nofollow noopener\" target=\"_blank\"\u003e「AWS | REST API With DynamoDB」\u003c/a\u003e とほとんど同じように実装しました。\u003c/p\u003e\n\n\u003cp\u003e一気に解説すると大変なので以下の手順に分けて見ていきたいと思います。\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAPI の公開（練習）\u003c/li\u003e\n\u003cli\u003eDynamoDB のテーブル作成\u003c/li\u003e\n\u003cli\u003eAPI の公開と DynamoDB との疎通\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"1-api-の公開練習\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#1-api-%E3%81%AE%E5%85%AC%E9%96%8B%E7%B7%B4%E7%BF%92\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e1. API の公開（練習）\u003c/h1\u003e\n\n\u003cp\u003e以下の公式サンプルを参考にしました。\u003cbr\u003e\n・\u003ca href=\"https://www.serverless.com/examples/aws-node-rest-api\" rel=\"nofollow noopener\" target=\"_blank\"\u003eAWS | REST API Example\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003ehello 関数を GET メソッドの API として公開してみたいと思います。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"serverlessyml-の変更\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#serverlessyml-%E3%81%AE%E5%A4%89%E6%9B%B4\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eserverless.yml の変更\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003eserverless.yml\u003c/code\u003e に https リクエストのイベントを追加します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"diff\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eserverless.yml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e functions:\n   hello:\n     handler: handler.hello\n\u003cspan class=\"gi\"\u003e+    events:\n+      - http:\n+          path: hello\n+          method: get\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"デプロイ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eデプロイ\u003c/h2\u003e\n\n\u003cp\u003e変更後にデプロイしてみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003esls deploy \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e\n（省略）\nServerless: Stack update finished...\nService Information\nservice: hogehoge\nstage: dev\nregion: us-east-1\nstack: hogehoge-dev\nresources: 11\napi keys:\n  None\nendpoints:\n  GET - https://xxxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/hello\nfunctions:\n  hello: hogehoge-dev-hello\nlayers:\n  None\n\nStack Outputs\nHelloLambdaFunctionQualifiedArn: arn:aws:lambda:us-east-1:xxxxxxxxx:function:hogehoge-dev-hello:5\nServiceEndpoint: https://xxxxxxxxx.execute-api.us-east-1.amazonaws.com/dev\nServerlessDeploymentBucketName: hogehoge-dev-serverlessdeploymentbucket-1q2qo8ezm7dcf\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ehttps リクエストのイベントを追加したことによって、こちらのエンドポイントが開放されます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003eendpoints:\n  GET - https://xxxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/hello\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"api-の疎通確認\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#api-%E3%81%AE%E7%96%8E%E9%80%9A%E7%A2%BA%E8%AA%8D\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eAPI の疎通確認\u003c/h2\u003e\n\n\u003cp\u003ecurl で叩いてみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ curl https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/hello\n{\n  \"message\": \"Go Serverless v1.0! Your function executed successfully!\",\n  \"input\": {\n    \"resource\": \"/hello\",\n    （省略）\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eレスポンスが返ってくることが確認できました。API の公開の成功です。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"aws-コンソールの確認\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#aws-%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E3%81%AE%E7%A2%BA%E8%AA%8D\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eAWS コンソールの確認\u003c/h2\u003e\n\n\u003cp\u003eAWS コンソールの API Gateway を確認してみます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/752b18dfacc86727bbe99005bc1cc9f536963b05/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f36633539663162642d663966632d396330652d303339322d3635633161373632663335302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F6c59f1bd-f9fc-9c0e-0392-65c1a762f350.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=c182ea6cf9d564b591c1783e8a2317a4\" alt=\"gateway.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/6c59f1bd-f9fc-9c0e-0392-65c1a762f350.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F6c59f1bd-f9fc-9c0e-0392-65c1a762f350.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=84936e13167ef1f63e3b8a13c030ea7d 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\nこのように API が登録されていることがわかります。\u003cbr\u003e\nちなみに \u003ccode\u003eserverless.yml\u003c/code\u003e に \u003ccode\u003eevents.http.path\u003c/code\u003e を記述しないと API Gateway には何も登録されません。\u003c/p\u003e\n\n\u003cp\u003e以上で API を公開する方法はわかりました。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"2-dynamodb-のテーブル作成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#2-dynamodb-%E3%81%AE%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E4%BD%9C%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e2. DynamoDB のテーブル作成\u003c/h1\u003e\n\n\u003cp\u003e以下の公式サンプルを参考にしました。\u003cbr\u003e\n・ \u003ca href=\"https://www.serverless.com/examples/aws-node-rest-api-with-dynamodb\" rel=\"nofollow noopener\" target=\"_blank\"\u003eAWS | REST API With DynamoDB\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこちらのサンプルの DynamoDB のテーブル作成だけを抜き出したものになります。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"serverlessyml-の変更-1\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#serverlessyml-%E3%81%AE%E5%A4%89%E6%9B%B4-1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eserverless.yml の変更\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"diff\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eserverless.yml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e provider:\n   name: aws\n   runtime: nodejs12.x\n\u003cspan class=\"gi\"\u003e+  environment:\n+    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n+  iamRoleStatements:\n+    - Effect: Allow\n+      Action:\n+        - dynamodb:Query\n+        - dynamodb:Scan\n+        - dynamodb:GetItem\n+        - dynamodb:PutItem\n+        - dynamodb:UpdateItem\n+        - dynamodb:DeleteItem\n+      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\u003c/span\u003e\n（省略）\n\n+resources:\n\u003cspan class=\"gi\"\u003e+  Resources:\n+    TodosDynamoDbTable:\n+      Type: 'AWS::DynamoDB::Table'\n+#     DeletionPolicy: Retain\n+      Properties:\n+        AttributeDefinitions:\n+          -\n+            AttributeName: id\n+            AttributeType: S\n+        KeySchema:\n+          -\n+            AttributeName: id\n+            KeyType: HASH\n+        ProvisionedThroughput:\n+          ReadCapacityUnits: 1\n+          WriteCapacityUnits: 1\n+        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003eprovider\u003c/code\u003e と \u003ccode\u003eresources\u003c/code\u003e に分けて簡単に解説します。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"provider\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#provider\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eprovider\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eprovider\u003c/code\u003e には共通で用いる環境変数の設定や Lambda から他のリソースに関する IAM ロールなどを設定します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yaml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eserverless.yml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eprovider\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eaws\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eruntime\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enodejs12.x\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eenvironment\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eDYNAMODB_TABLE\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e${self:service}-${opt:stage, self:provider.stage}\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eiamRoleStatements\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eEffect\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eAllow\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eAction\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003edynamodb:Query\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003edynamodb:Scan\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003edynamodb:GetItem\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003edynamodb:PutItem\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003edynamodb:UpdateItem\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003edynamodb:DeleteItem\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eResource\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"s\"\u003earn:aws:dynamodb:${opt:region,\u003c/span\u003e\u003cspan class=\"nv\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003eself:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eopt:xxx\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003eコマンドライン引数にアクセスできます。例えばコマンドラインで \u003ccode\u003esls deploy --stage prd\u003c/code\u003e と実行した場合は ${opt:stage} = prd となります。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eself:xxx\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003eこの記法で自身の serverless.yml で定義している key にアクセスできます。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e${opt:xxx, self:xxx}\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eopt:xxx\u003c/code\u003e が定義されていればその値を優先し、もし、定義されていないければ \u003ccode\u003eself:xxx\u003c/code\u003e の値を使用する書き方です。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eenvironment\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003e環境変数を定義します。今回はここにデーブル名を定義します。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eiamRoleStatements\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003e実行時に他の AWS リソースを参照する場合にここで Lambda の IAM ロールを設定します。今回は DynamoDB へのアクセス許可を追加しています。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eResource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003e設定した IAM ロールはここの項目で設定したリソースに対して有効になります。DynamoDB の特定のテーブルに対して有効にする場合このようになります。ちなみに \u003ccode\u003e${self:provider.environment.DYNAMODB_TABLE}\u003c/code\u003e は上記で解説しているように \u003ccode\u003eenvironment\u003c/code\u003e で定義している \u003ccode\u003eDYNAMODB_TABLE\u003c/code\u003e の値になります。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"resources\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#resources\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eresources\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eresources\u003c/code\u003e には AWS リソースの設定事項を記述します。\u003c/p\u003e\n\n\u003cp\u003e今回は DynamoDB のテーブル定義を記述していきます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yaml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eserverless.yml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eresources\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eResources\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eTodosDynamoDbTable\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eType\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'\u003c/span\u003e\u003cspan class=\"s\"\u003eAWS::DynamoDB::Table'\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e#     DeletionPolicy: Retain\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eProperties\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003eAttributeDefinitions\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"pi\"\u003e-\u003c/span\u003e\n            \u003cspan class=\"na\"\u003eAttributeName\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eid\u003c/span\u003e\n            \u003cspan class=\"na\"\u003eAttributeType\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eS\u003c/span\u003e\n        \u003cspan class=\"na\"\u003eKeySchema\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"pi\"\u003e-\u003c/span\u003e\n            \u003cspan class=\"na\"\u003eAttributeName\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eid\u003c/span\u003e\n            \u003cspan class=\"na\"\u003eKeyType\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eHASH\u003c/span\u003e\n        \u003cspan class=\"na\"\u003eProvisionedThroughput\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eReadCapacityUnits\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eWriteCapacityUnits\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n        \u003cspan class=\"na\"\u003eTableName\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e${self:provider.environment.DYNAMODB_TABLE}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eTodosDynamoDbTable\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003eここはリソースの論理 ID です。一意であれば任意の値で大丈夫です。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eDeletionPolicy: Retain\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003eリソースの削除ポリシーの設定ができます。\u003ccode\u003eDelete\u003c/code\u003e（デフォルト）, \u003ccode\u003eRetain\u003c/code\u003e, \u003ccode\u003eSnapshot\u003c/code\u003e のいずれか 3 つの設定が可能です。スタックが削除されてもテーブルを保持する場合は \u003ccode\u003eRetain\u003c/code\u003e を採用しますが、今回はスタックが削除されたタイミング（\u003ccode\u003esls remove -v\u003c/code\u003e）でテーブルも削除してほしいので、何も記述せずにデフォルトの \u003ccode\u003eDelete\u003c/code\u003e 設定とします。（\u003ca href=\"https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e公式ドキュメント\u003c/a\u003e）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eAttributeDefinitions\u003c/code\u003e, \u003ccode\u003eKeySchema\u003c/code\u003e, \u003ccode\u003eProvisionedThroughput\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003eこのあたりの設定は DynamoDB そのものに関わる設定のため今回は説明を省略いたします。ここではテーブルには \u003ccode\u003eid\u003c/code\u003e という項目を設けましたよ、スループット（1 秒あたりの読み込み/書き込み数）は 1 にしますよ、ということぐらいで十分です。（AWS DynamoDB スループットの設定が料金に跳ねるので注意）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eTableName\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003eテーブル名です。今回は provider の environment で \u003ccode\u003eDYNAMODB_TABLE\u003c/code\u003e は \u003ccode\u003e${self:service}-${opt:stage, self:provider.stage}\u003c/code\u003e = hogehoge-dev と設定していることになります。詳しくは provider の設定を確認してください。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"デプロイ-1\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4-1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eデプロイ\u003c/h2\u003e\n\n\u003cp\u003eserverless.yml を更新したらデプロイします。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ sls deploy -v\n（省略）\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"aws-コンソールの確認-1\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#aws-%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E3%81%AE%E7%A2%BA%E8%AA%8D-1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eAWS コンソールの確認\u003c/h2\u003e\n\n\u003cp\u003eテーブルが作成されているはずなので AWS コンソールで DynamoDB のサービスを開いてみます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/b5953769e60e0d453e9da63b164a27cedae6bb36/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f30346264306363312d663237342d633732632d666137372d6636323339323637666436312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F04bd0cc1-f274-c72c-fa77-f6239267fd61.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=cad51cee4e6d027954db08327809b3ae\" alt=\"Dynamo.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/04bd0cc1-f274-c72c-fa77-f6239267fd61.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F04bd0cc1-f274-c72c-fa77-f6239267fd61.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=51ea7377b7e552b8a80864b1d8ed346f 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\nhogehoge-dev テーブルが作成されていることがわかります。\u003c/p\u003e\n\n\u003cp\u003eまた、provider.iamRoleStatements で IAM ロールを設定しているので、CWL も確認してみます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/911fa1c49158578df507d5346bdae6abde10256e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f61393735333635382d623732662d303233352d366335642d3338363739323239306237652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fa9753658-b72f-0235-6c5d-386792290b7e.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=cbc575aa9ad8e15ac4a15b3e54472e07\" alt=\"IAM.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/a9753658-b72f-0235-6c5d-386792290b7e.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fa9753658-b72f-0235-6c5d-386792290b7e.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=71f01fb35dad9f8b1c31951516d7d26f 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\nhogehoge-dev テーブルに読み込み/書き込み権限がついていることがわかります。\u003c/p\u003e\n\n\u003cp\u003eこれで DynamoDB のテーブル作成ができるようになりました。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"3-api-の公開と-dynamodb-との疎通\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#3-api-%E3%81%AE%E5%85%AC%E9%96%8B%E3%81%A8-dynamodb-%E3%81%A8%E3%81%AE%E7%96%8E%E9%80%9A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e3. API の公開と DynamoDB との疎通\u003c/h1\u003e\n\n\u003cp\u003eこちらの環境を構築していきます。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/00fd4a50867cf4e8b3c76e4cbef838519ae3de52/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f34373565323766372d316235322d656166382d613836642d3063656663653135303662642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F475e27f7-1b52-eaf8-a86d-0cefce1506bd.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=11bc6e65cd0348917a5bece9ab3935f2\" alt=\"png.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/475e27f7-1b52-eaf8-a86d-0cefce1506bd.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F475e27f7-1b52-eaf8-a86d-0cefce1506bd.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=8d32e75c03b88c2ddd3c01214eed58d6 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"インターフェース設計\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E8%A8%AD%E8%A8%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eインターフェース設計\u003c/h2\u003e\n\n\u003cp\u003e以下の API を作成したいと思います。\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eやりたいこと\u003c/th\u003e\n\u003cth\u003epath\u003c/th\u003e\n\u003cth\u003emethod\u003c/th\u003e\n\u003cth\u003edata(request body parameter)\u003c/th\u003e\n\u003cth\u003eDynamoDB の操作\u003c/th\u003e\n\u003cth\u003e用意する関数名\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e全件取得\u003c/td\u003e\n\u003ctd\u003e/todos\u003c/td\u003e\n\u003ctd\u003eGET\u003c/td\u003e\n\u003ctd\u003eなし\u003c/td\u003e\n\u003ctd\u003eScan\u003c/td\u003e\n\u003ctd\u003elist\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e単一取得\u003c/td\u003e\n\u003ctd\u003e/todos/{id}\u003c/td\u003e\n\u003ctd\u003eGET\u003c/td\u003e\n\u003ctd\u003eなし\u003c/td\u003e\n\u003ctd\u003eGetItem\u003c/td\u003e\n\u003ctd\u003eget\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e追加\u003c/td\u003e\n\u003ctd\u003e/todos\u003c/td\u003e\n\u003ctd\u003ePOST\u003c/td\u003e\n\u003ctd\u003eあり\u003c/td\u003e\n\u003ctd\u003ePutItem\u003c/td\u003e\n\u003ctd\u003ecreate\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e更新\u003c/td\u003e\n\u003ctd\u003e/todos/{id}\u003c/td\u003e\n\u003ctd\u003ePUT\u003c/td\u003e\n\u003ctd\u003eあり\u003c/td\u003e\n\u003ctd\u003eUpdateItem\u003c/td\u003e\n\u003ctd\u003eupdate\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e削除\u003c/td\u003e\n\u003ctd\u003e/todos/{id}\u003c/td\u003e\n\u003ctd\u003eDELETE\u003c/td\u003e\n\u003ctd\u003eなし\u003c/td\u003e\n\u003ctd\u003eDeleteItem\u003c/td\u003e\n\u003ctd\u003edelete\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"serverlessyml-の変更-2\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#serverlessyml-%E3%81%AE%E5%A4%89%E6%9B%B4-2\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eserverless.yml の変更\u003c/h2\u003e\n\n\u003cp\u003e設計したインターフェースを serverless.yml に反映させます。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003epath\u003c/code\u003e と \u003ccode\u003emethod\u003c/code\u003e をこれから実装するであろう JavaScript ファイルとそこに定義する関数（\u003ccode\u003ehandler\u003c/code\u003e）に結びつけるように書くだけです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"diff\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eserverless.yml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003efunctions:\n\u003c/span\u003e       - http:\n           path: hello\n           method: get\n\u003cspan class=\"gi\"\u003e+\n+  list:\n+    handler: todos/list.list\n+    events:\n+      - http:\n+          path: todos\n+          method: get\n+          cors: true\n+\n+  get:\n+    handler: todos/get.get\n+    events:\n+      - http:\n+          path: todos/{id}\n+          method: get\n+          cors: true\n+\n+  create:\n+    handler: todos/create.create\n+    events:\n+      - http:\n+          path: todos\n+          method: post\n+          cors: true\n+\n+  update:\n+    handler: todos/update.update\n+    events:\n+      - http:\n+          path: todos/{id}\n+          method: put\n+          cors: true\n+\n+  delete:\n+    handler: todos/delete.delete\n+    events:\n+      - http:\n+          path: todos/{id}\n+          method: delete\n+          cors: true\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"必要な-npm-パッケージのインストール\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%BF%85%E8%A6%81%E3%81%AA-npm-%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e必要な npm パッケージのインストール\u003c/h2\u003e\n\n\u003cp\u003eテーブルへのアイテムの追加の処理時にユニークな id を払い出すのに npm の \u003ccode\u003euuid\u003c/code\u003e というパッケージを使うので packeage.json を作成して登録します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ npm init -y\n$ npm install uuid\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"json\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003epackage.json\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"err\"\u003e（省略）\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"dependencies\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"uuid\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"^8.3.1\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"内部処理の実装\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%86%85%E9%83%A8%E5%87%A6%E7%90%86%E3%81%AE%E5%AE%9F%E8%A3%85\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e内部処理の実装\u003c/h2\u003e\n\n\u003cp\u003e詳しい実装は \u003ca href=\"https://github.com/suguruTakahashi-1234/sls-hogehoge\" rel=\"nofollow noopener\" target=\"_blank\"\u003eGitHub\u003c/a\u003e に公開したのでそちらを参照してください。\u003cbr\u003e\n公式サンプルの\u003ca href=\"https://www.serverless.com/examples/aws-node-rest-api-with-dynamodb\" rel=\"nofollow noopener\" target=\"_blank\"\u003e「AWS | REST API With DynamoDB」\u003c/a\u003e と全く同じように実装しました。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"デプロイ-2\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4-2\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eデプロイ\u003c/h2\u003e\n\n\u003cp\u003eデプロイしてみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ sls deploy -v     \n（省略）\nServerless: Stack update finished...\nService Information\nservice: hogehoge\nstage: dev\nregion: us-east-1\nstack: hogehoge-dev\nresources: 41\napi keys:\n  None\nendpoints:\n  GET - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/hello\n  GET - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos\n  GET - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos/{id}\n  POST - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos\n  PUT - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos/{id}\n  DELETE - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos/{id}\nfunctions:\n  hello: hogehoge-dev-hello\n  list: hogehoge-dev-list\n  get: hogehoge-dev-get\n  create: hogehoge-dev-create\n  update: hogehoge-dev-update\n  delete: hogehoge-dev-delete\nlayers:\n  None\n\n（省略）\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e以下のようにインターフェース設計どおりに API が公開されたようです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003eendpoints:\n  GET - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/hello\n  GET - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos\n  GET - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos/{id}\n  POST - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos\n  PUT - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos/{id}\n  DELETE - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos/{id}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"api-の疎通確認-1\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#api-%E3%81%AE%E7%96%8E%E9%80%9A%E7%A2%BA%E8%AA%8D-1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eAPI の疎通確認\u003c/h2\u003e\n\n\u003cp\u003ecurl コマンドを叩いて API を呼び出してもいいのですが、Postman の方がいろいろわかりやすいので、Postman から確認してみます。\u003c/p\u003e\n\n\u003cp\u003eアイテムを POST メソッドを呼んで追加してみます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/4aa25249f5d254dd70622709cfdce7fb09ec97d7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f34396666373431652d313664662d653665622d323136322d3530373134316436363761622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F49ff741e-16df-e6eb-2162-507141d667ab.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=4c0ab5eb3abd11f9ccc4b1f2ae85201c\" alt=\"2 2.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/49ff741e-16df-e6eb-2162-507141d667ab.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F49ff741e-16df-e6eb-2162-507141d667ab.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=c3991c6b24c3b1be198dbb7e42e21e1f 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\nうまく行っているみたいですね。\u003c/p\u003e\n\n\u003cp\u003e今度は GET で Scan してみます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/c5d9c098d5000f858133e5190e4453402fe80527/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f33383330353264362d643465622d333832372d633130352d6533363938366165613730662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F383052d6-d4eb-3827-c105-e36986aea70f.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=5280b5ec1966610dc1ec38d674b5cd29\" alt=\"9 2.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/383052d6-d4eb-3827-c105-e36986aea70f.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F383052d6-d4eb-3827-c105-e36986aea70f.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=2606faacb866903121f3899fdefef189 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\nちゃんと取得できました。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"aws-コンソールの確認-2\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#aws-%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E3%81%AE%E7%A2%BA%E8%AA%8D-2\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eAWS コンソールの確認\u003c/h2\u003e\n\n\u003cp\u003eこの結果を AWS の DynamoDB からも確認してみます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/53dadd3887150c91c93a17fa67d7e5ea72f2cd98/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f35633237383162662d646230342d633039652d336336392d6236333565643239303636642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F5c2781bf-db04-c09e-3c69-b635ed29066d.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=fbe8bc728d9f017bf70b889abd52cf00\" alt=\"10 2.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/5c2781bf-db04-c09e-3c69-b635ed29066d.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F5c2781bf-db04-c09e-3c69-b635ed29066d.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=23cef1ff5e1923083b807f21e095fc42 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\nちゃんと反映されているみたいですね。\u003c/p\u003e\n\n\u003cp\u003eこれでやりたいことができました。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"リソースの削除\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AE%E5%89%8A%E9%99%A4\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eリソースの削除\u003c/h2\u003e\n\n\u003cp\u003eリソースを削除するまでが Serverless Framework です。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ sls remove -v\n（省略）\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e一応、念のため AWS コンソールを見に行って削除されていることは確認した方がいいです。\u003c/p\u003e\n\n\u003cp\u003eリソースを削除してもすぐにデプロイできるので、本当に気軽に削除できますね。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h1\u003e\n\n\u003cp\u003eServerless Framework を使って、以下のことができるようになりました。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAPI の公開\u003c/li\u003e\n\u003cli\u003e環境変数の設定\u003c/li\u003e\n\u003cli\u003eIAM ロールの設定\u003c/li\u003e\n\u003cli\u003eDynamoDB のテーブル定義の設定\u003c/li\u003e\n\u003cli\u003eインターフェースの定義の設定\u003c/li\u003e\n\u003cli\u003eAPI と DynamoDB の疎通\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eその結果、以下の図のような環境を Serverless Framework で構築することができました。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/f5ec6b944cec19c60d7bacfda9ddff3a57a36cd8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f35646163316139372d376661332d323333652d643564612d3162346533383066633662652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F5dac1a97-7fa3-233e-d5da-1b4e380fc6be.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=dac7fcbd91e16dacecda925ae514e330\" alt=\"png.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/5dac1a97-7fa3-233e-d5da-1b4e380fc6be.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F5dac1a97-7fa3-233e-d5da-1b4e380fc6be.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=56513523b4d0aca7d2333d34f5f8ecda 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e【続編はこちら】\u003cbr\u003e\n・\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/c4e0cf5708a792703b9d\" id=\"reference-06daa3bc98342a299f7a\"\u003e【Serverless Framework】カスタムドメイン設定方法（開発環境と本番環境の分離も考慮）\u003c/a\u003e\u003c/p\u003e\n","body":"# はじめに\n[こちらの記事](https://qiita.com/sugurutakahashi12345/items/afd14d2939a4a26fefa4)の続編になります。\n\n前回は Serverless Framework を使って hello 関数を Lambda にデプロイしたところまで行いました。\n（Lambda をただデプロイできれば前編の記事は見なくても全然大丈夫です。）\n\n今回はそれを API Gateway 経由で API として公開し、さらに DynamoDB との疎通にも試みるものになります。\n\n以下の Serverless Framework の[公式サンプル]([https://www.serverless.com/examples/])を参考にしました。\n\n- [AWS | REST API Example](https://www.serverless.com/examples/aws-node-rest-api)\n- [AWS | REST API With DynamoDB](https://www.serverless.com/examples/aws-node-rest-api-with-dynamodb)\n\n\n# できたこと\n\n以下の図の環境を Serverless Framework で構築しました。\n\n![png.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/1020501a-4e9a-a717-7596-27c986876e2c.png)\n\nソースは [GitHub](https://github.com/suguruTakahashi-1234/sls-hogehoge) に公開したのでそちらを参照してください。\n公式サンプルの[「AWS | REST API With DynamoDB」](https://www.serverless.com/examples/aws-node-rest-api-with-dynamodb) とほとんど同じように実装しました。\n\n一気に解説すると大変なので以下の手順に分けて見ていきたいと思います。\n\n1. API の公開（練習）\n2. DynamoDB のテーブル作成\n3. API の公開と DynamoDB との疎通\n\n# 1. API の公開（練習）\n\n以下の公式サンプルを参考にしました。\n・[AWS | REST API Example](https://www.serverless.com/examples/aws-node-rest-api)\n\nhello 関数を GET メソッドの API として公開してみたいと思います。\n\n## serverless.yml の変更\n\n`serverless.yml` に https リクエストのイベントを追加します。\n\n```diff:serverless.yml\n functions:\n   hello:\n     handler: handler.hello\n+    events:\n+      - http:\n+          path: hello\n+          method: get\n```\n\n## デプロイ\n\n変更後にデプロイしてみます。\n\n```shell\n$ sls deploy -v\n（省略）\nServerless: Stack update finished...\nService Information\nservice: hogehoge\nstage: dev\nregion: us-east-1\nstack: hogehoge-dev\nresources: 11\napi keys:\n  None\nendpoints:\n  GET - https://xxxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/hello\nfunctions:\n  hello: hogehoge-dev-hello\nlayers:\n  None\n\nStack Outputs\nHelloLambdaFunctionQualifiedArn: arn:aws:lambda:us-east-1:xxxxxxxxx:function:hogehoge-dev-hello:5\nServiceEndpoint: https://xxxxxxxxx.execute-api.us-east-1.amazonaws.com/dev\nServerlessDeploymentBucketName: hogehoge-dev-serverlessdeploymentbucket-1q2qo8ezm7dcf\n```\n\nhttps リクエストのイベントを追加したことによって、こちらのエンドポイントが開放されます。\n\n```\nendpoints:\n  GET - https://xxxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/hello\n```\n\n## API の疎通確認\n\ncurl で叩いてみます。\n\n```\n$ curl https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/hello\n{\n  \"message\": \"Go Serverless v1.0! Your function executed successfully!\",\n  \"input\": {\n    \"resource\": \"/hello\",\n    （省略）\n  }\n}\n```\n\nレスポンスが返ってくることが確認できました。API の公開の成功です。\n\n## AWS コンソールの確認\n\nAWS コンソールの API Gateway を確認してみます。\n![gateway.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/6c59f1bd-f9fc-9c0e-0392-65c1a762f350.png)\nこのように API が登録されていることがわかります。\nちなみに `serverless.yml` に `events.http.path` を記述しないと API Gateway には何も登録されません。\n\n以上で API を公開する方法はわかりました。\n\n# 2. DynamoDB のテーブル作成\n\n以下の公式サンプルを参考にしました。\n・ [AWS | REST API With DynamoDB](https://www.serverless.com/examples/aws-node-rest-api-with-dynamodb)\n\nこちらのサンプルの DynamoDB のテーブル作成だけを抜き出したものになります。\n\n## serverless.yml の変更\n\n```diff:serverless.yml\n provider:\n   name: aws\n   runtime: nodejs12.x\n+  environment:\n+    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n+  iamRoleStatements:\n+    - Effect: Allow\n+      Action:\n+        - dynamodb:Query\n+        - dynamodb:Scan\n+        - dynamodb:GetItem\n+        - dynamodb:PutItem\n+        - dynamodb:UpdateItem\n+        - dynamodb:DeleteItem\n+      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\n（省略）\n\n+resources:\n+  Resources:\n+    TodosDynamoDbTable:\n+      Type: 'AWS::DynamoDB::Table'\n+#     DeletionPolicy: Retain\n+      Properties:\n+        AttributeDefinitions:\n+          -\n+            AttributeName: id\n+            AttributeType: S\n+        KeySchema:\n+          -\n+            AttributeName: id\n+            KeyType: HASH\n+        ProvisionedThroughput:\n+          ReadCapacityUnits: 1\n+          WriteCapacityUnits: 1\n+        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n```\n\n`provider` と `resources` に分けて簡単に解説します。\n\n### provider\n\n`provider` には共通で用いる環境変数の設定や Lambda から他のリソースに関する IAM ロールなどを設定します。\n\n```yaml:serverless.yml\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n```\n\n- `opt:xxx`\n  - コマンドライン引数にアクセスできます。例えばコマンドラインで `sls deploy --stage prd` と実行した場合は ${opt:stage} = prd となります。\n- `self:xxx`\n  - この記法で自身の serverless.yml で定義している key にアクセスできます。\n- `${opt:xxx, self:xxx}`\n  - `opt:xxx` が定義されていればその値を優先し、もし、定義されていないければ `self:xxx` の値を使用する書き方です。\n- `environment`\n  - 環境変数を定義します。今回はここにデーブル名を定義します。\n- `iamRoleStatements`\n  - 実行時に他の AWS リソースを参照する場合にここで Lambda の IAM ロールを設定します。今回は DynamoDB へのアクセス許可を追加しています。\n- `Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"`\n  - 設定した IAM ロールはここの項目で設定したリソースに対して有効になります。DynamoDB の特定のテーブルに対して有効にする場合このようになります。ちなみに `${self:provider.environment.DYNAMODB_TABLE}` は上記で解説しているように `environment` で定義している `DYNAMODB_TABLE` の値になります。\n\n### resources\n\n`resources` には AWS リソースの設定事項を記述します。\n\n今回は DynamoDB のテーブル定義を記述していきます。\n\n```yaml:serverless.yml\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n#     DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n```\n\n- `TodosDynamoDbTable`\n  - ここはリソースの論理 ID です。一意であれば任意の値で大丈夫です。\n- `DeletionPolicy: Retain`\n  - リソースの削除ポリシーの設定ができます。`Delete`（デフォルト）, `Retain`, `Snapshot` のいずれか 3 つの設定が可能です。スタックが削除されてもテーブルを保持する場合は `Retain` を採用しますが、今回はスタックが削除されたタイミング（`sls remove -v`）でテーブルも削除してほしいので、何も記述せずにデフォルトの `Delete` 設定とします。（[公式ドキュメント](https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html)）\n- `AttributeDefinitions`, `KeySchema`, `ProvisionedThroughput`\n  - このあたりの設定は DynamoDB そのものに関わる設定のため今回は説明を省略いたします。ここではテーブルには `id` という項目を設けましたよ、スループット（1 秒あたりの読み込み/書き込み数）は 1 にしますよ、ということぐらいで十分です。（AWS DynamoDB スループットの設定が料金に跳ねるので注意）\n- `TableName`\n  - テーブル名です。今回は provider の environment で `DYNAMODB_TABLE` は `${self:service}-${opt:stage, self:provider.stage}` = hogehoge-dev と設定していることになります。詳しくは provider の設定を確認してください。\n\n## デプロイ\n\nserverless.yml を更新したらデプロイします。\n\n```\n$ sls deploy -v\n（省略）\n```\n\n## AWS コンソールの確認\n\nテーブルが作成されているはずなので AWS コンソールで DynamoDB のサービスを開いてみます。\n![Dynamo.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/04bd0cc1-f274-c72c-fa77-f6239267fd61.png)\nhogehoge-dev テーブルが作成されていることがわかります。\n\nまた、provider.iamRoleStatements で IAM ロールを設定しているので、CWL も確認してみます。\n![IAM.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/a9753658-b72f-0235-6c5d-386792290b7e.png)\nhogehoge-dev テーブルに読み込み/書き込み権限がついていることがわかります。\n\nこれで DynamoDB のテーブル作成ができるようになりました。\n\n# 3. API の公開と DynamoDB との疎通\n\nこちらの環境を構築していきます。\n\n![png.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/475e27f7-1b52-eaf8-a86d-0cefce1506bd.png)\n\n## インターフェース設計\n\n以下の API を作成したいと思います。\n\n| やりたいこと | path        | method | data(request body parameter) | DynamoDB の操作 | 用意する関数名 | \n| ------------ | ----------- | ------ | ---------- | -------------- | -------------- | \n| 全件取得     | /todos      | GET    | なし       | Scan           | list           | \n| 単一取得     | /todos/{id} | GET    | なし       | GetItem        | get            | \n| 追加         | /todos      | POST   | あり       | PutItem        | create         | \n| 更新         | /todos/{id} | PUT    | あり       | UpdateItem     | update         | \n| 削除         | /todos/{id} | DELETE | なし       | DeleteItem     | delete         | \n\n## serverless.yml の変更\n\n設計したインターフェースを serverless.yml に反映させます。\n\n`path` と `method` をこれから実装するであろう JavaScript ファイルとそこに定義する関数（`handler`）に結びつけるように書くだけです。\n\n```diff:serverless.yml\nfunctions:\n       - http:\n           path: hello\n           method: get\n+\n+  list:\n+    handler: todos/list.list\n+    events:\n+      - http:\n+          path: todos\n+          method: get\n+          cors: true\n+\n+  get:\n+    handler: todos/get.get\n+    events:\n+      - http:\n+          path: todos/{id}\n+          method: get\n+          cors: true\n+\n+  create:\n+    handler: todos/create.create\n+    events:\n+      - http:\n+          path: todos\n+          method: post\n+          cors: true\n+\n+  update:\n+    handler: todos/update.update\n+    events:\n+      - http:\n+          path: todos/{id}\n+          method: put\n+          cors: true\n+\n+  delete:\n+    handler: todos/delete.delete\n+    events:\n+      - http:\n+          path: todos/{id}\n+          method: delete\n+          cors: true\n```\n\n## 必要な npm パッケージのインストール\n\nテーブルへのアイテムの追加の処理時にユニークな id を払い出すのに npm の `uuid` というパッケージを使うので packeage.json を作成して登録します。\n\n```\n$ npm init -y\n$ npm install uuid\n```\n\n```json:package.json\n{\n  （省略）\n  \"dependencies\": {\n    \"uuid\": \"^8.3.1\"\n  }\n}\n```\n\n## 内部処理の実装\n\n詳しい実装は [GitHub](https://github.com/suguruTakahashi-1234/sls-hogehoge) に公開したのでそちらを参照してください。\n公式サンプルの[「AWS | REST API With DynamoDB」](https://www.serverless.com/examples/aws-node-rest-api-with-dynamodb) と全く同じように実装しました。\n\n## デプロイ\n\nデプロイしてみます。\n\n```\n$ sls deploy -v     \n（省略）\nServerless: Stack update finished...\nService Information\nservice: hogehoge\nstage: dev\nregion: us-east-1\nstack: hogehoge-dev\nresources: 41\napi keys:\n  None\nendpoints:\n  GET - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/hello\n  GET - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos\n  GET - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos/{id}\n  POST - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos\n  PUT - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos/{id}\n  DELETE - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos/{id}\nfunctions:\n  hello: hogehoge-dev-hello\n  list: hogehoge-dev-list\n  get: hogehoge-dev-get\n  create: hogehoge-dev-create\n  update: hogehoge-dev-update\n  delete: hogehoge-dev-delete\nlayers:\n  None\n\n（省略）\n```\n\n以下のようにインターフェース設計どおりに API が公開されたようです。\n\n```\nendpoints:\n  GET - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/hello\n  GET - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos\n  GET - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos/{id}\n  POST - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos\n  PUT - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos/{id}\n  DELETE - https://xxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/todos/{id}\n```\n\n## API の疎通確認\n\ncurl コマンドを叩いて API を呼び出してもいいのですが、Postman の方がいろいろわかりやすいので、Postman から確認してみます。\n\nアイテムを POST メソッドを呼んで追加してみます。\n![2 2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/49ff741e-16df-e6eb-2162-507141d667ab.png)\nうまく行っているみたいですね。\n\n今度は GET で Scan してみます。\n![9 2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/383052d6-d4eb-3827-c105-e36986aea70f.png)\nちゃんと取得できました。\n\n## AWS コンソールの確認\n\nこの結果を AWS の DynamoDB からも確認してみます。\n![10 2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/5c2781bf-db04-c09e-3c69-b635ed29066d.png)\nちゃんと反映されているみたいですね。\n\nこれでやりたいことができました。\n\n## リソースの削除\n\nリソースを削除するまでが Serverless Framework です。\n\n```\n$ sls remove -v\n（省略）\n```\n\n一応、念のため AWS コンソールを見に行って削除されていることは確認した方がいいです。\n\nリソースを削除してもすぐにデプロイできるので、本当に気軽に削除できますね。\n\n# まとめ\n\nServerless Framework を使って、以下のことができるようになりました。\n\n- API の公開\n- 環境変数の設定\n- IAM ロールの設定\n- DynamoDB のテーブル定義の設定\n- インターフェースの定義の設定\n- API と DynamoDB の疎通\n\nその結果、以下の図のような環境を Serverless Framework で構築することができました。\n\n![png.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/5dac1a97-7fa3-233e-d5da-1b4e380fc6be.png)\n\n【続編はこちら】\n・[【Serverless Framework】カスタムドメイン設定方法（開発環境と本番環境の分離も考慮）](https://qiita.com/sugurutakahashi12345/items/c4e0cf5708a792703b9d)\n","coediting":false,"comments_count":0,"created_at":"2020-11-11T05:42:57+09:00","group":null,"id":"8eafa9ef6ce26531290a","likes_count":3,"private":false,"reactions_count":0,"tags":[{"name":"AWS","versions":[]},{"name":"DynamoDB","versions":[]},{"name":"lambda","versions":[]},{"name":"APIGateway","versions":[]},{"name":"ServerlessFramework","versions":[]}],"title":"【AWS】【Serverless Framework 入門】 API Gateway + Lambda + DynamoDB サンプル","updated_at":"2021-03-01T15:58:16+09:00","url":"https://qiita.com/ikuraikura/items/8eafa9ef6ce26531290a","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003eタイトルの通りです。\u003cbr\u003e\nServerless Framework のデフォルト時の挙動を確認するだけになります。\u003c/p\u003e\n\n\u003cp\u003eこちらの記事がとても参考になりました。\u003cbr\u003e\n・\u003ca href=\"https://qiita.com/ozaki25/items/883aec0ab4398aa4abbe\" id=\"reference-d647e596680910775ece\"\u003eAWS Lambda入門①(Node編)〜関数をデプロイして動かす〜\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"動作環境\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8B%95%E4%BD%9C%E7%92%B0%E5%A2%83\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e動作環境\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ sls --version\nFramework Core: 2.11.0\nPlugin: 4.1.2\nSDK: 2.3.2\nComponents: 3.3.0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e前提として、Serverless Framework はインストール済み、 \u003ccode\u003eaws configure\u003c/code\u003e も設定済みになります。（\u003ccode\u003eaws configure list\u003c/code\u003e で確認できます。）\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"全体構成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%85%A8%E4%BD%93%E6%A7%8B%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e全体構成\u003c/h1\u003e\n\n\u003cp\u003eデフォルト設定では以下の環境が作成できます。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/102e54b1ff7f201c6ee822a07d72c43200997e37/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f62653038626431622d326533622d346230352d343034392d3935363738356665396265372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fbe08bd1b-2e3b-4b05-4049-956785fe9be7.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=926cf55a4b7f25dbac284e0a0cae0ed4\" alt=\"p3ng.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/be08bd1b-2e3b-4b05-4049-956785fe9be7.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fbe08bd1b-2e3b-4b05-4049-956785fe9be7.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=8f13b1ff875b8ff731df5462eedbd991 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"プロジェクトの作成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eプロジェクトの作成\u003c/h1\u003e\n\n\u003cp\u003eプロジェクトを作成（\u003ccode\u003esls create -t \u0026lt;テンプレート名\u0026gt; -p \u0026lt;作成するディレクトリ名\u0026gt;\u003c/code\u003e）してみます。\u003c/p\u003e\n\n\u003cp\u003eテンプレートは\u003ca href=\"https://www.serverless.com/framework/docs/providers/aws/cli-reference/create#available-templates\" rel=\"nofollow noopener\" target=\"_blank\"\u003e公式サイト\u003c/a\u003eを参照してください。いろいろあります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e# aws-nodejs テンプレートを元に hogehoge ディレクトリにプロジェクトを作成\n$ sls create -t aws-nodejs -p hogehoge\nServerless: Generating boilerplate...\nServerless: Generating boilerplate in \"/Users/sugurutakahashi/git/hogehoge\"\n _______                             __\n|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.\n|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|\n|____   |_____|__|  \\___/|_____|__| |__|_____|_____|_____|\n|   |   |             The Serverless Application Framework\n|       |                           serverless.com, v2.9.0\n -------'\n\nServerless: Successfully generated boilerplate for template: \"aws-nodejs\"\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eディレクトリ構造を確認してみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ cd hogehoge \n$ tree -a\n.\n├── .gitignore\n├── handler.js\n└── serverless.yml\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"作成されたファイルの確認\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%9C%E6%88%90%E3%81%95%E3%82%8C%E3%81%9F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E7%A2%BA%E8%AA%8D\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e作成されたファイルの確認\u003c/h1\u003e\n\n\u003cp\u003e作成されたそれぞれのファイル（\u003ccode\u003e.gitignore\u003c/code\u003e、\u003ccode\u003ehandler.js\u003c/code\u003e、\u003ccode\u003eserverless.yml\u003c/code\u003e）の3つの中身をみてみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e.gitignore\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e# package directories\nnode_modules\njspm_packages\n\n# Serverless directories\n.serverless\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"javascript\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ehandler.js\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003euse strict\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emodule\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eexports\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ehello\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003easync\u003c/span\u003e \u003cspan class=\"nx\"\u003eevent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"na\"\u003estatusCode\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e200\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eJSON\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estringify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"na\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eGo Serverless v1.0! Your function executed successfully!\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"na\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e),\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// Use this code if you don't use the http event with the LAMBDA-PROXY integration\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// return { message: 'Go Serverless v1.0! Your function executed successfully!', event };\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yaml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eserverless.yml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eservice\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ehogehoge\u003c/span\u003e\n\u003cspan class=\"na\"\u003eframeworkVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'\u003c/span\u003e\u003cspan class=\"s\"\u003e2'\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003eprovider\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eaws\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eruntime\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enodejs12.x\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003efunctions\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ehello\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ehandler\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ehandler.hello\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e※ serverless.yml はコメント部分を省略しています。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"関数の実行\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%96%A2%E6%95%B0%E3%81%AE%E5%AE%9F%E8%A1%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e関数の実行\u003c/h1\u003e\n\n\u003cp\u003e初期値で \u003ccode\u003ehello\u003c/code\u003e という関数が用意されているようなので実行してみます。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ローカルでの関数の実行引数なし\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E3%81%AE%E9%96%A2%E6%95%B0%E3%81%AE%E5%AE%9F%E8%A1%8C%E5%BC%95%E6%95%B0%E3%81%AA%E3%81%97\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eローカルでの関数の実行（引数なし）\u003c/h2\u003e\n\n\u003cp\u003e関数はローカルで実行することが可能（\u003ccode\u003esls invoke local --function \u0026lt;関数名\u0026gt;\u003c/code\u003e）です。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ sls invoke local --function hello\n{\n    \"statusCode\": 200,\n    \"body\": \"{\\n  \\\"message\\\": \\\"Go Serverless v1.0! Your function executed successfully!\\\",\\n  \\\"input\\\": \\\"\\\"\\n}\"\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eとりあえず実行されたみたいです。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ローカルでの関数の実行引数あり\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E3%81%AE%E9%96%A2%E6%95%B0%E3%81%AE%E5%AE%9F%E8%A1%8C%E5%BC%95%E6%95%B0%E3%81%82%E3%82%8A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eローカルでの関数の実行（引数あり）\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003ehandler.js\u003c/code\u003e をよくみると \u003ccode\u003ehello\u003c/code\u003e 関数の引数 \u003ccode\u003eevent\u003c/code\u003e がレスポンスの \u003ccode\u003ebody\u003c/code\u003e の \u003ccode\u003einput\u003c/code\u003e の value になるみたいなので、引数を渡してあげます。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003esls invoke local --function \u0026lt;関数名\u0026gt; --data \u0026lt;引数\u0026gt;\u003c/code\u003e で引数を渡しながら関数を実行することができます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ sls invoke local --function hello --data test\n{\n    \"statusCode\": 200,\n    \"body\": \"{\\n  \\\"message\\\": \\\"Go Serverless v1.0! Your function executed successfully!\\\",\\n  \\\"input\\\": \\\"test\\\"\\n}\"\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003einput\u003c/code\u003e の value が引数で渡した \u003ccode\u003etest\u003c/code\u003e になりました。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"リモートへのデプロイ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%81%B8%E3%81%AE%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eリモートへのデプロイ\u003c/h1\u003e\n\n\u003cp\u003eとりあえずデプロイ（\u003ccode\u003esls deploy -v\u003c/code\u003e）してみます。\u003cbr\u003e\n\u003ccode\u003e-v\u003c/code\u003e は \u003ccode\u003e--verbose\u003c/code\u003e の略で詳細が出力されるオプションです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ sls deploy -v\n（省略）\nServerless: Stack update finished...\nService Information\nservice: hogehoge\nstage: dev\nregion: us-east-1\nstack: hogehoge-dev\nresources: 6\napi keys:\n  None\nendpoints:\n  None\nfunctions:\n  hello: hogehoge-dev-hello\nlayers:\n  None\n\nStack Outputs\nHelloLambdaFunctionQualifiedArn: arn:aws:lambda:us-east-1:653595591267:function:hogehoge-dev-hello:3\nServerlessDeploymentBucketName: hogehoge-dev-serverlessdeploymentbucket-1q2qo8ezm7dcf\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eデプロイするとローカルに \u003ccode\u003e.serverless\u003c/code\u003e というディレクトリが作られていました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ tree -a\n.\n├── .gitignore\n├── .serverless\n│   ├── cloudformation-template-create-stack.json\n│   ├── cloudformation-template-update-stack.json\n│   ├── hogehoge.zip\n│   └── serverless-state.json\n├── handler.js\n└── serverless.yml\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eちなみに \u003ccode\u003e.serverless/hogehoge.zip\u003c/code\u003e を解凍したところ、\u003ccode\u003ehandler.js\u003c/code\u003e が入っていました。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eserverless.yml\u003c/code\u003e と \u003ccode\u003ehandler.js\u003c/code\u003e を解釈して、\u003ccode\u003e.serverless\u003c/code\u003e のディレクトリが作成されて、本質的にはこちらのフォルダがデプロイされる感じなのでしょうね。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"リモートにデプロイされた関数の実行\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%81%AB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%95%E3%82%8C%E3%81%9F%E9%96%A2%E6%95%B0%E3%81%AE%E5%AE%9F%E8%A1%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eリモートにデプロイされた関数の実行\u003c/h1\u003e\n\n\u003cp\u003eデプロイされた hello 関数を実行（\u003ccode\u003esls invoke --function \u0026lt;関数名\u0026gt; --data \u0026lt;引数\u0026gt; --region \u0026lt;リージョン\u0026gt;\u003c/code\u003e）してみます。\u003c/p\u003e\n\n\u003cp\u003e今回のリージョンは \u003ccode\u003esls deploy -v\u003c/code\u003e の結果をみると \u003ccode\u003eus-east-1\u003c/code\u003e になっているので、\u003ccode\u003eus-east-1\u003c/code\u003e を指定します。\u003c/p\u003e\n\n\u003cp\u003eちなみにデフォルトでのリージョンは \u003ccode\u003eus-east-1\u003c/code\u003e に設定されています。\u003c/p\u003e\n\n\u003cp\u003eデフォルトから変更する場合は \u003ccode\u003eserverless.yml\u003c/code\u003e で設定します。例えば、東京であれば \u003ccode\u003eap-northeast-1\u003c/code\u003e を指定してください。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ sls invoke --function hello --data hogeeee --region us-east-1\n{\n    \"statusCode\": 200,\n    \"body\": \"{\\n  \\\"message\\\": \\\"Go Serverless v1.0! Your function executed successfully!\\\",\\n  \\\"input\\\": \\\"hogeeee\\\"\\n}\"\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"aws-コンソールの確認\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#aws-%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E3%81%AE%E7%A2%BA%E8%AA%8D\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eAWS コンソールの確認\u003c/h1\u003e\n\n\u003cp\u003eAWS のコンソールを覗いてみます。\u003cbr\u003e\nリモート環境にデプロイが反映されていることを確認します。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eus-east-1\u003c/code\u003e にデプロイされていることがわかっているのでリージョンはバージニア北部を選択します。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"cloudformation\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#cloudformation\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eCloudFormation\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/c6bf497766cbbec2d8a4773c7e5bd5e43ac04477/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f65343965653932332d613366362d653462392d656134612d3963396439646130306238622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fe49ee923-a3f6-e4b9-ea4a-9c9d9da00b8b.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=88758abc0524395b7202a8a174030396\" alt=\"スクリーンショット 2020-11-09 19.46.21.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/e49ee923-a3f6-e4b9-ea4a-9c9d9da00b8b.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fe49ee923-a3f6-e4b9-ea4a-9c9d9da00b8b.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=feda1618961711599ae4f86dc4f7650d 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eCloudFormationに hogehoge プロジェクトのスタックが作成されているのがわかります。\u003c/p\u003e\n\n\u003cp\u003eデフォルトで dev というステージ名になっているのでそれが反映された形になっています。\u003cbr\u003e\nステージ名は自由に設定できるもので \u003ccode\u003eserverless.yml\u003c/code\u003e で設定できます。\u003c/p\u003e\n\n\u003cp\u003eCloudFormationやスタックについては\u003ca href=\"https://dev.classmethod.jp/articles/cloudformation-beginner01/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eこちら\u003c/a\u003eの記事がわかりやすいかと思います。\u003c/p\u003e\n\n\u003cp\u003eスタックは一言で言うとひとつのプロジェクトのかたまりみたいなものです。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"lambda\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#lambda\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLambda\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/ccc4cf55a2166e5ecbd04bfc9b5e27c80f4ea753/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f66653636656430312d613732622d363336612d643962362d6333613539666263643866612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Ffe66ed01-a72b-636a-d9b6-c3a59fbcd8fa.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=4313ef0dd40cd1682ee782a8e22f67ea\" alt=\"スクリーンショット 2020-11-09 19.47.44.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/fe66ed01-a72b-636a-d9b6-c3a59fbcd8fa.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Ffe66ed01-a72b-636a-d9b6-c3a59fbcd8fa.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=e3b05b5f50de702676e80ff233e61997 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eLambda に hogehoge プロジェクトの dev ステージの hello 関数が登録されているのがわかります。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"cloudwatch-logs\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#cloudwatch-logs\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eCloudWatch Logs\u003c/h2\u003e\n\n\u003cp\u003eリモートにデプロイされた関数を実行する（\u003ccode\u003esls invoke --function \u0026lt;関数名\u0026gt; --data \u0026lt;引数\u0026gt; --region \u0026lt;リージョン\u0026gt;\u003c/code\u003e）と CloudWatch Logs に反映されます。\u003c/p\u003e\n\n\u003cp\u003eCloudWatch \u0026gt; CloudWatch Logs \u0026gt; Log groups \u0026gt; /aws/lambda/hogehoge-dev-hello から確認できます。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/2b39051a18fcdc9719d7f1e40bc9a95e5b3a41a1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f34613361663437302d393930352d376331322d633561662d6333633262346639636138332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F4a3af470-9905-7c12-c5af-c3c2b4f9ca83.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=f9526d4813a6b77b3036b02d94c4bca0\" alt=\"スクリーンショット 2020-11-09 20.31.57.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/4a3af470-9905-7c12-c5af-c3c2b4f9ca83.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F4a3af470-9905-7c12-c5af-c3c2b4f9ca83.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=7f5dcf2cc526552f958859e3a692d335 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"デプロイしたリソースの削除\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%97%E3%81%9F%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AE%E5%89%8A%E9%99%A4\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eデプロイしたリソースの削除\u003c/h1\u003e\n\n\u003cp\u003e最後にデプロイしたリソースを削除（\u003ccode\u003esls remove -v\u003c/code\u003e）します。\u003cbr\u003e\nそのまま放っておいて、あとでお金を請求されるのは困るので、記憶があるうちに消します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ sls remove -v\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAWS のコンソールの CloudFormation と Lambda を見に行くとリソースが削除されていることが確認できます。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"おわりに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eおわりに\u003c/h1\u003e\n\n\u003cp\u003e以上になります。\u003c/p\u003e\n\n\u003cp\u003e続編\u003cbr\u003e\n・\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/8eafa9ef6ce26531290a\" id=\"reference-f0cad36ffdc42237f743\"\u003e【Serverless Framework 入門】 API Gateway + Lambda + DynamoDB サンプル\u003c/a\u003e\u003c/p\u003e\n","body":"# はじめに\nタイトルの通りです。\nServerless Framework のデフォルト時の挙動を確認するだけになります。\n\nこちらの記事がとても参考になりました。\n・[AWS Lambda入門①(Node編)〜関数をデプロイして動かす〜](https://qiita.com/ozaki25/items/883aec0ab4398aa4abbe)\n\n# 動作環境\n\n```\n$ sls --version\nFramework Core: 2.11.0\nPlugin: 4.1.2\nSDK: 2.3.2\nComponents: 3.3.0\n```\n\n前提として、Serverless Framework はインストール済み、 `aws configure` も設定済みになります。（`aws configure list` で確認できます。）\n\n# 全体構成\n\nデフォルト設定では以下の環境が作成できます。\n\n![p3ng.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/be08bd1b-2e3b-4b05-4049-956785fe9be7.png)\n\n# プロジェクトの作成\n\nプロジェクトを作成（`sls create -t \u003cテンプレート名\u003e -p \u003c作成するディレクトリ名\u003e`）してみます。\n\nテンプレートは[公式サイト](https://www.serverless.com/framework/docs/providers/aws/cli-reference/create#available-templates)を参照してください。いろいろあります。\n\n```\n# aws-nodejs テンプレートを元に hogehoge ディレクトリにプロジェクトを作成\n$ sls create -t aws-nodejs -p hogehoge\nServerless: Generating boilerplate...\nServerless: Generating boilerplate in \"/Users/sugurutakahashi/git/hogehoge\"\n _______                             __\n|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.\n|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|\n|____   |_____|__|  \\___/|_____|__| |__|_____|_____|_____|\n|   |   |             The Serverless Application Framework\n|       |                           serverless.com, v2.9.0\n -------'\n\nServerless: Successfully generated boilerplate for template: \"aws-nodejs\"\n```\n\nディレクトリ構造を確認してみます。\n\n```\n$ cd hogehoge \n$ tree -a\n.\n├── .gitignore\n├── handler.js\n└── serverless.yml\n```\n\n# 作成されたファイルの確認\n\n作成されたそれぞれのファイル（`.gitignore`、`handler.js`、`serverless.yml`）の3つの中身をみてみます。\n\n```text:.gitignore\n# package directories\nnode_modules\njspm_packages\n\n# Serverless directories\n.serverless\n```\n\n```javascript:handler.js\n'use strict'\n\nmodule.exports.hello = async event =\u003e {\n  return {\n    statusCode: 200,\n    body: JSON.stringify(\n      {\n        message: 'Go Serverless v1.0! Your function executed successfully!',\n        input: event,\n      },\n      null,\n      2\n    ),\n  };\n\n  // Use this code if you don't use the http event with the LAMBDA-PROXY integration\n  // return { message: 'Go Serverless v1.0! Your function executed successfully!', event };\n};\n```\n\n```yaml:serverless.yml\nservice: hogehoge\nframeworkVersion: '2'\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\nfunctions:\n  hello:\n    handler: handler.hello\n```\n※ serverless.yml はコメント部分を省略しています。\n\n# 関数の実行\n\n初期値で `hello` という関数が用意されているようなので実行してみます。\n\n## ローカルでの関数の実行（引数なし）\n\n関数はローカルで実行することが可能（`sls invoke local --function \u003c関数名\u003e`）です。\n\n```\n$ sls invoke local --function hello\n{\n    \"statusCode\": 200,\n    \"body\": \"{\\n  \\\"message\\\": \\\"Go Serverless v1.0! Your function executed successfully!\\\",\\n  \\\"input\\\": \\\"\\\"\\n}\"\n}\n```\nとりあえず実行されたみたいです。\n\n## ローカルでの関数の実行（引数あり）\n\n`handler.js` をよくみると `hello` 関数の引数 `event` がレスポンスの `body` の `input` の value になるみたいなので、引数を渡してあげます。\n\n`sls invoke local --function \u003c関数名\u003e --data \u003c引数\u003e` で引数を渡しながら関数を実行することができます。\n\n```\n$ sls invoke local --function hello --data test\n{\n    \"statusCode\": 200,\n    \"body\": \"{\\n  \\\"message\\\": \\\"Go Serverless v1.0! Your function executed successfully!\\\",\\n  \\\"input\\\": \\\"test\\\"\\n}\"\n}\n```\n`input` の value が引数で渡した `test` になりました。\n\n\n# リモートへのデプロイ\n\nとりあえずデプロイ（`sls deploy -v`）してみます。\n`-v` は `--verbose` の略で詳細が出力されるオプションです。\n\n```\n$ sls deploy -v\n（省略）\nServerless: Stack update finished...\nService Information\nservice: hogehoge\nstage: dev\nregion: us-east-1\nstack: hogehoge-dev\nresources: 6\napi keys:\n  None\nendpoints:\n  None\nfunctions:\n  hello: hogehoge-dev-hello\nlayers:\n  None\n\nStack Outputs\nHelloLambdaFunctionQualifiedArn: arn:aws:lambda:us-east-1:653595591267:function:hogehoge-dev-hello:3\nServerlessDeploymentBucketName: hogehoge-dev-serverlessdeploymentbucket-1q2qo8ezm7dcf\n```\n\nデプロイするとローカルに `.serverless` というディレクトリが作られていました。\n\n```\n$ tree -a\n.\n├── .gitignore\n├── .serverless\n│   ├── cloudformation-template-create-stack.json\n│   ├── cloudformation-template-update-stack.json\n│   ├── hogehoge.zip\n│   └── serverless-state.json\n├── handler.js\n└── serverless.yml\n```\n\nちなみに `.serverless/hogehoge.zip` を解凍したところ、`handler.js` が入っていました。\n\n`serverless.yml` と `handler.js` を解釈して、`.serverless` のディレクトリが作成されて、本質的にはこちらのフォルダがデプロイされる感じなのでしょうね。\n\n# リモートにデプロイされた関数の実行\n\nデプロイされた hello 関数を実行（`sls invoke --function \u003c関数名\u003e --data \u003c引数\u003e --region \u003cリージョン\u003e`）してみます。\n\n今回のリージョンは `sls deploy -v` の結果をみると `us-east-1` になっているので、`us-east-1` を指定します。\n\nちなみにデフォルトでのリージョンは `us-east-1` に設定されています。\n\nデフォルトから変更する場合は `serverless.yml` で設定します。例えば、東京であれば `ap-northeast-1` を指定してください。\n\n```\n$ sls invoke --function hello --data hogeeee --region us-east-1\n{\n    \"statusCode\": 200,\n    \"body\": \"{\\n  \\\"message\\\": \\\"Go Serverless v1.0! Your function executed successfully!\\\",\\n  \\\"input\\\": \\\"hogeeee\\\"\\n}\"\n}\n```\n\n# AWS コンソールの確認\n\nAWS のコンソールを覗いてみます。\nリモート環境にデプロイが反映されていることを確認します。\n\n`us-east-1` にデプロイされていることがわかっているのでリージョンはバージニア北部を選択します。\n\n## CloudFormation\n\n![スクリーンショット 2020-11-09 19.46.21.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/e49ee923-a3f6-e4b9-ea4a-9c9d9da00b8b.png)\n\nCloudFormationに hogehoge プロジェクトのスタックが作成されているのがわかります。\n\nデフォルトで dev というステージ名になっているのでそれが反映された形になっています。\nステージ名は自由に設定できるもので `serverless.yml` で設定できます。\n\nCloudFormationやスタックについては[こちら](https://dev.classmethod.jp/articles/cloudformation-beginner01/)の記事がわかりやすいかと思います。\n\nスタックは一言で言うとひとつのプロジェクトのかたまりみたいなものです。\n\n## Lambda\n\n![スクリーンショット 2020-11-09 19.47.44.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/fe66ed01-a72b-636a-d9b6-c3a59fbcd8fa.png)\n\nLambda に hogehoge プロジェクトの dev ステージの hello 関数が登録されているのがわかります。\n\n## CloudWatch Logs\n\nリモートにデプロイされた関数を実行する（`sls invoke --function \u003c関数名\u003e --data \u003c引数\u003e --region \u003cリージョン\u003e`）と CloudWatch Logs に反映されます。\n\nCloudWatch \u003e CloudWatch Logs \u003e Log groups \u003e /aws/lambda/hogehoge-dev-hello から確認できます。\n\n![スクリーンショット 2020-11-09 20.31.57.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/4a3af470-9905-7c12-c5af-c3c2b4f9ca83.png)\n\n\n# デプロイしたリソースの削除\n\n最後にデプロイしたリソースを削除（`sls remove -v`）します。\nそのまま放っておいて、あとでお金を請求されるのは困るので、記憶があるうちに消します。\n\n```\n$ sls remove -v\n```\n\nAWS のコンソールの CloudFormation と Lambda を見に行くとリソースが削除されていることが確認できます。\n\n# おわりに\n以上になります。\n\n続編\n・[【Serverless Framework 入門】 API Gateway + Lambda + DynamoDB サンプル](https://qiita.com/sugurutakahashi12345/items/8eafa9ef6ce26531290a)\n","coediting":false,"comments_count":0,"created_at":"2020-11-09T20:36:15+09:00","group":null,"id":"afd14d2939a4a26fefa4","likes_count":3,"private":false,"reactions_count":0,"tags":[{"name":"AWS","versions":[]},{"name":"ServerlessFramework","versions":[]}],"title":"【AWS】【Serverless Framework 入門】 Serverless Framework をデフォルト設定のままデプロイして挙動を確認してみた","updated_at":"2021-03-01T15:58:22+09:00","url":"https://qiita.com/ikuraikura/items/afd14d2939a4a26fefa4","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e今後、新規に開発する iOS アプリで対応すべき OS のバージョンを検討する機会があったので、その結果を共有します。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"結論\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E8%AB%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結論\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e現在の最新の OS バージョンとそれの一つ前のメジャーバージョンを対応までを対応するのがコスパがいい（カバー率 90 ％ 以上が見込まれる）\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eiOS 13,14 以上を対象とするアプリであったとしても iPhone SE（第一世代） の考慮は必要\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSwiftUI を採用するならば iOS 13 以上が必要（使う機能によっては iOS 14 以上が必要\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"検討するのに用いた情報\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%A4%9C%E8%A8%8E%E3%81%99%E3%82%8B%E3%81%AE%E3%81%AB%E7%94%A8%E3%81%84%E3%81%9F%E6%83%85%E5%A0%B1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e検討するのに用いた情報\u003c/h1\u003e\n\n\u003cp\u003e以下の情報を用いました。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eiOS/Android のシェア率\u003c/li\u003e\n\u003cli\u003eiOS（Android）の中 OS のシェア率\u003c/li\u003e\n\u003cli\u003eiOS（Android）の中のデバイスのシェア率\u003c/li\u003e\n\u003cli\u003eデバイスと対応する iOS の対応表\u003c/li\u003e\n\u003cli\u003eデバイスと解像度の対応表\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eそれぞれの情報の引用元は、以下の表の参照先のサイトになります。\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e必要な情報\u003c/th\u003e\n\u003cth\u003e参照先\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eiOS/Android のシェア率\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"https://gs.statcounter.com/os-market-share/mobile/japan/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eStatCounter\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eiOS（Android）の中 OS のシェア率\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"http://smatabinfo.jp/os/ios/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eスマタブ info\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eiOS（Android）の中のデバイスのシェア率\u003c/td\u003e\n\u003ctd\u003e\n\u003ca href=\"https://deviceatlas.com/blog/most-popular-smartphones#japan\" rel=\"nofollow noopener\" target=\"_blank\"\u003eDeviceAtlas\u003c/a\u003e、\u003ca href=\"https://mixpanel.com/trends/#report/iphone_models/from_date:-365,report_unit:month,to_date:0\" rel=\"nofollow noopener\" target=\"_blank\"\u003emixpanel\u003c/a\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eデバイスと対応する iOS の対応表\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"https://qiita.com/takkyun/items/814aa45beee422a5f0c6\" id=\"reference-b7ed594590c75a107f3e\"\u003eiOSデバイス一覧表\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eデバイスと解像度の対応表\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"https://qiita.com/takkyun/items/814aa45beee422a5f0c6\"\u003eiOSデバイス一覧表\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e※ この記事を書いた後に発見したのですが、\u003ca href=\"https://mixpanel.com/trends/#report/iphone_models/from_date:-365,report_unit:month,to_date:0\" rel=\"nofollow noopener\" target=\"_blank\"\u003emixpanel\u003c/a\u003e というサイトではかなり詳しく、OS、デバイスのシェア率について調査されていました。\u003c/p\u003e\n\n\u003cp\u003eまた、存在するデータがあるのかはわかりませんが、作るアプリによっては以下のような情報もあると対応するOS/デバイスの選定に役に立つかもしれません。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e年代別のOS/デバイスのシェア率\u003c/li\u003e\n\u003cli\u003e男女別のOS/デバイスのシェア率\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"デバイスと対応する-ios-の対応表\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%81%A8%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B-ios-%E3%81%AE%E5%AF%BE%E5%BF%9C%E8%A1%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eデバイスと対応する iOS の対応表\u003c/h1\u003e\n\n\u003cp\u003eあとで考察するのに使用します。\u003c/p\u003e\n\n\u003cp\u003e【参照元】\u003cbr\u003e\n・\u003ca href=\"https://qiita.com/takkyun/items/814aa45beee422a5f0c6\"\u003eiOSデバイス一覧表\u003c/a\u003e\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e対応可能な iOS\u003c/th\u003e\n\u003cth\u003eデバイス\u003c/th\u003e\n\u003cth\u003e備考\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e〜10\u003c/td\u003e\n\u003ctd\u003eiPhone 5、iPhone 5c\u003c/td\u003e\n\u003ctd\u003e-\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e〜11,12\u003c/td\u003e\n\u003ctd\u003eiPhone 5s、iPhone 6、iPhone 6 Plus\u003c/td\u003e\n\u003ctd\u003eiOS 11 に対応しているデバイスはすべて iOS 12 に対応している\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e〜13,14\u003c/td\u003e\n\u003ctd\u003e\n\u003cstrong\u003eiPhone SE（第一世代）\u003c/strong\u003e、iPhone 6s 以降のデバイス\u003c/td\u003e\n\u003ctd\u003eiOS 13 に対応しているデバイスはすべて iOS 14 に対応している\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\u003cstrong\u003e【悲報】iPhone SE（第一世代）が iOS 14 に対応している件\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"解像度-と-デバイス-の対応表\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A7%A3%E5%83%8F%E5%BA%A6-%E3%81%A8-%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9-%E3%81%AE%E5%AF%BE%E5%BF%9C%E8%A1%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e解像度 と デバイス の対応表\u003c/h1\u003e\n\n\u003cp\u003eあとで考察するのに使用します。\u003c/p\u003e\n\n\u003cp\u003e【参照元】\u003cbr\u003e\n・\u003ca href=\"https://qiita.com/takkyun/items/814aa45beee422a5f0c6\"\u003eiOSデバイス一覧表\u003c/a\u003e\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e解像度\u003c/th\u003e\n\u003cth\u003eデバイス\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e640 x 1136\u003c/td\u003e\n\u003ctd\u003eiPhone SE（第一世代）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e750 x 1334\u003c/td\u003e\n\u003ctd\u003eiPhone 6s、iPhone 7、iPhone 8、iPhone SE (第二世代)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e828 x 1792\u003c/td\u003e\n\u003ctd\u003eiPhone XR、iPhone 11\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e1080×2340\u003c/td\u003e\n\u003ctd\u003eiPhone 12 mini\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e1125 x 2436\u003c/td\u003e\n\u003ctd\u003eiPhone X、iPhone XS、iPhone 11 Pro\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e1170 x 2532\u003c/td\u003e\n\u003ctd\u003eiPhone 12、iPhone 12 Pro\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e1242 x 2208\u003c/td\u003e\n\u003ctd\u003eiPhone 6s Plus、iPhone 7 Plus、iPhone 8 Plus\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e1242 x 2688\u003c/td\u003e\n\u003ctd\u003eiPhone XS Max、iPhone 11 Pro Max\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e1284 x 2778\u003c/td\u003e\n\u003ctd\u003eiPhone 12 Pro Max\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"どのバージョンまで対応するべき\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A9%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%BE%E3%81%A7%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B%E3%81%B9%E3%81%8D\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eどのバージョンまで対応するべき？\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"すでにリリースされているアプリの調査\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%99%E3%81%A7%E3%81%AB%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E8%AA%BF%E6%9F%BB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eすでにリリースされているアプリの調査\u003c/h2\u003e\n\n\u003cp\u003eまず、2020年11月現在、リリースされているアプリの対応しているアプリを調べてみました。\u003c/p\u003e\n\n\u003cp\u003eiPhone で「App Store」\u0026gt;「適当なアプリ選択」\u0026gt;「情報」\u0026gt;「互換性 - この iPhone に対応」から対応している OS を確認できます。\u003c/p\u003e\n\n\u003cp\u003e（YouTube アプリの例）\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/43e2732b1baa4f2161b59cf08df7d996f8183539/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f63343965343066342d633065332d363237382d666238632d6233376538663365643161342e6a706567\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fc49e40f4-c0e3-6278-fb8c-b37e8f3ed1a4.jpeg?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=794349daaaa1aac7892f327a507db083\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/c49e40f4-c0e3-6278-fb8c-b37e8f3ed1a4.jpeg\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fc49e40f4-c0e3-6278-fb8c-b37e8f3ed1a4.jpeg?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=df9c1d1d0bbca45510779826d52546af 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e10 分ほど個人的によく使っているアプリの対応されているバージョンを調べてみた結果が以下になります。（2020年11月調べ）\u003cbr\u003e\n※感覚のデータになります\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eバージョン\u003c/th\u003e\n\u003cth\u003e対応されているアプリ\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eiOS 9 以上対応\u003c/td\u003e\n\u003ctd\u003e超安定思考のアプリ（金融系）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eiOS 10 以上対応\u003c/td\u003e\n\u003ctd\u003e安定思考のアプリ（クーポン系）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eiOS 11 以上対応\u003c/td\u003e\n\u003ctd\u003e普通のアプリ（一般系）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eiOS 12 以上対応\u003c/td\u003e\n\u003ctd\u003e攻めてるアプリ（SNS系）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eiOS 13 以上対応\u003c/td\u003e\n\u003ctd\u003e見つかりませんでした。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e数の多い順にならべると \u003ccode\u003eiOS 11 以上対応\u003c/code\u003e \u0026gt; \u003ccode\u003eiOS 10 以上対応\u003c/code\u003e \u0026gt; \u003ccode\u003eiOS 12 以上対応\u003c/code\u003e = \u003ccode\u003eiOS 9 以上対応\u003c/code\u003e という感覚でした。\u003c/p\u003e\n\n\u003cp\u003e初期リリースの時期によるのでしょうけど、思ったより \u003ccode\u003eiOS 12 以上対応\u003c/code\u003e というアプリはリリースされていないみたいです。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"iphone-se-第一世代-について\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#iphone-se-%E7%AC%AC%E4%B8%80%E4%B8%96%E4%BB%A3-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eiPhone SE （第一世代） について\u003c/h2\u003e\n\n\u003cp\u003eiPhone SE（第一世代）が iOS 13,14 まで対応していることが確定しており、iOS 13,14 対応のアプリでは解像度 640 x 1136 のデバイスサイズでの動きを考慮しなければなりません。\u003c/p\u003e\n\n\u003cp\u003e解像度の低い端末では1行に入りきる文字数が少ないため、iPhone SE（第一世代） だけで文字が入りきらない場合、(1) 文末を「...」にする or (2) 改行をする or (3) 文字サイズを変更する など、開発時に考慮が必要になります。\u003c/p\u003e\n\n\u003cp\u003eちなみに解像度 640 x 1136 で iOS 13,14 に対応しているのは iPhone SE（第一世代）のみです。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://deviceatlas.com/blog/most-popular-smartphones#japan\" rel=\"nofollow noopener\" target=\"_blank\"\u003eDeviceAtlas調べ\u003c/a\u003eでは日本での 2019 年の iPhone SE（第一世代）のシェア率は 3.54%（前年比 -0.73%）であり、2020 年ではこれよりも低いことが予想されます。\u003cbr\u003e\n（※ このシェア率は Android 含めた全端末のシェア率）\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eもし、今後、iPhone SE（第一世代）のシェア率が極端に低くなれば、iOS 14 対応のアプリでも iPhone SE（第一世代）での挙動をどこまで保証するのかは検討する必要があると思います。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eiPhone SE（第一世代）のデバイスシェア率に今後も注意が必要ですね。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"今後新規に開発するアプリで対応すべきバージョンは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BB%8A%E5%BE%8C%E6%96%B0%E8%A6%8F%E3%81%AB%E9%96%8B%E7%99%BA%E3%81%99%E3%82%8B%E3%82%A2%E3%83%97%E3%83%AA%E3%81%A7%E5%AF%BE%E5%BF%9C%E3%81%99%E3%81%B9%E3%81%8D%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e今後、新規に開発するアプリで対応すべきバージョンは？\u003c/h2\u003e\n\n\u003cp\u003e結局のところ、新規に開発するアプリで対応すべきバージョンは多くの場合では目指すべきカバー率に依存すると思われます。\u003c/p\u003e\n\n\u003cp\u003eおおよそ、目指すべきカバー率と OS のバージョンの対応は以下のようになります。\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eカバー率\u003c/th\u003e\n\u003cth\u003e対応する OS バージョン\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e90％以上\u003c/td\u003e\n\u003ctd\u003e1つ前のメジャーバージョン以上\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e95％以上\u003c/td\u003e\n\u003ctd\u003e2つ前のメジャーバージョン以上\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e99％以上\u003c/td\u003e\n\u003ctd\u003eそれ以上\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e例えば iOS14 がリリース（2020年9月17日）されて約 2 ヶ月立った時点で、iOS 13 以上に対応すれば約 93 %、iOS 12 以上では約 98 % のユーザーに対応できます。(\u003ca href=\"http://smatabinfo.jp/os/ios/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2020/09/30 時点でのスマタブ info 調べ\u003c/a\u003e )\u003c/p\u003e\n\n\u003cp\u003eちなみに、iOS 11 以上対応しても救えるユーザーは 1.2% ほどしかいないようです。\u003c/p\u003e\n\n\u003cp\u003eまた、iOS も1年に1度のペースでアップデートするので、早めに低いバージョンの OS を切っておかないと、どんどん開発対象の OS が増えていき、開発・運用の負荷がどんどん増えていきます。\u003c/p\u003e\n\n\u003cp\u003e古い OS 依存のバグの対応や、古い OS のテスト用の端末の維持や、古い OS でのテストのコストは馬鹿にならないです。\u003c/p\u003e\n\n\u003cp\u003e極端なイメージですが、対応する OS バージョンが1つ増えると、テストと開発のメンバーがそれぞれ 0.5〜1 人増えるイメージです。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eもろもろ考えると、現在の最新のOSバージョンとそれの一つ前のメジャーバージョンを対応するのがコスパがいいのではないかと思います。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e意外にも、日本のユーザーは頻繁に iOS のアップデートをしているみたいです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"技術的な観点\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%8A%80%E8%A1%93%E7%9A%84%E3%81%AA%E8%A6%B3%E7%82%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e技術的な観点\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003eiOS 13 以上対応であれば SwiftUI というあたらしい iOS アプリ開発のフレームワークが使用できます。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e従来の UIKit でのフレームワークより少ないコード量でアプリを開発できるため、iOS 13 以上を対象としたアプリであるならば、SwiftUI を採用することをお勧めします。\u003c/p\u003e\n\n\u003cp\u003eまた、iOS、SwiftUI も日々進化しており、グリッドデザインを簡単に実装できる LazyVGrid / LazyHGrid が新たに追加され、それは iOS 14 以上でしか使えなかったりするので、アプリのコアとなる機能がその OS のバージョンでの SwiftUI で実装できるかどうかはあらかじめ調べた方がいいかもしれません。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e現在の最新の OS バージョンとそれの一つ前のメジャーバージョンを対応までを対応するのがコスパがいい\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eiOS 13,14 以上を対象とするアプリであったとしても iPhone SE（第一世代） の考慮は必要\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSwiftUI を採用するならば iOS 13 以上\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","body":"# はじめに\n\n今後、新規に開発する iOS アプリで対応すべき OS のバージョンを検討する機会があったので、その結果を共有します。\n\n\n# 結論\n\n- **現在の最新の OS バージョンとそれの一つ前のメジャーバージョンを対応までを対応するのがコスパがいい（カバー率 90 ％ 以上が見込まれる）**\n- **iOS 13,14 以上を対象とするアプリであったとしても iPhone SE（第一世代） の考慮は必要**\n- **SwiftUI を採用するならば iOS 13 以上が必要（使う機能によっては iOS 14 以上が必要**\n\n\n# 検討するのに用いた情報\n\n以下の情報を用いました。\n\n- iOS/Android のシェア率\n- iOS（Android）の中 OS のシェア率\n- iOS（Android）の中のデバイスのシェア率\n- デバイスと対応する iOS の対応表\n- デバイスと解像度の対応表\n\nそれぞれの情報の引用元は、以下の表の参照先のサイトになります。\n\n| 必要な情報                             | 参照先                                                                     | \n| -------------------------------------- | -------------------------------------------------------------------------- | \n| iOS/Android のシェア率                 | [StatCounter](https://gs.statcounter.com/os-market-share/mobile/japan/)    | \n| iOS（Android）の中 OS のシェア率       | [スマタブ info](http://smatabinfo.jp/os/ios/)                              | \n| iOS（Android）の中のデバイスのシェア率 | [DeviceAtlas](https://deviceatlas.com/blog/most-popular-smartphones#japan)、[mixpanel](https://mixpanel.com/trends/#report/iphone_models/from_date:-365,report_unit:month,to_date:0)| \n| デバイスと対応する iOS の対応表        | [iOSデバイス一覧表](https://qiita.com/takkyun/items/814aa45beee422a5f0c6)  | \n| デバイスと解像度の対応表               | [iOSデバイス一覧表](https://qiita.com/takkyun/items/814aa45beee422a5f0c6)  | \n\n※ この記事を書いた後に発見したのですが、[mixpanel](https://mixpanel.com/trends/#report/iphone_models/from_date:-365,report_unit:month,to_date:0) というサイトではかなり詳しく、OS、デバイスのシェア率について調査されていました。\n\nまた、存在するデータがあるのかはわかりませんが、作るアプリによっては以下のような情報もあると対応するOS/デバイスの選定に役に立つかもしれません。\n\n- 年代別のOS/デバイスのシェア率\n- 男女別のOS/デバイスのシェア率\n\n# デバイスと対応する iOS の対応表\n\nあとで考察するのに使用します。\n\n【参照元】\n・[iOSデバイス一覧表](https://qiita.com/takkyun/items/814aa45beee422a5f0c6)\n\n| 対応可能な iOS | デバイス                                        | 備考                                                        | \n| -------- | ----------------------------------------------- | ----------------------------------------------------------- | \n| 〜10     | iPhone 5、iPhone 5c                             | -                                                           | \n| 〜11,12  | iPhone 5s、iPhone 6、iPhone 6 Plus              | iOS 11 に対応しているデバイスはすべて iOS 12 に対応している | \n| 〜13,14  | **iPhone SE（第一世代）**、iPhone 6s 以降のデバイス | iOS 13 に対応しているデバイスはすべて iOS 14 に対応している | \n\n**【悲報】iPhone SE（第一世代）が iOS 14 に対応している件**\n\n# 解像度 と デバイス の対応表\n\nあとで考察するのに使用します。\n\n【参照元】\n・[iOSデバイス一覧表](https://qiita.com/takkyun/items/814aa45beee422a5f0c6)\n\n| 解像度      | デバイス                                            | \n| ----------- | --------------------------------------------------- | \n| 640 x 1136  | iPhone SE（第一世代）                               | \n| 750 x 1334  | iPhone 6s、iPhone 7、iPhone 8、iPhone SE (第二世代) | \n| 828 x 1792  | iPhone XR、iPhone 11                                | \n| 1080×2340   | iPhone 12 mini                                      | \n| 1125 x 2436 | iPhone X、iPhone XS、iPhone 11 Pro                  | \n| 1170 x 2532 | iPhone 12、iPhone 12 Pro                            | \n| 1242 x 2208 | iPhone 6s Plus、iPhone 7 Plus、iPhone 8 Plus        | \n| 1242 x 2688 | iPhone XS Max、iPhone 11 Pro Max                    | \n| 1284 x 2778 | iPhone 12 Pro Max                                   | \n\n\n# どのバージョンまで対応するべき？\n\n## すでにリリースされているアプリの調査\n\nまず、2020年11月現在、リリースされているアプリの対応しているアプリを調べてみました。\n\niPhone で「App Store」\u003e「適当なアプリ選択」\u003e「情報」\u003e「互換性 - この iPhone に対応」から対応している OS を確認できます。\n\n（YouTube アプリの例）\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/c49e40f4-c0e3-6278-fb8c-b37e8f3ed1a4.jpeg width=40%\u003e\n\n10 分ほど個人的によく使っているアプリの対応されているバージョンを調べてみた結果が以下になります。（2020年11月調べ）\n※感覚のデータになります\n\n| バージョン      | 対応されているアプリ           | \n| --------------- | ------------------------------ | \n| iOS 9 以上対応  | 超安定思考のアプリ（金融系）   | \n| iOS 10 以上対応 | 安定思考のアプリ（クーポン系） | \n| iOS 11 以上対応 | 普通のアプリ（一般系）         | \n| iOS 12 以上対応 | 攻めてるアプリ（SNS系）        | \n| iOS 13 以上対応 | 見つかりませんでした。         | \n\n数の多い順にならべると `iOS 11 以上対応` \u003e `iOS 10 以上対応` \u003e `iOS 12 以上対応` = `iOS 9 以上対応` という感覚でした。\n\n初期リリースの時期によるのでしょうけど、思ったより `iOS 12 以上対応` というアプリはリリースされていないみたいです。\n\n\n## iPhone SE （第一世代） について\n\niPhone SE（第一世代）が iOS 13,14 まで対応していることが確定しており、iOS 13,14 対応のアプリでは解像度 640 x 1136 のデバイスサイズでの動きを考慮しなければなりません。\n\n解像度の低い端末では1行に入りきる文字数が少ないため、iPhone SE（第一世代） だけで文字が入りきらない場合、(1) 文末を「...」にする or (2) 改行をする or (3) 文字サイズを変更する など、開発時に考慮が必要になります。\n\nちなみに解像度 640 x 1136 で iOS 13,14 に対応しているのは iPhone SE（第一世代）のみです。\n\n[DeviceAtlas調べ](https://deviceatlas.com/blog/most-popular-smartphones#japan)では日本での 2019 年の iPhone SE（第一世代）のシェア率は 3.54%（前年比 -0.73%）であり、2020 年ではこれよりも低いことが予想されます。\n（※ このシェア率は Android 含めた全端末のシェア率）\n\n**もし、今後、iPhone SE（第一世代）のシェア率が極端に低くなれば、iOS 14 対応のアプリでも iPhone SE（第一世代）での挙動をどこまで保証するのかは検討する必要があると思います。**\n\niPhone SE（第一世代）のデバイスシェア率に今後も注意が必要ですね。\n\n## 今後、新規に開発するアプリで対応すべきバージョンは？\n\n結局のところ、新規に開発するアプリで対応すべきバージョンは多くの場合では目指すべきカバー率に依存すると思われます。\n\nおおよそ、目指すべきカバー率と OS のバージョンの対応は以下のようになります。\n\n\n| カバー率 | 対応する OS バージョン         | \n| -------- | ------------------------------ | \n| 90％以上 | 1つ前のメジャーバージョン以上 | \n| 95％以上 | 2つ前のメジャーバージョン以上 | \n| 99％以上 | それ以上                       | \n\n例えば iOS14 がリリース（2020年9月17日）されて約 2 ヶ月立った時点で、iOS 13 以上に対応すれば約 93 %、iOS 12 以上では約 98 % のユーザーに対応できます。([2020/09/30 時点でのスマタブ info 調べ](http://smatabinfo.jp/os/ios/) )\n\nちなみに、iOS 11 以上対応しても救えるユーザーは 1.2% ほどしかいないようです。\n\nまた、iOS も1年に1度のペースでアップデートするので、早めに低いバージョンの OS を切っておかないと、どんどん開発対象の OS が増えていき、開発・運用の負荷がどんどん増えていきます。\n\n古い OS 依存のバグの対応や、古い OS のテスト用の端末の維持や、古い OS でのテストのコストは馬鹿にならないです。\n\n極端なイメージですが、対応する OS バージョンが1つ増えると、テストと開発のメンバーがそれぞれ 0.5〜1 人増えるイメージです。\n\n**もろもろ考えると、現在の最新のOSバージョンとそれの一つ前のメジャーバージョンを対応するのがコスパがいいのではないかと思います。**\n\n意外にも、日本のユーザーは頻繁に iOS のアップデートをしているみたいです。\n\n# 技術的な観点\n\n**iOS 13 以上対応であれば SwiftUI というあたらしい iOS アプリ開発のフレームワークが使用できます。**\n\n従来の UIKit でのフレームワークより少ないコード量でアプリを開発できるため、iOS 13 以上を対象としたアプリであるならば、SwiftUI を採用することをお勧めします。\n\nまた、iOS、SwiftUI も日々進化しており、グリッドデザインを簡単に実装できる LazyVGrid / LazyHGrid が新たに追加され、それは iOS 14 以上でしか使えなかったりするので、アプリのコアとなる機能がその OS のバージョンでの SwiftUI で実装できるかどうかはあらかじめ調べた方がいいかもしれません。\n\n# まとめ\n\n- **現在の最新の OS バージョンとそれの一つ前のメジャーバージョンを対応までを対応するのがコスパがいい**\n- **iOS 13,14 以上を対象とするアプリであったとしても iPhone SE（第一世代） の考慮は必要**\n- **SwiftUI を採用するならば iOS 13 以上**\n","coediting":false,"comments_count":0,"created_at":"2020-11-08T15:50:29+09:00","group":null,"id":"8e363b74a6b1e22c8778","likes_count":9,"private":false,"reactions_count":0,"tags":[{"name":"iOS","versions":[]}],"title":"新規に開発する iOS アプリで対応すべき OS のバージョンを検討した結果","updated_at":"2021-02-12T15:25:18+09:00","url":"https://qiita.com/ikuraikura/items/8e363b74a6b1e22c8778","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://gs.statcounter.com/os-market-share/mobile/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eStatCounter\u003c/a\u003e\u003c/strong\u003e\u003cbr\u003e\nTracks the Usage Share of Search Engines, Browsers and Operating Systems including Mobile from over 10 billion monthly page views.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eStatCounter は モバイルを含む、検索エンジン、ブラウザ、OSの使用シェアの統計データを集計するサイトのことです。\u003c/p\u003e\n\n\u003cp\u003eiOS/Android の OS のシェア率の比較などを確認するときに、操作が直感的でとても役にたったので共有します。\u003c/p\u003e\n\n\u003cp\u003eよく使いそうなグラフをサンプルとして添付します。（2020/11/08のデータ）\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"使い方\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e使い方\u003c/h1\u003e\n\n\u003cp\u003e「Edit Chart Date」 をクリックする。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/12b40b40e40b7f8c55db03d6a45a423b32a470ec/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f63613961343237332d316235382d626632392d303036312d3738373635306534366135652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fca9a4273-1b58-bf29-0061-787650e46a5e.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=04b830cbabaf4788ed0d214f13c925d6\" alt=\"スクリーンショット 2020-11-08 11.43.25.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ca9a4273-1b58-bf29-0061-787650e46a5e.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fca9a4273-1b58-bf29-0061-787650e46a5e.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=484612e7b558c5b83386508d92e7fb5b 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e「Statistic」、「Region」、「Chart Type」、「Period」を設定して、「View Chart」をクリックする。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/63daa7117c631cc5421ebd744fde3ddc79cc60e1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f39363764623136622d626638332d343761632d623934622d3261346463336436646266662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F967db16b-bf83-47ac-b94b-2a4dc3d6dbff.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=01b3bb77183e4b54e62f89e68650767b\" alt=\"スクリーンショット 2020-11-08 11.46.57.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/967db16b-bf83-47ac-b94b-2a4dc3d6dbff.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F967db16b-bf83-47ac-b94b-2a4dc3d6dbff.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=2c5054f512a6c14a8e4d8cfc7ec2abd4 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eグラフが表示される。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/1d25c1346be41d77f6c2244ad0fa36a05cf176c4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f37653564313639632d326661612d323361612d363836612d6231393738613861353265652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F7e5d169c-2faa-23aa-686a-b1978a8a52ee.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=8963a08073dede072a88dd9b02907fcc\" alt=\"スクリーンショット 2020-11-08 12.01.11.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/7e5d169c-2faa-23aa-686a-b1978a8a52ee.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F7e5d169c-2faa-23aa-686a-b1978a8a52ee.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=3d3adbeeee952012ecffdb871a0459e5 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e以上。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"サンプル-20201108\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB-20201108\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eサンプル （2020/11/08）\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"現在の-iosandroid-のシェア率-棒グラフ-日本\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%8F%BE%E5%9C%A8%E3%81%AE-iosandroid-%E3%81%AE%E3%82%B7%E3%82%A7%E3%82%A2%E7%8E%87-%E6%A3%92%E3%82%B0%E3%83%A9%E3%83%95-%E6%97%A5%E6%9C%AC\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e現在の iOS/Android のシェア率 棒グラフ （日本）\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/995ffe5ef6e9b290cbb6e6b96a75c0cc575b331e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f63653765313063312d393166302d346236332d383566322d3739333032373765303034382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fce7e10c1-91f0-4b63-85f2-7930277e0048.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=6ba7c42979a08d1f4c9df64161ff5b4e\" alt=\"ivsA_Japan.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ce7e10c1-91f0-4b63-85f2-7930277e0048.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fce7e10c1-91f0-4b63-85f2-7930277e0048.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=11af389df025e9683bc1409b847e6cc7 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"現在の-iosandroid-のシェア率-棒グラフ-世界\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%8F%BE%E5%9C%A8%E3%81%AE-iosandroid-%E3%81%AE%E3%82%B7%E3%82%A7%E3%82%A2%E7%8E%87-%E6%A3%92%E3%82%B0%E3%83%A9%E3%83%95-%E4%B8%96%E7%95%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e現在の iOS/Android のシェア率 棒グラフ （世界）\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/c6810537f5838d7fe9b3903cb1dda68971e4b75c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f33373530333565652d386239302d643764662d613235642d3261386531303130633061662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F375035ee-8b90-d7df-a25d-2a8e1010c0af.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=133f982bafc42de79478246da90475f4\" alt=\"ivsA_World.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/375035ee-8b90-d7df-a25d-2a8e1010c0af.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F375035ee-8b90-d7df-a25d-2a8e1010c0af.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=fce633834649aaa10e13d5f3a95e8857 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"現在の-iosandroid-のシェア率-世界地図\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%8F%BE%E5%9C%A8%E3%81%AE-iosandroid-%E3%81%AE%E3%82%B7%E3%82%A7%E3%82%A2%E7%8E%87-%E4%B8%96%E7%95%8C%E5%9C%B0%E5%9B%B3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e現在の iOS/Android のシェア率 世界地図\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/00e97c4dd89b81e6f9649ff8d1c456c57f3b49b1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f34623264643533302d663263372d613230312d333731632d3831636337386537656139652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F4b2dd530-f2c7-a201-371c-81cc78e7ea9e.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=16fc42089315d4e0e1aa04b525c38276\" alt=\"ivsA_World_map.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/4b2dd530-f2c7-a201-371c-81cc78e7ea9e.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F4b2dd530-f2c7-a201-371c-81cc78e7ea9e.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=13aabcbc20ab8a564a8bc115a1998fdb 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"過去10年の-iosandroid-のシェア率-棒グラフ-日本\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%81%8E%E5%8E%BB10%E5%B9%B4%E3%81%AE-iosandroid-%E3%81%AE%E3%82%B7%E3%82%A7%E3%82%A2%E7%8E%87-%E6%A3%92%E3%82%B0%E3%83%A9%E3%83%95-%E6%97%A5%E6%9C%AC\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e過去10年の iOS/Android のシェア率 棒グラフ （日本）\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/9d5210d9776aefa3884d09885a1e2a3ec3b03ef4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f63383261613139652d343331612d333832382d313861352d3735326461356331323237662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fc82aa19e-431a-3828-18a5-752da5c1227f.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=6ae60770540c5e3e7fcbc2bde83a9d7e\" alt=\"ivsA_World_Japan_line.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/c82aa19e-431a-3828-18a5-752da5c1227f.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fc82aa19e-431a-3828-18a5-752da5c1227f.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=fdbd73ef071b2ac8e0a24947cea15215 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"現在の-ios-のシェア率-棒グラフ-日本\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%8F%BE%E5%9C%A8%E3%81%AE-ios-%E3%81%AE%E3%82%B7%E3%82%A7%E3%82%A2%E7%8E%87-%E6%A3%92%E3%82%B0%E3%83%A9%E3%83%95-%E6%97%A5%E6%9C%AC\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e現在の iOS のシェア率 棒グラフ （日本）\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/f9b852250cea58a83726116849b9c47924d92089/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f64633133306563642d623061652d363161302d363261332d3536356566313633393966322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fdc130ecd-b0ae-61a0-62a3-565ef16399f2.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=a1a61e19d5fec6331026ad790d4ff5f9\" alt=\"iOS_bar.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/dc130ecd-b0ae-61a0-62a3-565ef16399f2.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fdc130ecd-b0ae-61a0-62a3-565ef16399f2.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=c929f051683e5dda88ee67b546e3e21b 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"過去1年間の-ios-のシェア率-線グラフ-日本\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%81%8E%E5%8E%BB1%E5%B9%B4%E9%96%93%E3%81%AE-ios-%E3%81%AE%E3%82%B7%E3%82%A7%E3%82%A2%E7%8E%87-%E7%B7%9A%E3%82%B0%E3%83%A9%E3%83%95-%E6%97%A5%E6%9C%AC\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e過去1年間の iOS のシェア率 線グラフ （日本）\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/609f46b92cc54c62fe78249e7b7f60d3b84eaacf/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f61363730396337372d363263352d663631392d303031632d6232383935303564353932632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fa6709c77-62c5-f619-001c-b289505d592c.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=d7dc3e19fef7f8c11982d0b7bfbc1988\" alt=\"iOS_line.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/a6709c77-62c5-f619-001c-b289505d592c.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fa6709c77-62c5-f619-001c-b289505d592c.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=b8fc4ea676b3af1372323d6d48731ca0 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"グラフからわかること\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B0%E3%83%A9%E3%83%95%E3%81%8B%E3%82%89%E3%82%8F%E3%81%8B%E3%82%8B%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eグラフからわかること\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003eiOS VS Android\n\n\u003cul\u003e\n\u003cli\u003eiOS の方がシェア率が高いのは日本、オーストラリア、アメリカ、カナダ、ヨーロッパの一部ぐらい。\u003c/li\u003e\n\u003cli\u003e世界の平均に比べて日本の iOS 支持率が異常に高い\u003c/li\u003e\n\u003cli\u003eしかし、2019年から日本の Android 支持率が上がってきている傾向\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eiOS の中の OS シェア率\n\n\u003cul\u003e\n\u003cli\u003e日本では月単位でグラフが上下するほど iOS は頻繁にアップデートされている\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"ちょっとおしいところ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E3%81%8A%E3%81%97%E3%81%84%E3%81%A8%E3%81%93%E3%82%8D\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eちょっとおしいところ\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003eメジャーバージョン単位での iOS シェア率がわからない\n\n\u003cul\u003e\n\u003cli\u003eマイナーバージョンでの iOS シェア率はわかるが、 iOS 12 vs iOS 13 vs iOS 14 のようなメジャーバージョンでのシェア率はわからない\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eデバイス別のシェア率がわからない\n\n\u003cul\u003e\n\u003cli\u003e例えば Apple vs Samsung vs Huawei ようなシェア率はわかるが、Apple の中の iPhone SE vs iPhone 8 のようなシェア率はわからない\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"足りないデータを補うサイト\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%B6%B3%E3%82%8A%E3%81%AA%E3%81%84%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E8%A3%9C%E3%81%86%E3%82%B5%E3%82%A4%E3%83%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e足りないデータを補うサイト\u003c/h1\u003e\n\n\u003cp\u003e上記のおしいところを補うサイトを探しました。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"メジャーバージョン単位での-ios-シェア率-by-スマタブinfo\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%A1%E3%82%B8%E3%83%A3%E3%83%BC%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E5%8D%98%E4%BD%8D%E3%81%A7%E3%81%AE-ios-%E3%82%B7%E3%82%A7%E3%82%A2%E7%8E%87-by-%E3%82%B9%E3%83%9E%E3%82%BF%E3%83%96info\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eメジャーバージョン単位での iOS シェア率 （by スマタブinfo）\u003c/h2\u003e\n\n\u003cp\u003e日本のメジャーバージョンごとの iOS のシェア率は以下のサイトで確認できます。2ヶ月に一回ほど更新されているそうです。\u003cbr\u003e\n・\u003ca href=\"http://smatabinfo.jp/os/ios/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e「Home \u0026gt; OS」 - スマタブinfo\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/d302aded0334d9e02fe932da92189090607b6b6e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f63363731376166632d343238362d316339352d613665392d3362386535633364353333332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fc6717afc-4286-1c95-a6e9-3b8e5c3d5333.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=992d7cd4d0fec1342c2ec6217d01c8a7\" alt=\"スクリーンショット 2020-11-08 13.48.39.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/c6717afc-4286-1c95-a6e9-3b8e5c3d5333.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fc6717afc-4286-1c95-a6e9-3b8e5c3d5333.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=dd47329b1f8c25fd3f1b6ab13151c73e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"デバイス別のシェア率-by-deciceatlas\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E5%88%A5%E3%81%AE%E3%82%B7%E3%82%A7%E3%82%A2%E7%8E%87-by-deciceatlas\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eデバイス別のシェア率 （by DeciceAtlas）\u003c/h2\u003e\n\n\u003cp\u003e以下のサイトで日本での2019年のデバイスシェア率が確認できます。\u003cbr\u003e\n残念ながら、データが古く（2019年）、また、ここで表すシェア率は Android 端末含めたすべてのデバイスの中でのシェア率のため、iPhone 端末のみの比較には使用できなので注意が必要です。\u003c/p\u003e\n\n\u003cp\u003e・\u003ca href=\"https://deviceatlas.com/blog/most-popular-smartphones#japan\" rel=\"nofollow noopener\" target=\"_blank\"\u003e「The most popular smartphones in 2019」 - DeviceAtlas\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/a569c743789398a8668c185a45f02f21cf8f040b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f30633436313932622d346563312d616632612d626231312d3563393732326531353761312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F0c46192b-4ec1-af2a-bb11-5c9722e157a1.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=41c4080dd72e135c796abddbb71f70f6\" alt=\"スクリーンショット 2020-11-08 13.49.17.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/0c46192b-4ec1-af2a-bb11-5c9722e157a1.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F0c46192b-4ec1-af2a-bb11-5c9722e157a1.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=999229c0bf3bc0b4cf72e3c9ec5f635c 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e他にも探してみましたが、最新の iPhone 端末のシェア率のデータは見つけられませんでした。\u003cbr\u003e\nもし、ご存知の方がいましたら、ご教授のほどよろしくお願いいたします。\u003c/p\u003e\n","body":"\n# はじめに\n\u003e**[StatCounter](https://gs.statcounter.com/os-market-share/mobile/)**\n\u003eTracks the Usage Share of Search Engines, Browsers and Operating Systems including Mobile from over 10 billion monthly page views.\n\nStatCounter は モバイルを含む、検索エンジン、ブラウザ、OSの使用シェアの統計データを集計するサイトのことです。\n\niOS/Android の OS のシェア率の比較などを確認するときに、操作が直感的でとても役にたったので共有します。\n\nよく使いそうなグラフをサンプルとして添付します。（2020/11/08のデータ）\n\n# 使い方\n\n「Edit Chart Date」 をクリックする。\n\n![スクリーンショット 2020-11-08 11.43.25.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ca9a4273-1b58-bf29-0061-787650e46a5e.png)\n\n「Statistic」、「Region」、「Chart Type」、「Period」を設定して、「View Chart」をクリックする。\n\n![スクリーンショット 2020-11-08 11.46.57.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/967db16b-bf83-47ac-b94b-2a4dc3d6dbff.png)\n\nグラフが表示される。\n\n![スクリーンショット 2020-11-08 12.01.11.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/7e5d169c-2faa-23aa-686a-b1978a8a52ee.png)\n\n以上。\n\n# サンプル （2020/11/08）\n\n\n## 現在の iOS/Android のシェア率 棒グラフ （日本）\n\n![ivsA_Japan.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ce7e10c1-91f0-4b63-85f2-7930277e0048.png)\n\n## 現在の iOS/Android のシェア率 棒グラフ （世界）\n\n![ivsA_World.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/375035ee-8b90-d7df-a25d-2a8e1010c0af.png)\n\n## 現在の iOS/Android のシェア率 世界地図\n\n![ivsA_World_map.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/4b2dd530-f2c7-a201-371c-81cc78e7ea9e.png)\n\n## 過去10年の iOS/Android のシェア率 棒グラフ （日本）\n\n![ivsA_World_Japan_line.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/c82aa19e-431a-3828-18a5-752da5c1227f.png)\n\n## 現在の iOS のシェア率 棒グラフ （日本）\n\n![iOS_bar.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/dc130ecd-b0ae-61a0-62a3-565ef16399f2.png)\n\n## 過去1年間の iOS のシェア率 線グラフ （日本）\n\n![iOS_line.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/a6709c77-62c5-f619-001c-b289505d592c.png)\n\n# グラフからわかること\n\n- iOS VS Android\n  - iOS の方がシェア率が高いのは日本、オーストラリア、アメリカ、カナダ、ヨーロッパの一部ぐらい。\n  - 世界の平均に比べて日本の iOS 支持率が異常に高い\n  - しかし、2019年から日本の Android 支持率が上がってきている傾向\n- iOS の中の OS シェア率\n  - 日本では月単位でグラフが上下するほど iOS は頻繁にアップデートされている\n\n# ちょっとおしいところ\n\n- メジャーバージョン単位での iOS シェア率がわからない\n  - マイナーバージョンでの iOS シェア率はわかるが、 iOS 12 vs iOS 13 vs iOS 14 のようなメジャーバージョンでのシェア率はわからない\n- デバイス別のシェア率がわからない\n  - 例えば Apple vs Samsung vs Huawei ようなシェア率はわかるが、Apple の中の iPhone SE vs iPhone 8 のようなシェア率はわからない\n\n# 足りないデータを補うサイト\n\n上記のおしいところを補うサイトを探しました。\n\n## メジャーバージョン単位での iOS シェア率 （by スマタブinfo）\n\n日本のメジャーバージョンごとの iOS のシェア率は以下のサイトで確認できます。2ヶ月に一回ほど更新されているそうです。\n・[「Home \u003e OS」 - スマタブinfo](http://smatabinfo.jp/os/ios/)\n![スクリーンショット 2020-11-08 13.48.39.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/c6717afc-4286-1c95-a6e9-3b8e5c3d5333.png)\n\n\n## デバイス別のシェア率 （by DeciceAtlas）\n以下のサイトで日本での2019年のデバイスシェア率が確認できます。\n残念ながら、データが古く（2019年）、また、ここで表すシェア率は Android 端末含めたすべてのデバイスの中でのシェア率のため、iPhone 端末のみの比較には使用できなので注意が必要です。\n\n・[「The most popular smartphones in 2019」 - DeviceAtlas](https://deviceatlas.com/blog/most-popular-smartphones#japan)\n\n![スクリーンショット 2020-11-08 13.49.17.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/0c46192b-4ec1-af2a-bb11-5c9722e157a1.png)\n\n\n他にも探してみましたが、最新の iPhone 端末のシェア率のデータは見つけられませんでした。\nもし、ご存知の方がいましたら、ご教授のほどよろしくお願いいたします。\n\n","coediting":false,"comments_count":0,"created_at":"2020-11-08T12:20:43+09:00","group":null,"id":"bf8805c801c71a8045d9","likes_count":2,"private":false,"reactions_count":0,"tags":[{"name":"Android","versions":[]},{"name":"iOS","versions":[]}],"title":"iOS/Android の OS のシェア率を比較するのに StatCounter というサイトがかなり便利な件 ","updated_at":"2020-11-09T10:34:04+09:00","url":"https://qiita.com/ikuraikura/items/bf8805c801c71a8045d9","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003eみなさん、チームを組んでお仕事をするときは、信頼関係を築いて、ハッピーにお仕事したいですよね？\u003c/p\u003e\n\n\u003cp\u003eチームの信頼関係がプロジェクトの成功の鍵を握っているといっても過言ではありません。\u003c/p\u003e\n\n\u003cp\u003eそんな、大事な大事な信頼関係はどうやったら崩壊させられるでしょうか？\u003c/p\u003e\n\n\u003cp\u003e普通であれば、「信頼関係を構築する方法」を考えるところですが、あえて「信頼関係を崩壊させる方法」を考えることで、アンチパターンを知ることがこの記事の目的です。\u003c/p\u003e\n\n\u003cp\u003e信頼関係は一度崩壊させてしまうと修復するのが大変なので、\u003cstrong\u003e信頼関係を構築することよりも崩壊させないことがより大切だと思います。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"信頼関係が崩壊するとどうなるのか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BF%A1%E9%A0%BC%E9%96%A2%E4%BF%82%E3%81%8C%E5%B4%A9%E5%A3%8A%E3%81%99%E3%82%8B%E3%81%A8%E3%81%A9%E3%81%86%E3%81%AA%E3%82%8B%E3%81%AE%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e信頼関係が崩壊するとどうなるのか？\u003c/h1\u003e\n\n\u003cp\u003e信頼関係の崩壊によってもたらされる悪影響はなんでしょうか？\u003c/p\u003e\n\n\u003cp\u003e「そもそも一緒に仕事したくない」とか「ストレスがたまる」など挙げていけばキリがありませんが、ことシステム開発において、\u003cstrong\u003e信頼関係の崩壊による最大のデメリットはコミュニケーション・コストがとにかくかかってしまうことにあると思います。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e提案（この仕様でこうしませんか？\u003c/li\u003e\n\u003cli\u003e調整（これこれこうで、納期延ばしませんか？\u003c/li\u003e\n\u003cli\u003e改善（再発しないためにこうしませんか？\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e信頼関係がない人とこれらのことをしようと想像してください。かなりしんどいと思うはずです。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e信頼関係がないと、理詰めで説明しないと相手が納得しないので、ロジックを用意しなければならず、とにかく時間がかかってしまうのです。\u003c/strong\u003e\u003cbr\u003e\n（信頼関係がない人との Slack のやりとりは文字数が多くなりがちですよね？）\u003c/p\u003e\n\n\u003cp\u003e何か物事をすすめるよりも、このようなロジックの用意に膨大な時間を費やしていたら、それは信頼関係が構築されていないサインになります。\u003c/p\u003e\n\n\u003cp\u003eやっぱり信頼関係、崩壊させたくないですよね。\u003c/p\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\n・\u003ca href=\"https://qiita.com/dowanna6/items/67d6fa50915c522a1fec\" id=\"reference-d60dcf69a6c9782f362f\"\u003e炎上しないプロジェクトの進め方\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"信頼関係を崩壊させる方法8選\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BF%A1%E9%A0%BC%E9%96%A2%E4%BF%82%E3%82%92%E5%B4%A9%E5%A3%8A%E3%81%95%E3%81%9B%E3%82%8B%E6%96%B9%E6%B3%958%E9%81%B8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e信頼関係を崩壊させる方法【8選】\u003c/h1\u003e\n\n\u003cp\u003e「信頼関係を構築する方法」も「信頼関係を崩壊させる方法」をどちらもインターネットで調べてみました。\u003c/p\u003e\n\n\u003cp\u003e残念ならが、私の調べ方が悪いのか、\u003cstrong\u003eそれらの方法論を科学的根拠を元に解説しているような記事には巡り合えませんでした。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eなので、ここからは私が思う信頼関係を崩壊させる方法を挙げていきたいと思います。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e発想としては「信頼関係を構築する方法」の逆のことをひたすら考えて、なるべくやりそうな（やられそうな）ところに落とし込みました。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"1-レスポンスを遅くする\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#1-%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%82%92%E9%81%85%E3%81%8F%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e1. レスポンスを遅くする\u003c/h2\u003e\n\n\u003cp\u003e逆：レスポンスを早くする\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"2-困っている人を見て見ぬ振りをする\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#2-%E5%9B%B0%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E4%BA%BA%E3%82%92%E8%A6%8B%E3%81%A6%E8%A6%8B%E3%81%AC%E6%8C%AF%E3%82%8A%E3%82%92%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e2. 困っている人を見て見ぬ振りをする\u003c/h2\u003e\n\n\u003cp\u003e逆：困っている人を助ける\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"3-頼んだことはやってくれて当たり前だと思う\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#3-%E9%A0%BC%E3%82%93%E3%81%A0%E3%81%93%E3%81%A8%E3%81%AF%E3%82%84%E3%81%A3%E3%81%A6%E3%81%8F%E3%82%8C%E3%81%A6%E5%BD%93%E3%81%9F%E3%82%8A%E5%89%8D%E3%81%A0%E3%81%A8%E6%80%9D%E3%81%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e3. 頼んだことはやってくれて当たり前だと思う\u003c/h2\u003e\n\n\u003cp\u003e逆：お礼を言う\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"4-質問されたら文句を言いながら答える\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#4-%E8%B3%AA%E5%95%8F%E3%81%95%E3%82%8C%E3%81%9F%E3%82%89%E6%96%87%E5%8F%A5%E3%82%92%E8%A8%80%E3%81%84%E3%81%AA%E3%81%8C%E3%82%89%E7%AD%94%E3%81%88%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e4. 質問されたら文句を言いながら答える\u003c/h2\u003e\n\n\u003cp\u003e逆：質問されたら笑顔で答える\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"5-指摘やアドバイスを全員の前で行う\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#5-%E6%8C%87%E6%91%98%E3%82%84%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9%E3%82%92%E5%85%A8%E5%93%A1%E3%81%AE%E5%89%8D%E3%81%A7%E8%A1%8C%E3%81%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e5. 指摘やアドバイスを全員の前で行う\u003c/h2\u003e\n\n\u003cp\u003e逆：指摘やアドバイスは必要最小限のコミュニティの中で行う\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"6-締め切りをちょっとオーバーしても何も言わないでおく\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#6-%E7%B7%A0%E3%82%81%E5%88%87%E3%82%8A%E3%82%92%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%81%97%E3%81%A6%E3%82%82%E4%BD%95%E3%82%82%E8%A8%80%E3%82%8F%E3%81%AA%E3%81%84%E3%81%A7%E3%81%8A%E3%81%8F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e6. 締め切りをちょっとオーバーしても何も言わないでおく\u003c/h2\u003e\n\n\u003cp\u003e逆：締め切りを守る\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"7-ミスしたときに-言い訳を探す--認めない--謝らない\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#7-%E3%83%9F%E3%82%B9%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AB-%E8%A8%80%E3%81%84%E8%A8%B3%E3%82%92%E6%8E%A2%E3%81%99--%E8%AA%8D%E3%82%81%E3%81%AA%E3%81%84--%E8%AC%9D%E3%82%89%E3%81%AA%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e7. ミスしたときに 言い訳を探す / 認めない / 謝らない\u003c/h2\u003e\n\n\u003cp\u003e逆：間違いがあれば、それを認めて謝る\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"8-悪口や噂話をする\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#8-%E6%82%AA%E5%8F%A3%E3%82%84%E5%99%82%E8%A9%B1%E3%82%92%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e8. 悪口や噂話をする\u003c/h2\u003e\n\n\u003cp\u003e逆： 悪口を言ったり、噂話をしない\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e信頼関係を構築するために、まずは崩壊させる方法を知る。\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e信頼関係が崩壊するとコミュニケーションコストが増える。なので信頼関係は大事。\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","body":"# はじめに\nみなさん、チームを組んでお仕事をするときは、信頼関係を築いて、ハッピーにお仕事したいですよね？\n\nチームの信頼関係がプロジェクトの成功の鍵を握っているといっても過言ではありません。\n\nそんな、大事な大事な信頼関係はどうやったら崩壊させられるでしょうか？\n\n普通であれば、「信頼関係を構築する方法」を考えるところですが、あえて「信頼関係を崩壊させる方法」を考えることで、アンチパターンを知ることがこの記事の目的です。\n\n信頼関係は一度崩壊させてしまうと修復するのが大変なので、**信頼関係を構築することよりも崩壊させないことがより大切だと思います。**\n\n# 信頼関係が崩壊するとどうなるのか？\n\n信頼関係の崩壊によってもたらされる悪影響はなんでしょうか？\n\n「そもそも一緒に仕事したくない」とか「ストレスがたまる」など挙げていけばキリがありませんが、ことシステム開発において、**信頼関係の崩壊による最大のデメリットはコミュニケーション・コストがとにかくかかってしまうことにあると思います。**\n\n- 提案（この仕様でこうしませんか？\n- 調整（これこれこうで、納期延ばしませんか？\n- 改善（再発しないためにこうしませんか？\n\n信頼関係がない人とこれらのことをしようと想像してください。かなりしんどいと思うはずです。\n\n**信頼関係がないと、理詰めで説明しないと相手が納得しないので、ロジックを用意しなければならず、とにかく時間がかかってしまうのです。**\n（信頼関係がない人との Slack のやりとりは文字数が多くなりがちですよね？）\n\n何か物事をすすめるよりも、このようなロジックの用意に膨大な時間を費やしていたら、それは信頼関係が構築されていないサインになります。\n\nやっぱり信頼関係、崩壊させたくないですよね。\n\n【参考】\n・[炎上しないプロジェクトの進め方](https://qiita.com/dowanna6/items/67d6fa50915c522a1fec)\n\n# 信頼関係を崩壊させる方法【8選】\n\n「信頼関係を構築する方法」も「信頼関係を崩壊させる方法」をどちらもインターネットで調べてみました。\n\n残念ならが、私の調べ方が悪いのか、**それらの方法論を科学的根拠を元に解説しているような記事には巡り合えませんでした。**\n\nなので、ここからは私が思う信頼関係を崩壊させる方法を挙げていきたいと思います。\n\n**発想としては「信頼関係を構築する方法」の逆のことをひたすら考えて、なるべくやりそうな（やられそうな）ところに落とし込みました。**\n\n\n## 1. レスポンスを遅くする\n\n逆：レスポンスを早くする\n\n## 2. 困っている人を見て見ぬ振りをする\n\n逆：困っている人を助ける\n\n## 3. 頼んだことはやってくれて当たり前だと思う\n\n逆：お礼を言う\n\n## 4. 質問されたら文句を言いながら答える\n\n逆：質問されたら笑顔で答える\n\n## 5. 指摘やアドバイスを全員の前で行う\n\n逆：指摘やアドバイスは必要最小限のコミュニティの中で行う\n\n## 6. 締め切りをちょっとオーバーしても何も言わないでおく\n\n逆：締め切りを守る\n\n## 7. ミスしたときに 言い訳を探す / 認めない / 謝らない\n\n逆：間違いがあれば、それを認めて謝る\n\n## 8. 悪口や噂話をする\n\n逆： 悪口を言ったり、噂話をしない\n\n# まとめ\n\n- **信頼関係を構築するために、まずは崩壊させる方法を知る。**\n- **信頼関係が崩壊するとコミュニケーションコストが増える。なので信頼関係は大事。**\n","coediting":false,"comments_count":0,"created_at":"2020-11-06T17:27:39+09:00","group":null,"id":"aa8f6bd43b3e3ef49831","likes_count":4,"private":false,"reactions_count":0,"tags":[{"name":"チーム開発","versions":[]}],"title":"信頼関係を崩壊させる方法","updated_at":"2021-02-05T10:42:46+09:00","url":"https://qiita.com/ikuraikura/items/aa8f6bd43b3e3ef49831","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e開発者としてスクラム開発を経験して、私が感じた\u003cstrong\u003e「やらないほうがいいこと」\u003c/strong\u003eをスクラムイベントごとにまとめました。\u003c/p\u003e\n\n\u003cp\u003e開発者目線だけではなく、スクラムの中の1人のメンバーとしての目線も含まれています。\u003c/p\u003e\n\n\u003cp\u003e※ 本記事の内容は内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"デイリースクラム\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%87%E3%82%A4%E3%83%AA%E3%83%BC%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%A0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eデイリースクラム\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"忙しいを理由にかんばんボードのステータスを更新しないこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%BF%99%E3%81%97%E3%81%84%E3%82%92%E7%90%86%E7%94%B1%E3%81%AB%E3%81%8B%E3%82%93%E3%81%B0%E3%82%93%E3%83%9C%E3%83%BC%E3%83%89%E3%81%AE%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9%E3%82%92%E6%9B%B4%E6%96%B0%E3%81%97%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e「忙しい」を理由にかんばんボードのステータスを更新しないこと\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e忙しいあなたの状況こそが、デイリースクラムで最も共有されるべき情報です。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e進捗が滞っていることを正しく共有して、対策を講じてもらうように働きかけたほうが、その状況が正しく改善されます。\u003c/p\u003e\n\n\u003cp\u003e「忙しいから、かんばんボードのステータスの更新に手が回らない」ではなく「かんばんボードのステータスの更新ができていないから、忙しくなる」ということです。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"議論すること\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%AD%B0%E8%AB%96%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e議論すること\u003c/h2\u003e\n\n\u003cp\u003eデイリーで課題を共有すると議論が発生しがちです。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eしかし、デイリーで議論すると議題に関係ない人の時間を奪ってしまいます。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e議論になりそうになったら、デイリー以外の時間で関係者のみを集めて、議論したほうがいいです。\u003c/p\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\n・\u003ca href=\"https://qiita.com/gakuri/items/c40427ac52096110fb44\" id=\"reference-70738a9f96edba618f00\"\u003e「朝会」といってもどうやら流派が存在するらしいので整理してみた\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"プランニングポーカー\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%97%E3%83%A9%E3%83%B3%E3%83%8B%E3%83%B3%E3%82%B0%E3%83%9D%E3%83%BC%E3%82%AB%E3%83%BC\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eプランニングポーカー\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"バックログの仕様を理解していないこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%90%E3%83%83%E3%82%AF%E3%83%AD%E3%82%B0%E3%81%AE%E4%BB%95%E6%A7%98%E3%82%92%E7%90%86%E8%A7%A3%E3%81%97%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eバックログの仕様を理解していないこと\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eポーカーではなく仕様の確認にかなりの時間が取られます。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eもし、仕様の確認が十分にできていないなら、ポーカーとは別に事前に仕様の確認をする場を設けた方がいいです。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"開発力の高い人がつけたポイントに合わせること\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%96%8B%E7%99%BA%E5%8A%9B%E3%81%AE%E9%AB%98%E3%81%84%E4%BA%BA%E3%81%8C%E3%81%A4%E3%81%91%E3%81%9F%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AB%E5%90%88%E3%82%8F%E3%81%9B%E3%82%8B%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e開発力の高い人がつけたポイントに合わせること\u003c/h2\u003e\n\n\u003cp\u003e開発力の高い人と見積もったポイントがずれていた場合、「自分が誤ったポイントを見積もっている」と感じて、その人のポイントに合わせがちです。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eしかし、当たり前のことですが、開発力が高い人ほど見積もるポイントは低くなります。\u003c/strong\u003e\u003cbr\u003e\n（もちろん、そうでもない場合もあります。）\u003c/p\u003e\n\n\u003cp\u003eそんな人の見積もったポイントに合わせると、チームのベロシティを超えたバックログをスプリントに投入されてしまい、スプリント中にバックログを消化しきれないことになります。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e最終的にチームが出すポイントは、一人で開発するのではなく、チーム全体として開発するということを意識して、ポイントをつけた方が安全です。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e（単純にリスクヘッジするなら、ポイントが割れた場合はポイントの高い方に合わせた方が安全です。そうして生まれた余力を技術的負債の返済に当てるなどして有効に活用しましょう。そのためにも技術的負債は常に返済できるようにバックログなどで見えやすい場所にリストしておくと良いです。）\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"スプリントプランニング\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B9%E3%83%97%E3%83%AA%E3%83%B3%E3%83%88%E3%83%97%E3%83%A9%E3%83%B3%E3%83%8B%E3%83%B3%E3%82%B0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eスプリントプランニング\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"バックログの仕様に疑問点があること\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%90%E3%83%83%E3%82%AF%E3%83%AD%E3%82%B0%E3%81%AE%E4%BB%95%E6%A7%98%E3%81%AB%E7%96%91%E5%95%8F%E7%82%B9%E3%81%8C%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eバックログの仕様に疑問点があること\u003c/h2\u003e\n\n\u003cp\u003eこの段階で仕様に疑問点があると、\u003cstrong\u003eスプリントプランニングが仕様についての Q\u0026amp;A 大会になってしまいます。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e仕様に関する疑問点は事前にできるだけ解消しておいたほうがいいです。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"バックログのボリュームが巨大なままであること\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%90%E3%83%83%E3%82%AF%E3%83%AD%E3%82%B0%E3%81%AE%E3%83%9C%E3%83%AA%E3%83%A5%E3%83%BC%E3%83%A0%E3%81%8C%E5%B7%A8%E5%A4%A7%E3%81%AA%E3%81%BE%E3%81%BE%E3%81%A7%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eバックログのボリュームが巨大なままであること\u003c/h2\u003e\n\n\u003cp\u003e1つのバックログのボリュームが巨大であると、プランニングの際にそのバックログが扱いづらくなります。\u003c/p\u003e\n\n\u003cp\u003eプランニングポーカーの段階でボリュームの大きいバックログは事前に把握しているはずなので、\u003cstrong\u003eそのような巨大なバックログは事前に分割しておくとプランニングの選択肢が広がります。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eまた、巨大なバックログをひとつのスプリントで対応するのは危険です。理由は不確実性が高いからです。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e分割可能であれば、分割して複数のスプリントで少しずつ作っていくこと（＝不確実性の削減をしていくこと）で、途中での軌道修正も比較的簡単に行うことができます。（これこそアジャイル開発の恩恵）\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\n・\u003ca href=\"https://qiita.com/hirokidaichi/items/1faf7a57cc55562a15e1\" id=\"reference-bc05e1316b7c8640d47a\"\u003e日本にアジャイルが普及しづらい本当の理由〜不確実性に向き合うマネジメント論〜\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"readyになっていないバックログをスプリントに投入すること\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#ready%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E3%83%90%E3%83%83%E3%82%AF%E3%83%AD%E3%82%B0%E3%82%92%E3%82%B9%E3%83%97%E3%83%AA%E3%83%B3%E3%83%88%E3%81%AB%E6%8A%95%E5%85%A5%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e「Ready」になっていないバックログをスプリントに投入すること\u003c/h2\u003e\n\n\u003cp\u003e当たり前ですが「Ready」になっていないバックログについては、スプリントが始まってもまともに開発に着手することはできません。\u003c/p\u003e\n\n\u003cp\u003e何をもって「Ready」にするかはプロジェクトごとに異なりますが、定めた「Ready」の定義が満たされていないバックログが平然とスプリントに投入されそうになったら、開発者側が表立って声をあげましょう。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eスプリントにエントリーされたバックログが完了しなかった場合は、そのバックログを受け入れた開発者側の責任になってしまいます。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"スプリント期間中\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B9%E3%83%97%E3%83%AA%E3%83%B3%E3%83%88%E6%9C%9F%E9%96%93%E4%B8%AD\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eスプリント期間中\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"仕様に対する-qa-に臆すること\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BB%95%E6%A7%98%E3%81%AB%E5%AF%BE%E3%81%99%E3%82%8B-qa-%E3%81%AB%E8%87%86%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e仕様に対する Q\u0026amp;A に臆すること\u003c/h2\u003e\n\n\u003cp\u003eそもそも論としては、プランニングポーカー \u0026gt; スプリントプランニングを経ているので、この段階で仕様に関する Q\u0026amp;A が発生するのはおかしいはずです。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eしかしながら、実際のところ、実装して初めて気づく仕様の疑問点は山のように出てきます。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e『どうして今更そんな質問をするのか？』、『 Q\u0026amp;A はなるべくまとめてお願いします（怒）』と言われがちですが、\u003cstrong\u003e疑問点があるならば臆せず質問するしかないです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e疑問点を解消せずに都合の良いように解釈して実装を進めると、そういうものに限って、あとで問題が発生することが多いです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eなぜならば、この時点で疑問が生じるということは設計段階でそもそも考慮していない内容である可能性が高いからです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"開発チームに相談せずに機能追加修正すること\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%96%8B%E7%99%BA%E3%83%81%E3%83%BC%E3%83%A0%E3%81%AB%E7%9B%B8%E8%AB%87%E3%81%9B%E3%81%9A%E3%81%AB%E6%A9%9F%E8%83%BD%E8%BF%BD%E5%8A%A0%E4%BF%AE%E6%AD%A3%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e開発チームに相談せずに機能追加/修正すること\u003c/h2\u003e\n\n\u003cp\u003eそんなことをするとスプリント開始前に行ったプランニングポーカーやスプリントプランニングが意味をなさなくなり、\u003cstrong\u003e開発チームのモチベーションが低下します。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eそういった場合は必ず開発チームに相談しましょう。\u003c/p\u003e\n\n\u003cp\u003e相談された開発チームも「スプリント中の要件の追加は NG です」とすぐにつっぱねるのではなく、プロダクトオーナーと相談し、優先順位の低いバックログの対応を落とすなどして、できるだけ調整して受け入れましょう。\u003c/p\u003e\n\n\u003cp\u003e信頼を得るチャンスでもあります。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"リファクタリングしないこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%97%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eリファクタリングしないこと\u003c/h2\u003e\n\n\u003cp\u003eスプリントを終わらすことを優先し、リファクタリングを疎かにすると技術的負債がどんどんたまっていくばかりです。\u003c/p\u003e\n\n\u003cp\u003e技術的負債はこまめに返済しないと雪だるま式に膨れ上がり、いずれ、リファクタリング不可能な状況になってしまいます。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eそうならないためにも、「リファクタリング用のバックログを設けてもらって一気に返済しよう」などと思うのではなく、気付いたタイミングでこまめにリファクタリングしたほうがいいです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eまた、リファクタリングには既存機能を担保するリグレッションテストがセットになり、そのためにも\u003cstrong\u003eテストの自動化はほぼ必須になります。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"マージリクエストをスプリントの最終日に出すこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%9E%E3%83%BC%E3%82%B8%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%82%92%E3%82%B9%E3%83%97%E3%83%AA%E3%83%B3%E3%83%88%E3%81%AE%E6%9C%80%E7%B5%82%E6%97%A5%E3%81%AB%E5%87%BA%E3%81%99%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eマージリクエストをスプリントの最終日に出すこと\u003c/h2\u003e\n\n\u003cp\u003eマージを優先するため、レビューの質が落ち、\u003cstrong\u003e結果的に品質が落ちます。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"スプリントの期間をのばすこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B9%E3%83%97%E3%83%AA%E3%83%B3%E3%83%88%E3%81%AE%E6%9C%9F%E9%96%93%E3%82%92%E3%81%AE%E3%81%B0%E3%81%99%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eスプリントの期間をのばすこと\u003c/h2\u003e\n\n\u003cp\u003e予定していた期限にスプリントが終わらないということは、どこかに問題があるということです。\u003c/p\u003e\n\n\u003cp\u003eその問題をレトロスペクティブで振り返り、次のスプリントから改善するアクションをとっていかないと、問題は残ったままになります。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eつまり、スプリント期間をのばしても、発生している問題は改善されず、スプリント期間の延長が繰り返されるだけです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\n・\u003ca href=\"https://eh-career.com/engineerhub/entry/2020/04/21/103000#\" rel=\"nofollow noopener\" target=\"_blank\"\u003eスクラムマスターがやること、やらないこと - アジャイルトレーニングの専門家に聞いてみた\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"スプリントレビュー\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B9%E3%83%97%E3%83%AA%E3%83%B3%E3%83%88%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eスプリントレビュー\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"業務上あり得ないデータを用いること\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%A5%AD%E5%8B%99%E4%B8%8A%E3%81%82%E3%82%8A%E5%BE%97%E3%81%AA%E3%81%84%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E7%94%A8%E3%81%84%E3%82%8B%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e業務上あり得ないデータを用いること\u003c/h2\u003e\n\n\u003cp\u003eスプリントレビューは業務に詳しい関係者が出席することがほとんどだと思います。\u003c/p\u003e\n\n\u003cp\u003e業務上あり得ないデータが仮データとして入っているようなアプリのデモを見せると、\u003cstrong\u003eその機能がスプリントで開発対象かどうかにかかわらず質問が飛んできます。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e余計な議論を避けるためにも、スプリントレビューで使用するデータには気を配った方がいいです。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"得られたフィードバックの取り扱いを曖昧にすること\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%BE%97%E3%82%89%E3%82%8C%E3%81%9F%E3%83%95%E3%82%A3%E3%83%BC%E3%83%89%E3%83%90%E3%83%83%E3%82%AF%E3%81%AE%E5%8F%96%E3%82%8A%E6%89%B1%E3%81%84%E3%82%92%E6%9B%96%E6%98%A7%E3%81%AB%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e得られたフィードバックの取り扱いを曖昧にすること\u003c/h2\u003e\n\n\u003cp\u003eバックログに積んで次回のスプリントで対応するのか？、すぐに対応するのか？、すぐに対応するならその期限は？、優先度は？、そもそも対応しないのか？\u003c/p\u003e\n\n\u003cp\u003e得られたフィードバックに対してこの辺が曖昧なままスプリントレビューが終了したら、すぐに関係者を集めてその整理を行ったほうがいいです。\u003c/p\u003e\n\n\u003cp\u003eそうしないと、\u003cstrong\u003e得られたフィードバックが空中浮遊したまま誰も手をつけない状態になってしまいます。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\n・\u003ca href=\"https://qiita.com/harakachi/items/77a7a71ab693e8bceb1b\" id=\"reference-944c44e6c2476ab3171e\"\u003eスプリントレビューのチェックポイント\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"スプリントレトロスペクティブ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B9%E3%83%97%E3%83%AA%E3%83%B3%E3%83%88%E3%83%AC%E3%83%88%E3%83%AD%E3%82%B9%E3%83%9A%E3%82%AF%E3%83%86%E3%82%A3%E3%83%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eスプリントレトロスペクティブ\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"改善タスクをボランティアにすること\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%94%B9%E5%96%84%E3%82%BF%E3%82%B9%E3%82%AF%E3%82%92%E3%83%9C%E3%83%A9%E3%83%B3%E3%83%86%E3%82%A3%E3%82%A2%E3%81%AB%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e改善タスクをボランティアにすること\u003c/h2\u003e\n\n\u003cp\u003e『じゃあ、その改善案の実施を ○○ さんやっておいてくださいね。あ、もちろんそれとは別に、スプリントのバックログもちゃんと消化してね。』\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eこのように「仕事」として認識されない改善タスクは実施されません。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e本当に解決したい課題があれば、\u003cstrong\u003eスプリントのひとつのバックログ（もしくはスパイク）として扱って対応したほうがいいです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"言ったもん負けにすること\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A8%80%E3%81%A3%E3%81%9F%E3%82%82%E3%82%93%E8%B2%A0%E3%81%91%E3%81%AB%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e「言ったもん負け」にすること\u003c/h2\u003e\n\n\u003cp\u003e改善案をあげた人に改善タスクを実施させること =「言ったもん負け」の状態は非常に危険です。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e「言ったもん負け」の環境では誰も「改善」の声を出さなくなります。それはすなわちスクラムの終了を意味します。（これはレトロスペクティブに限った話ではないです。）\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eそして「言ったもん負け」の状態からの脱却は、メンバーの性格や組織の風土に関わるもののため、非常に難しいです。\u003c/p\u003e\n\n\u003cp\u003eこうなってしまったら、レトロスペクティブであがった改善タスクに対する運用のプロセスをルール化していくしかないです。\u003c/p\u003e\n\n\u003cp\u003e（しかしながら、レトロスペクティブをそのようなプロセスでぎちぎちに固めてしまうと、レトロスペクティブがとても雰囲気の堅いイベントになってしまいます。）\u003c/p\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\n雰囲気の堅いレトロスペクティブに是非。\u003cbr\u003e\n・\u003ca href=\"https://qiita.com/kanishionori/items/9900c6a8d1e7a4e9dda6\" id=\"reference-69b52daf01b8d7532db7\"\u003eレトロスペクティブのおすすめアクティビティ\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"プロダクトバックログリファインメント\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%97%E3%83%AD%E3%83%80%E3%82%AF%E3%83%88%E3%83%90%E3%83%83%E3%82%AF%E3%83%AD%E3%82%B0%E3%83%AA%E3%83%95%E3%82%A1%E3%82%A4%E3%83%B3%E3%83%A1%E3%83%B3%E3%83%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eプロダクトバックログリファインメント\u003c/h1\u003e\n\n\u003cp\u003eやったことないのでわかりません。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"さいごに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eさいごに\u003c/h1\u003e\n\n\u003cp\u003eもちろん、これがすべてではないですし、絶対でもないです。\u003c/p\u003e\n\n\u003cp\u003e組まれるスクラムごとに抱える課題が違って、それを改善していくのがスクラムの面白いところでもあるので、ここに書いたことにも囚われずに、Happyなスクラム開発ができたらと思います。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"参考資料\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8F%82%E8%80%83%E8%B3%87%E6%96%99\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e参考資料\u003c/h1\u003e\n\n\u003cp\u003e・\u003ca href=\"https://qiita.com/y-some/items/259c297c853133a8b0eb\" id=\"reference-d794127ff769a226bb49\"\u003eアジャイルな開発者であるためのTips\u003c/a\u003e\u003cbr\u003e\n・\u003ca href=\"https://qiita.com/TakahiRoyte/items/855b6116c8132b0c9286\" id=\"reference-75102a8e7fc3f90e71d8\"\u003eスクラムを失敗させる51のアンチパターン\u003c/a\u003e\u003c/p\u003e\n","body":"# はじめに\n開発者としてスクラム開発を経験して、私が感じた**「やらないほうがいいこと」**をスクラムイベントごとにまとめました。\n\n開発者目線だけではなく、スクラムの中の1人のメンバーとしての目線も含まれています。\n\n※ 本記事の内容は内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。\n\n# デイリースクラム\n\n## 「忙しい」を理由にかんばんボードのステータスを更新しないこと\n**忙しいあなたの状況こそが、デイリースクラムで最も共有されるべき情報です。**\n\n進捗が滞っていることを正しく共有して、対策を講じてもらうように働きかけたほうが、その状況が正しく改善されます。\n\n「忙しいから、かんばんボードのステータスの更新に手が回らない」ではなく「かんばんボードのステータスの更新ができていないから、忙しくなる」ということです。\n\n## 議論すること\nデイリーで課題を共有すると議論が発生しがちです。\n\n**しかし、デイリーで議論すると議題に関係ない人の時間を奪ってしまいます。**\n\n議論になりそうになったら、デイリー以外の時間で関係者のみを集めて、議論したほうがいいです。\n\n【参考】\n・[「朝会」といってもどうやら流派が存在するらしいので整理してみた](https://qiita.com/gakuri/items/c40427ac52096110fb44)\n\n# プランニングポーカー\n\n## バックログの仕様を理解していないこと\n**ポーカーではなく仕様の確認にかなりの時間が取られます。**\n\nもし、仕様の確認が十分にできていないなら、ポーカーとは別に事前に仕様の確認をする場を設けた方がいいです。\n\n## 開発力の高い人がつけたポイントに合わせること\n開発力の高い人と見積もったポイントがずれていた場合、「自分が誤ったポイントを見積もっている」と感じて、その人のポイントに合わせがちです。\n\n**しかし、当たり前のことですが、開発力が高い人ほど見積もるポイントは低くなります。**\n（もちろん、そうでもない場合もあります。）\n\nそんな人の見積もったポイントに合わせると、チームのベロシティを超えたバックログをスプリントに投入されてしまい、スプリント中にバックログを消化しきれないことになります。\n\n**最終的にチームが出すポイントは、一人で開発するのではなく、チーム全体として開発するということを意識して、ポイントをつけた方が安全です。**\n\n（単純にリスクヘッジするなら、ポイントが割れた場合はポイントの高い方に合わせた方が安全です。そうして生まれた余力を技術的負債の返済に当てるなどして有効に活用しましょう。そのためにも技術的負債は常に返済できるようにバックログなどで見えやすい場所にリストしておくと良いです。）\n\n# スプリントプランニング\n\n## バックログの仕様に疑問点があること\nこの段階で仕様に疑問点があると、**スプリントプランニングが仕様についての Q\u0026A 大会になってしまいます。**\n\n仕様に関する疑問点は事前にできるだけ解消しておいたほうがいいです。\n\n## バックログのボリュームが巨大なままであること\n1つのバックログのボリュームが巨大であると、プランニング\bの際にそのバックログが扱いづらくなります。\n\nプランニングポーカーの段階でボリュームの大きいバックログは事前に把握しているはずなので、**そのような巨大なバックログは事前に分割しておくとプランニングの選択肢が広がります。**\n\nまた、巨大なバックログをひとつのスプリントで対応するのは危険です。理由は不確実性が高いからです。\n\n**分割可能であれば、分割して複数のスプリントで少しずつ作っていくこと（＝不確実性の削減をしていくこと）で、途中での軌道修正も比較的簡単に行うことができます。（これこそアジャイル開発の恩恵）**\n\n【参考】\n・[日本にアジャイルが普及しづらい本当の理由〜不確実性に向き合うマネジメント論〜](https://qiita.com/hirokidaichi/items/1faf7a57cc55562a15e1)\n\n## 「Ready」になっていないバックログをスプリントに投入すること\n当たり前ですが「Ready」になっていないバックログについては、スプリントが始まってもまともに開発に着手することはできません。\n\n何をもって「Ready」にするかはプロジェクトごとに異なりますが、定めた「Ready」の定義が満たされていないバックログが平然とスプリントに投入されそうになったら、開発者側が表立って声をあげましょう。\n\n**スプリントにエントリーされたバックログが完了しなかった場合は、そのバックログを受け入れた開発者側の責任になってしまいます。**\n\n# スプリント期間中\n\n## 仕様に対する Q\u0026A に臆すること\n\bそもそも論としては、プランニングポーカー \u003e スプリントプランニングを経ているので、この段階で仕様に関する Q\u0026A が発生するのはおかしいはずです。\n\n**しかしながら、実際のところ、実装して初めて気づく仕様の疑問点は山のように出てきます。**\n\n『どうして今更そんな質問をするのか？』、『 Q\u0026A はなるべくまとめてお願いします（怒）』と言われがちですが、**疑問点があるならば臆せず質問するしかないです。**\n\n**疑問点を解消せずに都合の良いように解釈して実装を進めると、そういうものに限って、あとで問題が発生することが多いです。**\n\n**なぜならば、この時点で疑問が生じるということは設計段階でそもそも考慮していない内容である可能性が高いからです。**\n\n## 開発チームに相談せずに機能追加/修正すること\n\nそんなことをするとスプリント開始前に行ったプランニングポーカーやスプリントプランニングが意味をなさなくなり、**開発チームのモチベーションが低下します。**\n\nそういった場合は必ず開発チームに相談しましょう。\n\n相談された開発チームも「スプリント中の要件の追加は NG です」とすぐにつっぱねるのではなく、プロダクトオーナーと相談し、優先順位の低いバックログの対応を落とすなどして、できるだけ調整して受け入れましょう。\n\n信頼を得るチャンスでもあります。\n\n## リファクタリングしないこと\nスプリントを終わらすことを優先し、リファクタリングを疎かにすると技術的負債がどんどんたまっていくばかりです。\n\n技術的負債はこまめに返済しないと雪だるま式に膨れ上がり、いずれ、リファクタリング不可能な状況になってしまいます。\n\n**そうならないためにも、「リファクタリング用のバックログを設けてもらって一気に返済しよう」などと思うのではなく、気付いたタイミングでこまめにリファクタリングしたほうがいいです。**\n\nまた、リファクタリングには既存機能を担保するリグレッションテストがセットになり、そのためにも**テストの自動化はほぼ必須になります。**\n\n## マージリクエストをスプリントの最終日に出すこと\nマージを優先するため、レビューの質が落ち、**結果的に品質が落ちます。**\n\n## スプリントの期間をのばすこと\n予定していた期限にスプリントが終わらないということは、どこかに問題があるということです。\n\nその問題をレトロスペクティブで振り返り、次のスプリントから改善するアクションをとっていかないと、問題は残ったままになります。\n\n**つまり、スプリント期間をのばしても、発生している問題は改善されず、スプリント期間の延長が繰り返されるだけです。**\n\n【参考】\n・[スクラムマスターがやること、やらないこと - アジャイルトレーニングの専門家に聞いてみた](https://eh-career.com/engineerhub/entry/2020/04/21/103000#)\n\n# スプリントレビュー\n\n## 業務上あり得ないデータを用いること\nスプリントレビューは業務に詳しい関係者が出席することがほとんどだと思います。\n\n業務上あり得ないデータが仮データとして入っているようなアプリのデモを見せると、**その機能がスプリントで開発対象かどうかにかかわらず質問が飛んできます。**\n\n余計な議論を避けるためにも、スプリントレビューで使用するデータには気を配った方がいいです。\n\n## 得られたフィードバックの取り扱いを曖昧にすること\nバックログに積んで次回のスプリントで対応するのか？、すぐに対応するのか？、すぐに対応するならその期限は？、優先度は？、そもそも対応しないのか？\n\n得られたフィードバックに対してこの辺が曖昧なままスプリントレビューが終了したら、すぐに関係者を集めてその整理を行ったほうがいいです。\n\nそうしないと、**得られたフィードバックが空中浮遊したまま誰も手をつけない状態になってしまいます。**\n\n【参考】\n・[スプリントレビューのチェックポイント](https://qiita.com/harakachi/items/77a7a71ab693e8bceb1b)\n\n# スプリントレトロスペクティブ\n\n## 改善タスクをボランティアにすること\n『じゃあ、その改善案の実施を ○○ さんやっておいてくださいね。あ、もちろんそれとは別に、スプリントのバックログもちゃんと消化してね。』\n\n**このように「仕事」として認識されない改善タスクは実施されません。**\n\n本当に解決したい課題があれば、**スプリントのひとつのバックログ（もしくはスパイク）として扱って対応したほうがいいです。**\n\n## 「言ったもん負け」にすること\n改善案をあげた人に改善タスクを実施させること =「言ったもん負け」の状態は非常に危険です。\n\n**「言ったもん負け」の環境では誰も「改善」の声を出さなくなります。それはすなわちスクラムの終了を意味します。（これはレトロスペクティブに限った話ではないです。）**\n\nそして「言ったもん負け」の状態からの脱却は、メンバーの性格や組織の風土に関わるもののため、非常に難しいです。\n\nこうなってしまったら、レトロスペクティブであがった改善タスクに対する運用のプロセスをルール化していくしかないです。\n\n（しかしながら、レトロスペクティブをそのようなプロセスでぎちぎちに固めてしまうと、レトロスペクティブがとても雰囲気の堅いイベントになってしまいます。）\n\n【参考】\n雰囲気の堅いレトロスペクティブに是非。\n・[レトロスペクティブのおすすめアクティビティ](https://qiita.com/kanishionori/items/9900c6a8d1e7a4e9dda6)\n\n# プロダクトバックログリファインメント\n\nやったことないのでわかりません。\n\n# さいごに\n\nもちろん、これがすべてではないですし、絶対でもないです。\n\n組まれるスクラムごとに抱える課題が違って、それを改善していくのがスクラムの面白いところでもあるので、ここに書いたことにも囚われずに、Happyなスクラム開発ができたらと思います。\n\n# 参考資料\n・[アジャイルな開発者であるためのTips](https://qiita.com/y-some/items/259c297c853133a8b0eb)\n・[スクラムを失敗させる51のアンチパターン](https://qiita.com/TakahiRoyte/items/855b6116c8132b0c9286)\n","coediting":false,"comments_count":0,"created_at":"2020-11-05T05:07:57+09:00","group":null,"id":"93211d9501a739817bd7","likes_count":3,"private":false,"reactions_count":0,"tags":[{"name":"チーム開発","versions":[]},{"name":"scrum","versions":[]},{"name":"スクラム","versions":[]},{"name":"チームビルディング","versions":[]},{"name":"スクラム開発","versions":[]}],"title":"スクラム開発を経験してわかった「やらないほうがいいこと」（開発者目線）","updated_at":"2020-12-23T15:00:39+09:00","url":"https://qiita.com/ikuraikura/items/93211d9501a739817bd7","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"honkit\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#honkit\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eHonKit\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/HonKit/HonKit\" rel=\"nofollow noopener\" target=\"_blank\"\u003e公式ドキュメント\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eHonKit 製作者によると GitBook -\u0026gt; HonKit への移行の経緯は以下の通りです。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eGitBookはMarkdownからドキュメントページや書籍を作成するツールですが、 以前OSSで公開されていた\u003ca href=\"https://github.com/GitbookIO/gitbook\" rel=\"nofollow noopener\" target=\"_blank\"\u003eGitBook(legacy)\u003c/a\u003eはDeprecatedとなって開発は止まっています。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e⚠️ Deprecation warning:\u003c/p\u003e\n\n\u003cp\u003eAs the efforts of the GitBook team are focused on the GitBook.com platform, the CLI is no longer under active development. All content supported by the CLI are mostly supported by our GitBook.com / GitHub integration. Content hosted on the legacy.gitbook.com will continue working until further notice. For differences with the new vesion, check out our documentation.\u003c/p\u003e\n\n\u003cp\u003e代わりにOSSではない \u003ca href=\"https://www.gitbook.com/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://www.gitbook.com/\u003c/a\u003e の方に移行する形になっています。 つまり、新しいGitBookはGitBook.com上でのホスティングサービスとなっています。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e（中略）\u003c/p\u003e\n\n\u003cp\u003eこれを解決するため、\u003ca href=\"https://github.com/GitbookIO/gitbook\" rel=\"nofollow noopener\" target=\"_blank\"\u003eGitBook(legacy)\u003c/a\u003eをForkして\u003ca href=\"https://github.com/HonKit/HonKit\" rel=\"nofollow noopener\" target=\"_blank\"\u003eHonKit\u003c/a\u003eを作りました。\u003c/p\u003e\n\n\u003cp\u003e引用元：\u003ca href=\"https://efcl.info/2020/06/19/githon/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eGitBookをForkしてHonKitを作りました - Web Scratch\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eGitBook の OSS の開発が止まってしまったので、それの後続として HonKit を fork して開発が続けられていたみたいです。\u003c/p\u003e\n\n\u003cp\u003eまた、使用ライセンスは GitBook と同じく Apache License 2.0 になります。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eGitBook is licensed under the Apache License, Version 2.0. See \u003ca href=\"https://github.com/GitbookIO/gitbook/blob/master/LICENSE\" rel=\"nofollow noopener\" target=\"_blank\"\u003eLICENSE\u003c/a\u003e for the full license text.\u003c/p\u003e\n\n\u003cp\u003e引用元：\u003ca href=\"https://github.com/HonKit/HonKit\" rel=\"nofollow noopener\" target=\"_blank\"\u003eHonKit\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e一応、Apache License 2.0 のライセンスは勝手に再配布などをしなければ商用利用しても良いものになります。\u003c/p\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\n・ \u003ca href=\"https://qiita.com/0xfffffff7/items/efbb65521d7708f2db7d\" id=\"reference-4a4a7213be2c28047e2d\"\u003e商用利用できるオープンソースライセンスはけっきょくどれで何をすればいいのか？\u003c/a\u003e\u003cbr\u003e\n・ \u003ca href=\"https://reikawatanabe.com/whats-apache-license-v2/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eApache License 2.0とは？ライセンス内容をやさしく解説\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"gitbook-と-honkit-の違い\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#gitbook-%E3%81%A8-honkit-%E3%81%AE%E9%81%95%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eGitBook と HonKit の違い\u003c/h1\u003e\n\n\u003cp\u003eGitBook と HonKit の違いについては Honkit 製作者の記事が1番わかりやすかったです。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://efcl.info/2020/06/19/githon/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eGitBookをForkしてHonKitを作りました - Web Scratch\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e変更点は book.json で行っていたプラグインの管理を、package.json と npm でのパッケージ（プラグイン）管理に寄せただけで、あとは既存のままで動くとのことでした。\u003c/p\u003e\n\n\u003cp\u003e具体的には book.json の \u003ccode\u003eplugins\u003c/code\u003e に入れていたプラグインを \u003ccode\u003ehonkit-plugin-*\u003c/code\u003e または \u003ccode\u003egitbook-plugin-*\u003c/code\u003e （ \u003ccode\u003e*\u003c/code\u003e はプラグイン名に置き換える）という名前で \u003ccode\u003enpm install \u0026lt;package\u0026gt;\u003c/code\u003e して、\u003ccode\u003egitbook install\u003c/code\u003e の代わりに \u003ccode\u003enpm install\u003c/code\u003e してくださいとのことです。\u003c/p\u003e\n\n\u003cp\u003eその他、build や serve などのコマンドが \u003ccode\u003egitbook xxx\u003c/code\u003e から \u003ccode\u003ehonkit xxx\u003c/code\u003e に変更されました。\u003c/p\u003e\n\n\u003cp\u003e詳しくは\u003ca href=\"https://github.com/HonKit/HonKit\" rel=\"nofollow noopener\" target=\"_blank\"\u003e公式ドキュメント\u003c/a\u003eを参考にしてください。\u003c/p\u003e\n\n\u003cp\u003e試しに GitBook を使っていた環境を HonKit に移行してみたのですが、上記のように、package.json を作成して、必要なプラグインを \u003ccode\u003enpm install\u003c/code\u003e した後に \u003ccode\u003ehonkit build\u003c/code\u003e または \u003ccode\u003ehonkit serve\u003c/code\u003e すれば動きました。\u003c/p\u003e\n\n\u003cp\u003e使用感は GitBook と変わりませんでした。\u003c/p\u003e\n","body":"# HonKit\n\n[公式ドキュメント](https://github.com/HonKit/HonKit)\n\nHonKit 製作者によると GitBook -\u003e HonKit への移行の経緯は以下の通りです。\n\n\u003eGitBookはMarkdownからドキュメントページや書籍を作成するツールですが、 以前OSSで公開されていた[GitBook(legacy)](https://github.com/GitbookIO/gitbook)はDeprecatedとなって開発は止まっています。\n\u003e\n\u003e\u003e⚠️ Deprecation warning:\n\u003e\u003e\n\u003e\u003eAs the efforts of the GitBook team are focused on the GitBook.com platform, the CLI is no longer under active development. All content supported by the CLI are mostly supported by our GitBook.com / GitHub integration. Content hosted on the legacy.gitbook.com will continue working until further notice. For differences with the new vesion, check out our documentation.\n\u003e\u003e\n\u003e代わりにOSSではない https://www.gitbook.com/ の方に移行する形になっています。 つまり、新しいGitBookはGitBook.com上でのホスティングサービスとなっています。\n\u003e\n\u003e（中略）\n\u003e\n\u003e\n\u003eこれを解決するため、[GitBook(legacy)](https://github.com/GitbookIO/gitbook)をForkして[HonKit](https://github.com/HonKit/HonKit)を作りました。\n\u003e\n\u003e\n\u003e 引用元：[GitBookをForkしてHonKitを作りました - Web Scratch](https://efcl.info/2020/06/19/githon/)\n\nGitBook の OSS の開発が止まってしまったので、それの後続として HonKit を fork して開発が続けられていたみたいです。\n\nまた、使用ライセンスは GitBook と同じく Apache License 2.0 になります。\n\n\u003eGitBook is licensed under the Apache License, Version 2.0. See [LICENSE](https://github.com/GitbookIO/gitbook/blob/master/LICENSE) for the full license text.\n\u003e\n\u003e 引用元：[HonKit](https://github.com/HonKit/HonKit)\n\n一応、Apache License 2.0 のライセンスは勝手に再配布などをしなければ商用利用しても良いものになります。\n\n【参考】\n・ [商用利用できるオープンソースライセンスはけっきょくどれで何をすればいいのか？](https://qiita.com/0xfffffff7/items/efbb65521d7708f2db7d)\n・ [Apache License 2.0とは？ライセンス内容をやさしく解説](https://reikawatanabe.com/whats-apache-license-v2/)\n\n# GitBook と HonKit の違い\n\nGitBook と HonKit の違いについては Honkit 製作者の記事が1番わかりやすかったです。\n\n- [GitBookをForkしてHonKitを作りました - Web Scratch](https://efcl.info/2020/06/19/githon/)\n\n変更点は book.json で行っていたプラグインの管理を、package.json と npm でのパッケージ（プラグイン）管理に寄せただけで、あとは既存のままで動くとのことでした。\n\n具体的には book.json の `plugins` に入れていたプラグインを `honkit-plugin-*` または `gitbook-plugin-*` （ `*` はプラグイン名に置き換える）という名前で `npm install \u003cpackage\u003e` して、`gitbook install` の代わりに `npm install` してくださいとのことです。\n\nその他、build や serve などのコマンドが `gitbook xxx` から `honkit xxx` に変更されました。\n\n詳しくは[公式ドキュメント](https://github.com/HonKit/HonKit)を参考にしてください。\n\n試しに GitBook を使っていた環境を HonKit に移行してみたのですが、上記のように、package.json を作成して、必要なプラグインを `npm install` した後に `honkit build` または `honkit serve` すれば動きました。\n\n使用感は GitBook と変わりませんでした。\n","coediting":false,"comments_count":0,"created_at":"2020-11-04T00:27:17+09:00","group":null,"id":"9e0d47b74ce257b31006","likes_count":8,"private":false,"reactions_count":0,"tags":[{"name":"gitbook","versions":[]},{"name":"gitbook-cli","versions":[]},{"name":"honkit","versions":[]}],"title":"GitBook がしれっと HonKit になってた件","updated_at":"2020-12-29T00:47:26+09:00","url":"https://qiita.com/ikuraikura/items/9e0d47b74ce257b31006","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"事象\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BA%8B%E8%B1%A1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e事象\u003c/h1\u003e\n\n\u003cp\u003eタイトルの通りです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"実行環境\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実行環境\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ node -v\nv14.13.1\n\n$ npm -v\n6.14.8\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"実験\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E9%A8%93\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実験\u003c/h1\u003e\n\n\u003cp\u003e以下の3パターンを用意。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ehoge:a\n\n\u003cul\u003e\n\u003cli\u003eelse の処理あり。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ehoge:b\n\n\u003cul\u003e\n\u003cli\u003eelse をつけるが処理を省略。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ehoge:c\n\n\u003cul\u003e\n\u003cli\u003eelse ごと省略。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"json\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003epackage.json\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"err\"\u003e（省略）\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"scripts\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"hoge:a\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"if TRUE; then echo hogehoge; else echo mogemoge; fi\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"hoge:b\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"if TRUE; then echo hogehoge; else; fi\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"hoge:c\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"if TRUE; then echo hogehoge; fi\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"err\"\u003e（省略）\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"hogeaelse-の処理あり\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#hogeaelse-%E3%81%AE%E5%87%A6%E7%90%86%E3%81%82%E3%82%8A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ehoge:a（else の処理あり）\u003c/h2\u003e\n\n\u003cp\u003eもちろん怒られない。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ npm run hoge:a\n\n\u0026gt; vpass_api_spec_document@1.0.0 hoge:a /Users/sugurutakahashi/git/vpass_api_spec_document\n\u0026gt; if TRUE; then echo hogehoge; else echo mogemoge; fi\n\nhogehoge\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"hogebelse-をつけるが処理を省略\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#hogebelse-%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E3%81%8C%E5%87%A6%E7%90%86%E3%82%92%E7%9C%81%E7%95%A5\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ehoge:b（else をつけるが処理を省略）\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e怒られる。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ npm run hoge:b\n\n\u0026gt; vpass_api_spec_document@1.0.0 hoge:b /Users/sugurutakahashi/git/vpass_api_spec_document\n\u0026gt; if TRUE; then echo hogehoge; else; fi\n\nsh: -c: line 0: syntax error near unexpected token `;'\nsh: -c: line 0: `if TRUE; then echo hogehoge; else; fi'\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 2\nnpm ERR! vpass_api_spec_document@1.0.0 hoge:b: `if TRUE; then echo hogehoge; else; fi`\nnpm ERR! Exit status 2\nnpm ERR! \nnpm ERR! Failed at the vpass_api_spec_document@1.0.0 hoge:b script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/sugurutakahashi/.npm/_logs/2020-11-03T15_03_31_621Z-debug.log\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"hogecelse-ごと省略\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#hogecelse-%E3%81%94%E3%81%A8%E7%9C%81%E7%95%A5\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ehoge:c（else ごと省略）\u003c/h2\u003e\n\n\u003cp\u003e怒られない。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ npm run hoge:c\n\n\u0026gt; vpass_api_spec_document@1.0.0 hoge:c /Users/sugurutakahashi/git/vpass_api_spec_document\n\u0026gt; if TRUE; then echo hogehoge; fi\n\nhogehoge\nSuguruTakahashiMBP sugurutakahashi ~/git/vpass_api_spec_document $ \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003enpm-scriptsのif文ワンライナーで else の処理を省略する場合は \u003ccode\u003eelse\u003c/code\u003e とは書いてはいけない。\u003c/strong\u003e\u003c/p\u003e\n","body":"# 事象\n\nタイトルの通りです。\n\n# 実行環境\n\n```\n$ node -v\nv14.13.1\n\n$ npm -v\n6.14.8\n```\n\n# 実験\n\n以下の3パターンを用意。\n\n- hoge:a\n    - else の処理あり。\n- hoge:b\n    - else をつけるが処理を省略。\n- hoge:c\n    - else ごと省略。\n\n```json:package.json\n{\n  （省略）\n  \"scripts\": {\n    \"hoge:a\": \"if TRUE; then echo hogehoge; else echo mogemoge; fi\",\n    \"hoge:b\": \"if TRUE; then echo hogehoge; else; fi\",\n    \"hoge:c\": \"if TRUE; then echo hogehoge; fi\"\n  },\n  （省略）\n}\n```\n\n## hoge:a（else の処理あり）\n\nもちろん怒られない。\n\n```\n$ npm run hoge:a\n\n\u003e vpass_api_spec_document@1.0.0 hoge:a /Users/sugurutakahashi/git/vpass_api_spec_document\n\u003e if TRUE; then echo hogehoge; else echo mogemoge; fi\n\nhogehoge\n```\n\n## hoge:b（else をつけるが処理を省略）\n\n**怒られる。**\n\n```\n$ npm run hoge:b\n\n\u003e vpass_api_spec_document@1.0.0 hoge:b /Users/sugurutakahashi/git/vpass_api_spec_document\n\u003e if TRUE; then echo hogehoge; else; fi\n\nsh: -c: line 0: syntax error near unexpected token `;'\nsh: -c: line 0: `if TRUE; then echo hogehoge; else; fi'\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 2\nnpm ERR! vpass_api_spec_document@1.0.0 hoge:b: `if TRUE; then echo hogehoge; else; fi`\nnpm ERR! Exit status 2\nnpm ERR! \nnpm ERR! Failed at the vpass_api_spec_document@1.0.0 hoge:b script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/sugurutakahashi/.npm/_logs/2020-11-03T15_03_31_621Z-debug.log\n```\n\n## hoge:c（else ごと省略）\n\n怒られない。\n\n```\n$ npm run hoge:c\n\n\u003e vpass_api_spec_document@1.0.0 hoge:c /Users/sugurutakahashi/git/vpass_api_spec_document\n\u003e if TRUE; then echo hogehoge; fi\n\nhogehoge\nSuguruTakahashiMBP sugurutakahashi ~/git/vpass_api_spec_document $ \n```\n\n# まとめ\n**npm-scriptsのif文ワンライナーで else の処理を省略する場合は `else` とは書いてはいけない。**\n","coediting":false,"comments_count":0,"created_at":"2020-11-04T00:11:50+09:00","group":null,"id":"f44502a22ad9e2167e00","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"npm","versions":[]},{"name":"npm-scripts","versions":[]}],"title":"npm-scripts の if 文ワンライナーで else の処理に何も書かなかったら怒られる件","updated_at":"2021-03-05T03:28:54+09:00","url":"https://qiita.com/ikuraikura/items/f44502a22ad9e2167e00","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"前提\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%89%8D%E6%8F%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e前提\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003ecoreutils\u003c/code\u003e や \u003ccode\u003etimeout\u003c/code\u003e を使うのであれば\u003ca href=\"https://qiita.com/ma2saka/items/741b614418bf8fce04de\" id=\"reference-ce6e2183f3df02840cbe\"\u003eこちら\u003c/a\u003eを参照してください。\u003c/p\u003e\n\n\u003cp\u003e今回が Mac に brew で何かを入れたくなかったので使わない方法を模索した結果になります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"やりたいこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eやりたいこと\u003c/h1\u003e\n\n\u003cp\u003e時間制限を設けて毎秒処理を実行させるワンライナーを書くこと。\u003c/p\u003e\n\n\u003cp\u003eもっと具体的には一定時間 「waiting...」 と毎秒 echo し続けて待たせること。\u003c/p\u003e\n\n\u003cp\u003e正直、「waiting...」と一回表示させるだけでもよかったのですが、コンソールが動いていないと長時間待たせるときに、ユーザーが不安になるのかなーと思った次第です。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"結論\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E8%AB%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結論\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e時間制限を設けて毎秒処理を実行させるワンライナー\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003efor i in `seq 実行させたい時間(秒)`; do 実行させたいコマンド; sleep 1; done\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eサンプル\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ for i in `seq 5`; do echo waiting...; sleep 1; done\nwaiting...\nwaiting...\nwaiting...\nwaiting...\nwaiting...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"参考\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8F%82%E8%80%83\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e参考\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"seq\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#seq\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eseq\u003c/h2\u003e\n\n\u003cp\u003efor文の省略にはよく seq が用いられます。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.atmarkit.co.jp/ait/articles/1705/18/news033.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e【 seq 】コマンド――数字の列を出力する\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eseqの挙動\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ seq 5\n1\n2\n3\n4\n5\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"応用版\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%BF%9C%E7%94%A8%E7%89%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e応用版\u003c/h1\u003e\n\n\u003cp\u003e実際使ってみたところ、1秒ごとに「waiting...」が表示されると、コンソールが忙しかったので、2秒ごとにしたくなりました。\u003c/p\u003e\n\n\u003cp\u003e一応、2秒だけではなく n秒 でも対応できるように修正して使いました。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"結論n秒ごとに実行する版\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E8%AB%96n%E7%A7%92%E3%81%94%E3%81%A8%E3%81%AB%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E7%89%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結論（n秒ごとに実行する版）\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003efor i in `seq 実行させたい時間(秒)`; do if [ $i%n秒 -eq 0 ]; then 処理; else; fi; sleep 1; done\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eサンプル\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ for i in `seq 5`; do if [[ $i%2 -eq 0 ]]; then echo waiting...; else; fi; sleep 1; done\nwaiting...\nwaiting...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"応用版の解説\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%BF%9C%E7%94%A8%E7%89%88%E3%81%AE%E8%A7%A3%E8%AA%AC\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e応用版の解説\u003c/h2\u003e\n\n\u003cp\u003eただif文のワンライナーと組み合わせただけです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eif文ワンライナー\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003eif [ 条件式 ]; then 処理; else 処理; fi\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e以下は \u003ccode\u003e$i\u003c/code\u003e が 2 で割って割り切れた時のみ echo するワンライナーの例です。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eサンプル\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003eif [[ $i%2 -eq 0 ]]; then echo waiting...; else; fi\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n","body":"# 前提\n\n`coreutils` や `timeout` を使うのであれば[こちら](https://qiita.com/ma2saka/items/741b614418bf8fce04de)を参照してください。\n\n今回が Mac に brew で何かを入れたくなかったので使わない方法を模索した結果になります。\n\n# やりたいこと\n時間制限を設けて毎秒処理を実行させるワンライナーを書くこと。\n\nもっと具体的には一定時間 「waiting...」 と毎秒 echo し続けて待たせること。\n\n正直、「waiting...」と一回表示させるだけでもよかったのですが、コンソールが動いていないと長時間待たせるときに、ユーザーが不安になるのかなーと思った次第です。\n\n# 結論\n\n```:時間制限を設けて毎秒処理を実行させるワンライナー\nfor i in `seq 実行させたい時間(秒)`; do 実行させたいコマンド; sleep 1; done\n```\n\n```:サンプル\n$ for i in `seq 5`; do echo waiting...; sleep 1; done\nwaiting...\nwaiting...\nwaiting...\nwaiting...\nwaiting...\n```\n\n# 参考\n\n## seq\n\nfor文の省略にはよく seq が用いられます。\n\n[【 seq 】コマンド――数字の列を出力する](https://www.atmarkit.co.jp/ait/articles/1705/18/news033.html)\n\n```:seqの挙動\n$ seq 5\n1\n2\n3\n4\n5\n```\n\n# 応用版\n\n実際使ってみたところ、1秒ごとに「waiting...」が表示されると、コンソールが忙しかったので、2秒ごとにしたくなりました。\n\n一応、2秒だけではなく n秒 でも対応できるように修正して使いました。\n\n## 結論（n秒ごとに実行する版）\n\n```\nfor i in `seq 実行させたい時間(秒)`; do if [ $i%n秒 -eq 0 ]; then 処理; else; fi; sleep 1; done\n```\n\n```:サンプル\n$ for i in `seq 5`; do if [[ $i%2 -eq 0 ]]; then echo waiting...; else; fi; sleep 1; done\nwaiting...\nwaiting...\n```\n\n## 応用版の解説 \n\nただif文のワンライナーと組み合わせただけです。\n\n```:if文ワンライナー\nif [ 条件式 ]; then 処理; else 処理; fi\n```\n\n以下は `$i` が 2 で割って割り切れた時のみ echo するワンライナーの例です。\n\n```:サンプル\nif [[ $i%2 -eq 0 ]]; then echo waiting...; else; fi\n```\n\n","coediting":false,"comments_count":0,"created_at":"2020-11-03T23:29:52+09:00","group":null,"id":"1105a3b7bbf9b40e7528","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"ShellScript","versions":[]},{"name":"Bash","versions":[]},{"name":"shell","versions":[]},{"name":"coreutils","versions":[]},{"name":"timeout","versions":[]}],"title":"時間制限を設けて毎秒処理を実行させるワンライナー【coreutils、timeout 使わない】","updated_at":"2020-11-25T08:55:40+09:00","url":"https://qiita.com/ikuraikura/items/1105a3b7bbf9b40e7528","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"rebase\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#rebase\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003erebase\u003c/h1\u003e\n\n\u003cp\u003e例）develop ブランチを feature/xxxxxxx ブランチ にリベースする時\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# 目的のブランチにチェックアウト\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout feature/xxxxxxx\n\n\u003cspan class=\"c\"\u003e# rebase\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit rebase origin/develop\n\n\u003cspan class=\"c\"\u003e# コンフリクトしなければここで終了\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# コンフリクトしたら以下の手順\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e##############################################\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# コンフリクトの解消\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# 修正が完了したら add\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit add \u003cspan class=\"nt\"\u003e--all\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# 再 rebase\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit rebase \u003cspan class=\"nt\"\u003e--continue\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# force push\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit push \u003cspan class=\"nt\"\u003e--force-with-lease\u003c/span\u003e origin HEAD\n\n\u003cspan class=\"c\"\u003e##############################################\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# rebase に前に戻りたい場合\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit rebase \u003cspan class=\"nt\"\u003e--abort\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"特定の文字列の入ったソースの修正を探す\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%89%B9%E5%AE%9A%E3%81%AE%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E5%85%A5%E3%81%A3%E3%81%9F%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AE%E4%BF%AE%E6%AD%A3%E3%82%92%E6%8E%A2%E3%81%99\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e特定の文字列の入ったソースの修正を探す\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e-G\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"検索ワード\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"自動コミットしない-cherry-pick\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%87%AA%E5%8B%95%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%81%97%E3%81%AA%E3%81%84-cherry-pick\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e自動コミットしない cherry-pick\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003e-n\u003c/code\u003e をつけると自動コミットしないので、コミットメッセージなどを変えたりするときに便利です。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ git cherry-pick -n \u0026lt;対象のコミット番号\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"リモートの-hogehoge-ブランチをクローンしながらチェックアウトする\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%81%AE-hogehoge-%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%82%92%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%B3%E3%81%97%E3%81%AA%E3%81%8C%E3%82%89%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%82%A2%E3%82%A6%E3%83%88%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eリモートの hogehoge ブランチをクローンしながらチェックアウトする\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ git checkout -b hogehoge origin/hogehoge\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"あとから-gitignore-した-hogehogetxt-ファイルをリモートリポジトリから削除する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%82%E3%81%A8%E3%81%8B%E3%82%89-gitignore-%E3%81%97%E3%81%9F-hogehogetxt-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%8B%E3%82%89%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eあとから .gitignore した hogehoge.txt ファイルをリモートリポジトリから削除する\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ git rm --cached hogehoge.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"ローカルの-hogehoge-ブランチをリモートの-hogehoge-ブランチで強制上書きする\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AE-hogehoge-%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%82%92%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%81%AE-hogehoge-%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%81%A7%E5%BC%B7%E5%88%B6%E4%B8%8A%E6%9B%B8%E3%81%8D%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eローカルの hogehoge ブランチをリモートの hogehoge ブランチで強制上書きする\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ git fetch origin hogehoge\n$ git reset --hard origin/hogehoge\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこれでも可\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ git checkout hogehoge\n$ git reset --hard HEAD\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e※ \u003cdel\u003e正直これをするぐらいなら、ローカルブランチを削除してもう一度クローンすればいいと思います。\u003c/del\u003e そういう観点ではなく、チェックアウトできなくて困ったときにするコマンドとして使えます。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"リモートの-hogehogetxt-ファイルを残したままコミット時にローカルの変更を無視する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%81%AE-hogehogetxt-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E6%AE%8B%E3%81%97%E3%81%9F%E3%81%BE%E3%81%BE%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E6%99%82%E3%81%AB%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AE%E5%A4%89%E6%9B%B4%E3%82%92%E7%84%A1%E8%A6%96%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eリモートの hogehoge.txt ファイルを残したままコミット時にローカルの変更を無視する\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e# 無視するようにする\n$ git update-index --skip-worktree hogehoge.txt\n\n# 確認\n$ git ls-files -v | grep ^S\n\n# 解除する場合\n$ git update-index --no-skip-worktree hogehoge.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eチーム開発での \u003ccode\u003e--skip-worktree\u003c/code\u003e での運用は事故が起きやすいので、可能であればこの運用は避けることをお勧めします。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"削除したファイルを探す\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%89%8A%E9%99%A4%E3%81%97%E3%81%9F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E6%8E%A2%E3%81%99\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e削除したファイルを探す\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ git log --diff-filter=D --summary \u0026lt;削除したファイルがあったパス\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"あとから追加された-gitignore-の設定を反映させて対象のファイルを削除する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%82%E3%81%A8%E3%81%8B%E3%82%89%E8%BF%BD%E5%8A%A0%E3%81%95%E3%82%8C%E3%81%9F-gitignore-%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E5%8F%8D%E6%98%A0%E3%81%95%E3%81%9B%E3%81%A6%E5%AF%BE%E8%B1%A1%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eあとから追加された .gitignore の設定を反映させて対象のファイルを削除する\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ git rm --cached `git ls-files --full-name -i --exclude-from=.gitignore`\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\n・\u003ca href=\"https://qiita.com/yuuAn/items/b1d1df2e810fd6b92574\" id=\"reference-f6a92e330058dbd666cc\"\u003eあとからまとめて.gitignoreする方法\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"develop-ブランチにマージされたローカルブランチを削除するmaster-ブランチ除く\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#develop-%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%81%AB%E3%83%9E%E3%83%BC%E3%82%B8%E3%81%95%E3%82%8C%E3%81%9F%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%82%92%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8Bmaster-%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E9%99%A4%E3%81%8F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003edevelop ブランチにマージされたローカルブランチを削除する（master ブランチ除く）\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ git branch --merged develop | grep -vE '^\\*|master$|develop$' | xargs -I % git branch -d %\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e参考：\u003ca href=\"https://gist.github.com/miukoba/fc3c10a25c1c675c1e97\" rel=\"nofollow noopener\" target=\"_blank\"\u003eマージ済みのローカルブランチを全て削除\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"誤って-push-した1つのコミットをなかったことにする\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%AA%A4%E3%81%A3%E3%81%A6-push-%E3%81%97%E3%81%9F1%E3%81%A4%E3%81%AE%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%82%92%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8%E3%81%AB%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e誤って push した1つのコミットをなかったことにする\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e# 該当のブランチに移動\n\n# ローカルを元にもどす\n$ git reset --hard HEAD^\n\n# 強制上書き\n$ git push --force-with-lease origin HEAD\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"stash-をすべて消去する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#stash-%E3%82%92%E3%81%99%E3%81%B9%E3%81%A6%E6%B6%88%E5%8E%BB%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003estash をすべて消去する\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ git stash clear\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"レポジトリを複製する方法\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AC%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92%E8%A4%87%E8%A3%BD%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eレポジトリを複製する方法\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e$ cd 複製したいレポジトリのディレクトリ名\n$ git worktree add ../複製される新たなディレクトリ名 適当なブランチ名（feature/hogehogeなど）\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこれをやると .gitignore の設定がうまいことされていれば、旧バージョンのライブラリをインストールしたリポジトリの状態を残しておくことができます。\u003c/p\u003e\n\n\u003cp\u003eバージョンを遡って検証するために毎回ライブラリをインストールしなおさないといけない、というときにこのコマンドでレポジトリを複製しておくとめちゃくちゃ便利です。\u003c/p\u003e\n\n\u003cp\u003e別ディレクトリを作って git clone すればほぼ同じことが実現できますが、このコマンドで複数すれば stash なども維持することができるので、私はこちらをお勧めします。\u003c/p\u003e\n\n\u003cp\u003e参考：\u003ca href=\"https://qiita.com/yoichi22/items/8f92110f24690ca8966f\" id=\"reference-b842f1246275bc1bef50\"\u003egit worktreeを使ってみる\u003c/a\u003e\u003c/p\u003e\n","body":"# rebase\n\n例）develop ブランチを feature/xxxxxxx ブランチ にリベースする時\n\n```bash\n# 目的のブランチにチェックアウト\n$ git checkout feature/xxxxxxx\n\n# rebase\n$ git rebase origin/develop\n\n# コンフリクトしなければここで終了\n\n# コンフリクトしたら以下の手順\n\n##############################################\n\n# コンフリクトの解消\n\n# 修正が完了したら add\n$ git add --all\n\n# 再 rebase\n$ git rebase --continue\n\n# force push\n$ git push --force-with-lease origin HEAD\n\n##############################################\n\n# rebase に前に戻りたい場合\n$ git rebase --abort\n```\n\n# 特定の文字列の入ったソースの修正を探す\n\n```bash\n$ git log -G\"検索ワード\"\n```\n\n# 自動コミットしない cherry-pick\n\n`-n` をつけると自動コミットしないので、コミットメッセージなどを変えたりするときに便利です。\n\n```\n$ git cherry-pick -n \u003c対象のコミット番号\u003e\n```\n\n# リモートの hogehoge ブランチをクローンしながらチェックアウトする\n\n```\n$ git checkout -b hogehoge origin/hogehoge\n```\n\n# あとから .gitignore した hogehoge.txt ファイルをリモートリポジトリから削除する\n\n```\n$ git rm --cached hogehoge.txt\n```\n\n# ローカルの hogehoge ブランチをリモートの hogehoge ブランチで強制上書きする\n\n```\n$ git fetch origin hogehoge\n$ git reset --hard origin/hogehoge\n```\n\nこれでも可\n\n```\n$ git checkout hogehoge\n$ git reset --hard HEAD\n```\n\n※ ~~正直これをするぐらいなら、ローカルブランチを削除してもう一度クローンすればいいと思います。~~ そういう観点ではなく、チェックアウトできなくて困ったときにするコマンドとして使えます。\n\n# リモートの hogehoge.txt ファイルを残したままコミット時にローカルの変更を無視する\n\n```\n# 無視するようにする\n$ git update-index --skip-worktree hogehoge.txt\n\n# 確認\n$ git ls-files -v | grep ^S\n\n# 解除する場合\n$ git update-index --no-skip-worktree hogehoge.txt\n```\n\nチーム開発での `--skip-worktree` での運用は事故が起きやすいので、可能であればこの運用は避けることをお勧めします。\n\n# 削除したファイルを探す\n\n```\n$ git log --diff-filter=D --summary \u003c削除したファイルがあったパス\u003e\n```\n\n# あとから追加された .gitignore の設定を反映させて対象のファイルを削除する\n\n```\n$ git rm --cached `git ls-files --full-name -i --exclude-from=.gitignore`\n```\n\n【参考】\n・[あとからまとめて.gitignoreする方法](https://qiita.com/yuuAn/items/b1d1df2e810fd6b92574)\n\n# develop ブランチにマージされたローカルブランチを削除する（master ブランチ除く）\n\n```\n$ git branch --merged develop | grep -vE '^\\*|master$|develop$' | xargs -I % git branch -d %\n```\n\n参考：[マージ済みのローカルブランチを全て削除](https://gist.github.com/miukoba/fc3c10a25c1c675c1e97)\n\n# 誤って push した1つのコミットをなかったことにする\n\n```\n# 該当のブランチに移動\n\n# ローカルを元にもどす\n$ git reset --hard HEAD^\n\n# 強制上書き\n$ git push --force-with-lease origin HEAD\n```\n\n# stash をすべて消去する\n\n```\n$ git stash clear\n```\n\n# レポジトリを複製する方法\n\n```\n$ cd 複製したいレポジトリのディレクトリ名\n$ git worktree add ../複製される新たなディレクトリ名 適当なブランチ名（feature/hogehogeなど）\n```\n\nこれをやると .gitignore の設定がうまいことされていれば、旧バージョンのライブラリをインストールしたリポジトリの状態を残しておくことができます。\n\nバージョンを遡って検証するために毎回ライブラリをインストールしなおさないといけない、というときにこのコマンドでレポジトリを複製しておくとめちゃくちゃ便利です。\n\n別ディレクトリを作って git clone すればほぼ同じことが実現できますが、このコマンドで複数すれば stash なども維持することができるので、私はこちらをお勧めします。\n\n参考：[git worktreeを使ってみる](https://qiita.com/yoichi22/items/8f92110f24690ca8966f)\n","coediting":false,"comments_count":0,"created_at":"2020-10-31T05:43:25+09:00","group":null,"id":"095af2e804ca7cedfa70","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"Git","versions":[]}],"title":"git のコマンド小技集","updated_at":"2021-11-09T11:45:22+09:00","url":"https://qiita.com/ikuraikura/items/095af2e804ca7cedfa70","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"前提\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%89%8D%E6%8F%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e前提\u003c/h1\u003e\n\n\u003cp\u003esourcetree を使っています。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"登場ブランチ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%99%BB%E5%A0%B4%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e登場ブランチ\u003c/h1\u003e\n\n\u003cp\u003e・根元にしたいブランチ（今回はリモートの hogeDevelop ブランチと想定）\u003cbr\u003e\n・作業中のブランチ（今回はローカルの feature/hogehoge ブランチと想定）\u003c/p\u003e\n\n\u003cp\u003e※ hogeDevelop と feature/hogehoge は適宜置き換えてください。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"手順\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%89%8B%E9%A0%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e手順\u003c/h1\u003e\n\n\u003cp\u003e \u003cbr\u003e\n1. 作業ブランチに checkout する （\u003ccode\u003egit checkout feature/hogehoge\u003c/code\u003e）\u003cbr\u003e\n2. \u003ccode\u003egit rebase origin/hogeDevelop\u003c/code\u003e コマンドの実行し rebase を行う。このときにコンフリクトがなければそのままリベースされて終了なので以降の手順はしなくても大丈夫です。コンフリクトしている場合はその旨がコンソールに表示されるので、以降の手順を実施する。\u003cbr\u003e\n3. sourcetree 上でコンフリクトしているファイルが三角の注意マークで表示されるので、ファイルを選択して右クリックから「Finderを表示」から、VSCode など適当なエディターで開いてコンフリクトを解消する。この際、どのように修正して良いかわからなけれなば関係者と相談する。\u003cbr\u003e\n4. 修正が終了したら \u003ccode\u003egit add --all\u003c/code\u003e コマンドを実行する。\u003cbr\u003e\n5. エラーがなければ \u003ccode\u003egit rebase --continue\u003c/code\u003e コマンドを実行する。成功すると、rebase コマンドでエラーで詰まっていたコミットが反映される。\u003cbr\u003e\n6. rebase 後の作業ブランチを普通に push するとエラーになるので \u003ccode\u003egit push --force-with-lease origin HEAD\u003c/code\u003e コマンドで強制的に push する。\u003c/p\u003e\n\n\u003cp\u003e備考1：sourcetree での操作はコンフリクトとしているファイルを探す作業のため、他の方法でも構いません。\u003cbr\u003e\n備考2：コンフリクトの解消作業で \u003ccode\u003egit rebase --abort\u003c/code\u003e コマンドを実行すると rebase コマンドを実行する前に戻すことができます。\u003c/p\u003e\n","body":"# 前提\nsourcetree を使っています。\n\n\n# 登場ブランチ\n\n・根元にしたいブランチ（今回はリモートの hogeDevelop ブランチと想定）\n・作業中のブランチ（今回はローカルの feature/hogehoge ブランチと想定）\n\n※ hogeDevelop と feature/hogehoge は適宜置き換えてください。\n\n# 手順\n \n1. 作業ブランチに checkout する （`git checkout feature/hogehoge`）\n2. `git rebase origin/hogeDevelop` コマンドの実行し rebase を行う。このときにコンフリクトがなければそのままリベースされて終了なので以降の手順はしなくても大丈夫です。コンフリクトしている場合はその旨がコンソールに表示されるので、以降の手順を実施する。\n3. sourcetree 上でコンフリクトしているファイルが三角の注意マークで表示されるので、ファイルを選択して右クリックから「Finderを表示」から、VSCode など適当なエディターで開いてコンフリクトを解消する。この際、どのように修正して良いかわからなけれなば関係者と相談する。\n4. 修正が終了したら `git add --all` コマンドを実行する。\n5. エラーがなければ `git rebase --continue` コマンドを実行する。成功すると、rebase コマンドでエラーで詰まっていたコミットが反映される。\n6. rebase 後の作業ブランチを普通に push するとエラーになるので `git push --force-with-lease origin HEAD` コマンドで強制的に push する。\n\n\n備考1：sourcetree での操作はコンフリクトとしているファイルを探す作業のため、他の方法でも構いません。\n備考2：コンフリクトの解消作業で `git rebase --abort` コマンドを実行すると rebase コマンドを実行する前に戻すことができます。\n","coediting":false,"comments_count":0,"created_at":"2020-10-31T05:28:48+09:00","group":null,"id":"8aa50b0171ea21ab85e3","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"Git","versions":[]}],"title":"git rebase のやり方","updated_at":"2021-07-13T15:00:26+09:00","url":"https://qiita.com/ikuraikura/items/8aa50b0171ea21ab85e3","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"これがすべて\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%93%E3%82%8C%E3%81%8C%E3%81%99%E3%81%B9%E3%81%A6\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eこれがすべて\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell-session\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e#\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e圧縮\n\u003cspan class=\"go\"\u003etar -cvzfp xxxxx.tar.gz ディレクトリ名\n\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e#\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e解凍\n\u003cspan class=\"go\"\u003etar -xvzfp xxxxx.tar.gz\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"オプションの説明\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E8%AA%AC%E6%98%8E\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eオプションの説明\u003c/h1\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: center\"\u003eオプション\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eオプションの意味\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center\"\u003e-c\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e新しくアーカイブファイルを作成する\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center\"\u003e-x\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003eアーカイブファイルを展開する\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center\"\u003e-v\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e処理の進行しているファイル名を表示する\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center\"\u003e-z\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003egzipでの圧縮または展開を同時に行う\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center\"\u003e-f\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003eファイル名の指定\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center\"\u003e-p\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003eパーミッションを維持する\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"参考\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8F%82%E8%80%83\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e参考\u003c/h1\u003e\n\n\u003cp\u003e【 tar 】コマンド――アーカイブファイルを作成する／展開する\u003cbr\u003e\n\u003ca href=\"https://www.atmarkit.co.jp/ait/articles/1608/15/news015.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://www.atmarkit.co.jp/ait/articles/1608/15/news015.html\u003c/a\u003e\u003c/p\u003e\n","body":"\n# これがすべて\n\n```shell-session\n# 圧縮\ntar -cvzfp xxxxx.tar.gz ディレクトリ名\n\n# 解凍\ntar -xvzfp xxxxx.tar.gz\n```\n\n# オプションの説明\n| オプション | オプションの意味                       | \n| :----------:| :-------------------------------------- | \n| -c       | 新しくアーカイブファイルを作成する     | \n| -x       | アーカイブファイルを展開する           | \n| -v       | 処理の進行しているファイル名を表示する | \n| -z       | gzipでの圧縮または展開を同時に行う     | \n| -f       | ファイル名の指定                       | \n| -p       | パーミッションを維持する               | \n\n# 参考\n\n【 tar 】コマンド――アーカイブファイルを作成する／展開する\nhttps://www.atmarkit.co.jp/ait/articles/1608/15/news015.html\n","coediting":false,"comments_count":0,"created_at":"2020-10-31T04:45:22+09:00","group":null,"id":"e2c7dc8d845d7f36061a","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"tar","versions":[]},{"name":"tar.gz","versions":[]}],"title":"これだけわかれば大丈夫な tar コマンド","updated_at":"2021-04-24T08:35:46+09:00","url":"https://qiita.com/ikuraikura/items/e2c7dc8d845d7f36061a","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003eまったく本業ではありませんが、Excelのマクロを書く機会がありました。\u003cbr\u003e\nとりあえず以下の4行を入れると処理に影響なく早くできたので共有します。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"再描画を止める\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%86%8D%E6%8F%8F%E7%94%BB%E3%82%92%E6%AD%A2%E3%82%81%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e再描画を止める\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003eApplication.ScreenUpdating = False\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"イベントを止める\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%82%92%E6%AD%A2%E3%82%81%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eイベントを止める\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003eApplication.EnableEvents = False\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"カーソルを砂時計にする\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%AB%E3%83%BC%E3%82%BD%E3%83%AB%E3%82%92%E7%A0%82%E6%99%82%E8%A8%88%E3%81%AB%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eカーソルを砂時計にする\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003eApplication.Cursor = xlWait \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"アラートを止める\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%A2%E3%83%A9%E3%83%BC%E3%83%88%E3%82%92%E6%AD%A2%E3%82%81%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eアラートを止める\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003eApplication.DisplayAlerts = False\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"サンプル\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eサンプル\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003eSub sampleSub()\nApplication.ScreenUpdating = False\nApplication.EnableEvents = False\nApplication.Cursor = xlWait\nMsgBox \"処理を開始します\"\nApplication.DisplayAlerts = False\nCall 呼びたい関数\nApplication.DisplayAlerts = True\nApplication.ScreenUpdating = True\nApplication.EnableEvents = True\nApplication.Cursor = xlDefault\nMsgBox \"処理を終了します\"\nEnd Sub\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"その他\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%9D%E3%81%AE%E4%BB%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eその他\u003c/h1\u003e\n\n\u003cp\u003e基本的にカラム（セル）の挿入や削除は処理が重いので、セルのコピーや貼り付けなどで頑張った方がいいです。\u003c/p\u003e\n","body":"# はじめに\nまったく本業ではありませんが、Excelのマクロを書く機会がありました。\nとりあえず以下の4行を入れると処理に影響なく早くできたので共有します。\n\n# 再描画を止める\n\n```\nApplication.ScreenUpdating = False\n```\n\n# イベントを止める\n\n```\nApplication.EnableEvents = False\n```\n\n# カーソルを砂時計にする\n\n```\nApplication.Cursor = xlWait \n```\n\n# アラートを止める\n\n```\nApplication.DisplayAlerts = False\n```\n\n# サンプル\n\n```\nSub sampleSub()\nApplication.ScreenUpdating = False\nApplication.EnableEvents = False\nApplication.Cursor = xlWait\nMsgBox \"処理を開始します\"\nApplication.DisplayAlerts = False\nCall 呼びたい関数\nApplication.DisplayAlerts = True\nApplication.ScreenUpdating = True\nApplication.EnableEvents = True\nApplication.Cursor = xlDefault\nMsgBox \"処理を終了します\"\nEnd Sub\n```\n\n# その他\n\n基本的にカラム（セル）の挿入や削除は処理が重いので、セルのコピーや貼り付けなどで頑張った方がいいです。\n","coediting":false,"comments_count":0,"created_at":"2020-10-31T04:18:52+09:00","group":null,"id":"da057c3652a745ac65d9","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"Excel","versions":[]},{"name":"VBA","versions":[]},{"name":"VBAマクロ","versions":[]}],"title":"たった4行でExcelマクロを劇的に早くする方法","updated_at":"2020-10-31T04:18:52+09:00","url":"https://qiita.com/ikuraikura/items/da057c3652a745ac65d9","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e以下の記事を見ながら、手持ちの iPhone SE（第二世代）iOS 14.0.1 のデバイスで、mitmproxy 経由による通信内容の確認をしてみたときの備忘録になります。\u003c/p\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\nモバイルアプリ開発者のための mitmproxy 入門\u003cbr\u003e\n\u003ca href=\"https://qiita.com/hkurokawa/items/9034274cc1b9e1405c68\" class=\"autolink\" id=\"reference-7b6b649e9a2a3beca780\"\u003ehttps://qiita.com/hkurokawa/items/9034274cc1b9e1405c68\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003emitmproxy そもそもの使い方については触れていません。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"動作環境\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8B%95%E4%BD%9C%E7%92%B0%E5%A2%83\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e動作環境\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"mac\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#mac\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eMac\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emitmproxy \u003cspan class=\"nt\"\u003e--version\u003c/span\u003e\nMitmproxy: 5.2\nPython:    3.8.2\nOpenSSL:   OpenSSL 1.1.1g  21 Apr 2020\nPlatform:  macOS-10.15.7-x86_64-i386-64bit\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"iphone\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#iphone\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eiPhone\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eデバイス：iPhone SE（第二世代）\u003c/li\u003e\n\u003cli\u003eiOS：14.0.1\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"設定手順\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A8%AD%E5%AE%9A%E6%89%8B%E9%A0%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e設定手順\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"1-mac-が接続している-wi-fi-の-ip-アドレスの確認\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#1-mac-%E3%81%8C%E6%8E%A5%E7%B6%9A%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B-wi-fi-%E3%81%AE-ip-%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%81%AE%E7%A2%BA%E8%AA%8D\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e1. Mac が接続している Wi-Fi の IP アドレスの確認\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eステータスバーのネットワークアイコン \u0026gt; \"ネットワーク\"環境設定を開く\u003c/li\u003e\n\u003cli\u003eMac が接続している IP アドレスの確認\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/ebadd386000885fe7c45fe93d3566e37f29778a4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f37646631653663322d623864632d333737642d656461392d3235343932303137373536342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F7df1e6c2-b8dc-377d-eda9-254920177564.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=5d636eec084b8af1f9c6fd61ed6ae33b\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/7df1e6c2-b8dc-377d-eda9-254920177564.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F7df1e6c2-b8dc-377d-eda9-254920177564.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=eb0e3eef14745606af211e766b3cae5f 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/dc3649ae0558a509546b2791750306257a56f445/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f63393332393061612d336263302d366437622d313639332d3139393236383861303565362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fc93290aa-3bc0-6d7b-1693-1992688a05e6.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=e97b44ababa8cd93b0a8f83ff78d2dff\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/c93290aa-3bc0-6d7b-1693-1992688a05e6.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fc93290aa-3bc0-6d7b-1693-1992688a05e6.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=258a6701ebc5253b2f5dfc8bd42f9333 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"2-iphone-のプロキシ設定\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#2-iphone-%E3%81%AE%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7%E8%A8%AD%E5%AE%9A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e2. iPhone のプロキシ設定\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e設定アプリ \u0026gt; Wi-Fi \u0026gt; Mac が接続している Wi-Fi と同じネットワークのi アイコン \u0026gt; プロキシ構成 \u0026gt; 手動\u003c/li\u003e\n\u003cli\u003e以下の内容で設定・保存\n\n\u003cul\u003e\n\u003cli\u003eサーバ：先ほど確認した IP アドレス\u003c/li\u003e\n\u003cli\u003eポート：8080（8080 は mitmproxy のデフォルトのポート番号のため任意の値にすることも可能）\u003c/li\u003e\n\u003cli\u003e認証：オフ\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/2289ccbf6b998c0c4995063735c9a5e6dc1a26bf/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f66633430313732382d633965372d346132382d616665362d6232653634376661613662622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Ffc401728-c9e7-4a28-afe6-b2e647faa6bb.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=b040c3284a0d3bff884cd7c50b896e9f\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/fc401728-c9e7-4a28-afe6-b2e647faa6bb.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Ffc401728-c9e7-4a28-afe6-b2e647faa6bb.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=77a448c4b5e9ecbf3a3f8aa723ac40db 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/fc5d21290973cd2ed13c4b8fcb65b94e074267f1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f62643563353535342d386633372d663465372d393731642d3138396235316539373062622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fbd5c5554-8f37-f4e7-971d-189b51e970bb.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=05ef4eacf12096258985d6ff973f9636\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/bd5c5554-8f37-f4e7-971d-189b51e970bb.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fbd5c5554-8f37-f4e7-971d-189b51e970bb.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=ddb729d43a6edc79d19a9b21ca286c57 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/551d98b08fb3214a441a5d57599ddbeb4a0b1d9c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f31393131333338342d653961642d326164662d326233372d6132366431323364336664382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F19113384-e9ad-2adf-2b37-a26d123d3fd8.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=3a00d0a4d73980dfdf3b4cd90935c74f\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/19113384-e9ad-2adf-2b37-a26d123d3fd8.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F19113384-e9ad-2adf-2b37-a26d123d3fd8.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=be8f9320347158ff061c7ac8b8edf108 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/d1e014b419d3a9c7aa56fac7557df2cb7f46ce67/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f33333836383730642d323230352d353463322d646537382d3338626265306538393331382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F3386870d-2205-54c2-de78-38bbe0e89318.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=fc9dda44701ca8db2978ae0be59460ef\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/3386870d-2205-54c2-de78-38bbe0e89318.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F3386870d-2205-54c2-de78-38bbe0e89318.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=6f3c3dd17260b5359ea93b48afb58d1a 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"3-mitmproxy-の立ち上げ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#3-mitmproxy-%E3%81%AE%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%92\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e3. mitmproxy の立ち上げ\u003c/h2\u003e\n\n\u003cp\u003e以下のコマンドを実行する。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emitmproxy\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e以下のようなコンソールが現れる。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/516bf631a9cb38916946a81d2e13ed5505bca855/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f31663135653361392d623363332d356462652d333961302d6265316663353165333333632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F1f15e3a9-b3c3-5dbe-39a0-be1fc51e333c.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=68dc77071d989966a2ba7a960bbf6833\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/1f15e3a9-b3c3-5dbe-39a0-be1fc51e333c.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F1f15e3a9-b3c3-5dbe-39a0-be1fc51e333c.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=101e107cdd496e52eb4b416680e655be 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eここで iPhone で適当なサイトにアクセスすると証明書がなく通信が失敗するので、以下の手順を行う。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"4-構成ファイルを-iphone-にダウンロードする\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#4-%E6%A7%8B%E6%88%90%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92-iphone-%E3%81%AB%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e4. 構成ファイルを iPhone にダウンロードする\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ehttp://mitm.it\u003c/code\u003e に Safari からアクセスする（ ※ Safari でなく Chrome などの別のブラウザで行うとうまくいきませんでした）\u003c/li\u003e\n\u003cli\u003eApple リンゴをタップ\u003c/li\u003e\n\u003cli\u003eあとはガイド通りに構成プロファイルをダウンロードする\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/ca5a0eef7c93f383a6171fbf2da3c92a3b6f6bc3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f65643166656632352d323634632d316435312d363765632d6139663831313861656635312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fed1fef25-264c-1d51-67ec-a9f8118aef51.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=186d4bfa76c1678ac33638e3bf518128\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ed1fef25-264c-1d51-67ec-a9f8118aef51.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fed1fef25-264c-1d51-67ec-a9f8118aef51.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=e4dfc326f8388b54ab1970d0954b5146 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/82111121eb5ee776818a8a815a7a5c2aaa5ad52d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f61316338393037642d313965342d633131302d343039312d3866643835636365626435622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fa1c8907d-19e4-c110-4091-8fd85ccebd5b.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=3656f439afd94d6aa1676cc77c80cb5b\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/a1c8907d-19e4-c110-4091-8fd85ccebd5b.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fa1c8907d-19e4-c110-4091-8fd85ccebd5b.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=ccfb3e60362acc6f5dd20e0ae5e56986 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/ca875ff5eae59b592735b71e21c9c046756870fc/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f39383935386638372d333865382d323532302d653139362d3934613664376232356565342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F98958f87-38e8-2520-e196-94a6d7b25ee4.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=74a384a5d06771e02d76cdef97ef1c40\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/98958f87-38e8-2520-e196-94a6d7b25ee4.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F98958f87-38e8-2520-e196-94a6d7b25ee4.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=60bf11fc5b8b9edf227a1f313ff21e4a 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/c6f11570e6f5d660165438681c5e8ed224abed57/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f63636465613866652d636163312d633231312d643339352d6432653231346564396332362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fccdea8fe-cac1-c211-d395-d2e214ed9c26.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=bb96f227a5c0c6df1e882bfb30300b41\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ccdea8fe-cac1-c211-d395-d2e214ed9c26.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fccdea8fe-cac1-c211-d395-d2e214ed9c26.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=a1215ec3097d5a9d28935bba7813ce2d 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\niOSでもよく見る「プロファイル」って何に使うもの？ - マイナビBOOKS\u003cbr\u003e\n\u003ca href=\"https://book.mynavi.jp/macfan/detail_summary/id=65642\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://book.mynavi.jp/macfan/detail_summary/id=65642\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"5-構成ファイルを-iphone-にインストールする\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#5-%E6%A7%8B%E6%88%90%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92-iphone-%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e5. 構成ファイルを iPhone にインストールする\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e設定アプリ \u0026gt; プロファイルがダウンロード済み \u0026gt; インストール\u003c/li\u003e\n\u003cli\u003eあとはガイド通りに構成プロファイルをインストールする\n（※ 設定アプリ \u0026gt; 一般 \u0026gt; プロファイルとデバイス管理 \u0026gt; mitmproxy でも同じ場所にいけます）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/1a41834dfb97ab9902bc3ad0b16753eb7dd2aeb7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f64336238663065322d333331322d666436632d356261612d6563313064363939393163622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fd3b8f0e2-3312-fd6c-5baa-ec10d69991cb.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=8bab3d1500b0568be24ce419d81bab4b\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/d3b8f0e2-3312-fd6c-5baa-ec10d69991cb.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fd3b8f0e2-3312-fd6c-5baa-ec10d69991cb.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=649db1e6e4eeb26b5c663310076f2be2 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/142e35533edf9c9bc77c026e80a45b9f0cd80db3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f34336139666636652d366230662d636337352d613666302d3339316261316361316137612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F43a9ff6e-6b0f-cc75-a6f0-391ba1ca1a7a.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=89f3022664ae1053c59257370469ab9d\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/43a9ff6e-6b0f-cc75-a6f0-391ba1ca1a7a.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F43a9ff6e-6b0f-cc75-a6f0-391ba1ca1a7a.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=07d327bffd627627113dabe22b165932 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/ef720191668cffacdb24d4e893e8dc308b40743f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f66383734323136312d663930622d396366392d643237372d3237306362303364343637642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Ff8742161-f90b-9cf9-d277-270cb03d467d.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=50effe15153dd7a1789f12d157b84ae0\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/f8742161-f90b-9cf9-d277-270cb03d467d.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Ff8742161-f90b-9cf9-d277-270cb03d467d.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=4e5823907f896670c17657d08ae742b6 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/9a94a2c404ba15407e5cb99de5915a95724d30d5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f61323238663865322d633531342d343265642d376636662d6230626230346464363763332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fa228f8e2-c514-42ed-7f6f-b0bb04dd67c3.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=a44f19811bce0726a6a39d1e742f7e7f\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/a228f8e2-c514-42ed-7f6f-b0bb04dd67c3.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fa228f8e2-c514-42ed-7f6f-b0bb04dd67c3.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=03d932cfc6aa3cb0b83ad58ee24eeaa0 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/9d70c1c67384775e9a1c7ccd7719588a3a463820/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f34333661333663322d363231312d633764372d363234312d3932663262653338636336362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F436a36c2-6211-c7d7-6241-92f2be38cc66.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=ccac2d7074b063a18b2db9de2e62ec83\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/436a36c2-6211-c7d7-6241-92f2be38cc66.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F436a36c2-6211-c7d7-6241-92f2be38cc66.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=6cc500b6d3760dc82361d60bdcb1dcc9 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"6-証明書信頼設定で-mitmproxy-を有効にする\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#6-%E8%A8%BC%E6%98%8E%E6%9B%B8%E4%BF%A1%E9%A0%BC%E8%A8%AD%E5%AE%9A%E3%81%A7-mitmproxy-%E3%82%92%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e6. 証明書信頼設定で mitmproxy を有効にする\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e設定アプリ \u0026gt; 一般 \u0026gt; 情報 \u0026gt; 証明書信頼設定 \u0026gt; mitmproxy をオンにする\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/67a4abfb569569edc5ea50dd8c903d6af2c954eb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f37343765623366632d333861392d343064352d633432612d3235353762383763383461392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F747eb3fc-38a9-40d5-c42a-2557b87c84a9.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=2e06ec5ff2280b97797926ef96096288\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/747eb3fc-38a9-40d5-c42a-2557b87c84a9.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F747eb3fc-38a9-40d5-c42a-2557b87c84a9.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=61d2224902c00bad46bec2ce2e63d74c 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/1b8c4c783381020eb0ba8b10d04d4222516a4730/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f61393933356330322d393463302d353366312d663762642d3764653461623939633466372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fa9935c02-94c0-53f1-f7bd-7de4ab99c4f7.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=395e96eb4d3d22e62b940052d0321c58\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/a9935c02-94c0-53f1-f7bd-7de4ab99c4f7.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Fa9935c02-94c0-53f1-f7bd-7de4ab99c4f7.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=a0242b5836f6e10909527a6f484e72be 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/4c7b3527e7b20071c5904793fd8382680e7e0b71/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f35653965313033342d626231622d373639382d393532642d6661343766303930396130382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F5e9e1034-bb1b-7698-952d-fa47f0909a08.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=cc7d76556faf015efd250e72d8d3c5f1\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/5e9e1034-bb1b-7698-952d-fa47f0909a08.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F5e9e1034-bb1b-7698-952d-fa47f0909a08.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=e78383118aafe9ba2edc988c4769101e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/3bb637f61ccbdbca092ab03ecb761f8731559853/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f30353230326535352d363635362d333565612d336533352d6534356361353037393032342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F05202e55-6656-35ea-3e35-e45ca5079024.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=b5f0a1a8b7321a53145f1c08aec79fd0\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/05202e55-6656-35ea-3e35-e45ca5079024.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F05202e55-6656-35ea-3e35-e45ca5079024.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=084e5d50a011d09542012275cf010006 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/20832955211ac5ee9eb1868f8d9f5bb602da119e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f34653536386539382d323463632d316165612d323939352d3737626439313838653061322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F4e568e98-24cc-1aea-2995-77bd9188e0a2.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=e8e6d2d255f732ff18f4ff702157e05f\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/4e568e98-24cc-1aea-2995-77bd9188e0a2.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F4e568e98-24cc-1aea-2995-77bd9188e0a2.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=5a411b14fa6d59a033fbab89cfdf1169 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e以上の設定が完了して、ブラウザで適当なサイトにアクセスすると mitmproxy のコンソールに以下のように通信内容を確認することができる。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/5ff33a2f02653a799476c98031e1910673f3b953/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f36323535363732612d356436322d303865352d313039612d6563623062333463353838612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F6255672a-5d62-08e5-109a-ecb0b34c588a.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=9271adf562d1620c09a1c8b1ab89903f\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/6255672a-5d62-08e5-109a-ecb0b34c588a.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F6255672a-5d62-08e5-109a-ecb0b34c588a.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=a7ea9ec4be8f3d3411689ae66fdf86f3 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eまた、一度設定した端末では iPhone のプロキシ設定をして、mitmproxy を立ち上げるだけで通信内容を確認できる。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"終了の仕方\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%82%E4%BA%86%E3%81%AE%E4%BB%95%E6%96%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e終了の仕方\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"mitmproxy\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#mitmproxy\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003emitmproxy\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eControl + c\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"iphone-1\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#iphone-1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eiPhone\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e設定アプリ \u0026gt; Wi-Fi \u0026gt; Mac が接続している Wi-Fi と同じネットワークのi アイコン \u0026gt; プロキシ構成 \u0026gt; オフ にする\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/16cc4e33b1722120dfcf25c793e8711a56784045/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f38343539396661622d663830312d353833662d663165642d6633336538643164356265612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F84599fab-f801-583f-f1ed-f33e8d1d5bea.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=77cdeb3f11d2cdc102bc5f905d124cca\" width=\"40%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/84599fab-f801-583f-f1ed-f33e8d1d5bea.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F84599fab-f801-583f-f1ed-f33e8d1d5bea.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=78711ce29ef2f45ed0724fc4e304a430 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"\n# はじめに\n\n以下の記事を見ながら、手持ちの iPhone SE（第二世代）iOS 14.0.1 のデバイスで、mitmproxy 経由による通信内容の確認をしてみたときの備忘録になります。\n\n【参考】\nモバイルアプリ開発者のための mitmproxy 入門\nhttps://qiita.com/hkurokawa/items/9034274cc1b9e1405c68\n\nmitmproxy そもそもの使い方については触れていません。\n\n# 動作環境\n\n## Mac\n\n```shell\n$ mitmproxy --version\nMitmproxy: 5.2\nPython:    3.8.2\nOpenSSL:   OpenSSL 1.1.1g  21 Apr 2020\nPlatform:  macOS-10.15.7-x86_64-i386-64bit\n```\n\n## iPhone\n\n- デバイス：iPhone SE（第二世代）\n- iOS：14.0.1\n\n# 設定手順\n\n## 1. Mac が接続している Wi-Fi の IP アドレスの確認\n\n- ステータスバーのネットワークアイコン \u003e \"ネットワーク\"環境設定を開く\n- Mac が接続している IP アドレスの確認\n\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/7df1e6c2-b8dc-377d-eda9-254920177564.png width=40%\u003e\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/c93290aa-3bc0-6d7b-1693-1992688a05e6.png width=40%\u003e\n\n## 2. iPhone のプロキシ設定\n\n- 設定アプリ \u003e Wi-Fi \u003e Mac が接続している Wi-Fi と同じネットワークのi アイコン \u003e プロキシ構成 \u003e 手動\n- 以下の内容で設定・保存\n  - サーバ：先ほど確認した IP アドレス\n  - ポート：8080（8080 は mitmproxy\b のデフォルトのポート番号のため任意の値にすることも可能）\n  - 認証：オフ\n\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/fc401728-c9e7-4a28-afe6-b2e647faa6bb.png width=40%\u003e\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/bd5c5554-8f37-f4e7-971d-189b51e970bb.png width=40%\u003e\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/19113384-e9ad-2adf-2b37-a26d123d3fd8.png width=40%\u003e\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/3386870d-2205-54c2-de78-38bbe0e89318.png width=40%\u003e\n\n\n## 3. mitmproxy の立ち上げ\n\n以下のコマンドを実行する。\n\n```shell\n$ mitmproxy\b\n```\n\n以下のようなコンソールが現れる。\n\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/1f15e3a9-b3c3-5dbe-39a0-be1fc51e333c.png width=40%\u003e\n\n\nここで iPhone で適当なサイトにアクセスすると証明書がなく通信が失敗するので、以下の手順を行う。\n\n## 4. 構成ファイルを iPhone にダウンロードする\n\n- `http://mitm.it` に Safari からアクセスする（ ※ Safari でなく Chrome などの別のブラウザで行うとうまくいきませんでした）\n- Apple リンゴをタップ\n- あとはガイド通りに構成プロファイルをダウンロードする\n\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ed1fef25-264c-1d51-67ec-a9f8118aef51.png width=40%\u003e\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/a1c8907d-19e4-c110-4091-8fd85ccebd5b.png width=40%\u003e\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/98958f87-38e8-2520-e196-94a6d7b25ee4.png width=40%\u003e\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/ccdea8fe-cac1-c211-d395-d2e214ed9c26.png width=40%\u003e\n\n\n【参考】\niOSでもよく見る「プロファイル」って何に使うもの？ - マイナビBOOKS\nhttps://book.mynavi.jp/macfan/detail_summary/id=65642\n\n## 5. 構成ファイルを iPhone にインストールする\n\n- 設定アプリ \u003e プロファイルがダウンロード済み \u003e インストール\n- あとはガイド通りに構成プロファイルをインストールする\n（※ 設定アプリ \u003e 一般 \u003e プロファイルとデバイス管理 \u003e mitmproxy でも同じ場所にいけます）\n\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/d3b8f0e2-3312-fd6c-5baa-ec10d69991cb.png width=40%\u003e\n\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/43a9ff6e-6b0f-cc75-a6f0-391ba1ca1a7a.png width=40%\u003e\n\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/f8742161-f90b-9cf9-d277-270cb03d467d.png width=40%\u003e\n\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/a228f8e2-c514-42ed-7f6f-b0bb04dd67c3.png width=40%\u003e\n\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/436a36c2-6211-c7d7-6241-92f2be38cc66.png width=40%\u003e\n\n\n\n\n\n## 6. 証明書信頼設定で mitmproxy を有効にする\n\n- 設定アプリ \u003e 一般 \u003e 情報 \u003e 証明書信頼設定 \u003e mitmproxy をオンにする\n\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/747eb3fc-38a9-40d5-c42a-2557b87c84a9.png width=40%\u003e\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/a9935c02-94c0-53f1-f7bd-7de4ab99c4f7.png width=40%\u003e\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/5e9e1034-bb1b-7698-952d-fa47f0909a08.png width=40%\u003e\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/05202e55-6656-35ea-3e35-e45ca5079024.png width=40%\u003e\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/4e568e98-24cc-1aea-2995-77bd9188e0a2.png width=40%\u003e\n\n以上の設定が完了して、ブラウザで適当なサイトにアクセスすると mitmproxy のコンソールに以下のように通信内容を確認することができる。\n\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/6255672a-5d62-08e5-109a-ecb0b34c588a.png width=40%\u003e\n\n\nまた、一度設定した端末では iPhone のプロキシ設定をして、mitmproxy を立ち上げるだけで通信内容を確認できる。\n\n# 終了の仕方\n\n## mitmproxy\b\n- Control + c\n\n## iPhone\n- 設定アプリ \u003e Wi-Fi \u003e Mac が接続している Wi-Fi と同じネットワークのi アイコン \u003e プロキシ構成 \u003e オフ にする\n\n\u003cimg src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/84599fab-f801-583f-f1ed-f33e8d1d5bea.png width=40%\u003e\n","coediting":false,"comments_count":0,"created_at":"2020-10-26T15:42:42+09:00","group":null,"id":"45e2b6809c6fc54051a6","likes_count":5,"private":false,"reactions_count":0,"tags":[{"name":"iOS","versions":[]},{"name":"mitmproxy","versions":[]}],"title":"iOS 14 端末での mitmproxy 設定方法","updated_at":"2020-11-08T16:06:45+09:00","url":"https://qiita.com/ikuraikura/items/45e2b6809c6fc54051a6","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"nodebrew-と-nodenv-とは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#nodebrew-%E3%81%A8-nodenv-%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enodebrew と nodenv とは？\u003c/h1\u003e\n\n\u003cp\u003eNode.js のバージョンを管理するツールになります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"nodebrew-と-nodenv-の違い\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#nodebrew-%E3%81%A8-nodenv-%E3%81%AE%E9%81%95%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enodebrew と nodenv の違い\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003enodenv\u003c/code\u003e はディレクトリごとにバージョンを指定することが可能ですが、\u003ccode\u003enodebrew\u003c/code\u003e ではそのような設定はできません。\u003c/p\u003e\n\n\u003cp\u003eしかし、\u003ccode\u003enodebrew\u003c/code\u003e で任意のタイミングで使用するバージョンを切り替えることができるので、そこまで困ることはないはずです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"nodebrew-と-nodenv-のどちらを選択すべき\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#nodebrew-%E3%81%A8-nodenv-%E3%81%AE%E3%81%A9%E3%81%A1%E3%82%89%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%99%E3%81%B9%E3%81%8D\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enodebrew と nodenv のどちらを選択すべき？\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003eまず、初心者であれば \u003ccode\u003enodebrew\u003c/code\u003e をお勧めします。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003enodebrew\u003c/code\u003e で困ることが発生してから \u003ccode\u003enodenv\u003c/code\u003e に乗り換えるという流れでいいと思います。\u003c/p\u003e\n\n\u003cp\u003eちなみに \u003ccode\u003enodebrew\u003c/code\u003e と \u003ccode\u003enodenv\u003c/code\u003e の 2 つを使ってバージョンを管理していくのはあまりお勧めできないので、片方だけを使用したほうがいいと思います。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"参考\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8F%82%E8%80%83\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e参考\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/7110/items/efe0be1be11bed1db143\" id=\"reference-17d3a67f0bcf8d4cfeaa\"\u003e・ MacにNode.jsをnodebrewでインストールして環境構築【決定版】\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://qiita.com/kyosuke5_20/items/c5f68fc9d89b84c0df09\" id=\"reference-5be1dd669bc9b8b43ea0\"\u003e・ MacにNode.jsをインストール\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://qiita.com/kyosuke5_20/items/eece817eb283fc9d214f\" id=\"reference-75ae2a85a9f9e01f08fb\"\u003e・ MacにNode.jsをインストール（anyenv + nodenv編）\u003c/a\u003e\u003c/p\u003e\n","body":"# nodebrew と nodenv とは？\n\nNode.js のバージョンを管理するツールになります。\n\n# nodebrew と nodenv の違い\n\n`nodenv` はディレクトリごとにバージョンを指定することが可能ですが、`nodebrew` ではそのような設定はできません。\n\nしかし、`nodebrew` で任意のタイミングで使用するバージョンを切り替えることができるので、そこまで困ることはないはずです。\n\n# nodebrew と nodenv のどちらを選択すべき？\n\n**まず、初心者であれば `nodebrew` をお勧めします。**\n\n`nodebrew` で困ることが発生してから `nodenv` に乗り換えるという流れでいいと思います。\n\nちなみに `nodebrew` と `nodenv` の 2 つを使ってバージョンを管理していくのはあまりお勧めできないので、片方だけを使用したほうがいいと思います。\n\n# 参考\n\n[・ MacにNode.jsをnodebrewでインストールして環境構築【決定版】](https://qiita.com/7110/items/efe0be1be11bed1db143)\n[・ MacにNode.jsをインストール](https://qiita.com/kyosuke5_20/items/c5f68fc9d89b84c0df09)\n[・ MacにNode.jsをインストール（anyenv + nodenv編）](https://qiita.com/kyosuke5_20/items/eece817eb283fc9d214f)\n","coediting":false,"comments_count":0,"created_at":"2020-10-19T05:03:47+09:00","group":null,"id":"20803f553b5716c13902","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"Node.js","versions":[]},{"name":"nodebrew","versions":[]},{"name":"nodenv","versions":[]}],"title":"Node.js のバージョン管理は nodebrew と nodenv のどちらを選択すべきか？","updated_at":"2020-12-21T14:55:06+09:00","url":"https://qiita.com/ikuraikura/items/20803f553b5716c13902","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"初心者に向けての答え\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%88%9D%E5%BF%83%E8%80%85%E3%81%AB%E5%90%91%E3%81%91%E3%81%A6%E3%81%AE%E7%AD%94%E3%81%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e初心者に向けての答え\u003c/h1\u003e\n\n\u003cp\u003epackage-lock.json について、とりあえず以下を守ればプロジェクトに迷惑をかけません。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e直接編集してはいけません\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e基本的に無視していいファイルです\u003c/li\u003e\n\u003cli\u003e削除してはいけません\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003enpm install\u003c/code\u003e コマンド実行時に変更されることもありますが、そのときに発生する変更は気にしなくて大丈夫です\u003c/li\u003e\n\u003cli\u003eマージリクエスト（プルリクエスト）する際に package-lock.json に変更があった場合は、その変更も含めて提出します\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e※ これは package.json についても同じことが言えます。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"もうちょっと知りたい人に向けての答え\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%82%E3%81%86%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E7%9F%A5%E3%82%8A%E3%81%9F%E3%81%84%E4%BA%BA%E3%81%AB%E5%90%91%E3%81%91%E3%81%A6%E3%81%AE%E7%AD%94%E3%81%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eもうちょっと知りたい人に向けての答え\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003epackage-lock.json は \u003ccode\u003enpm install\u003c/code\u003e 実行時に新規作成・更新される\u003c/li\u003e\n\u003cli\u003epackage-lock.json には \u003ccode\u003enpm install\u003c/code\u003e で実際にインストールしたパッケージ情報が記載されている\u003c/li\u003e\n\u003cli\u003epackage-lock.json を使用してパッケージをインストールする際には \u003ccode\u003enpm ci\u003c/code\u003e コマンドを実行する\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003enpm ci\u003c/code\u003e コマンドを実行する主なユースケースとしては CI 実行時や \u003ccode\u003egit clone\u003c/code\u003e 後の動作確認などで使用する\u003c/li\u003e\n\u003cli\u003e上記の用途があるので package-lock.json は Git で管理したほうがいいファイルである\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"解説\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A7%A3%E8%AA%AC\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e解説\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"新規作成更新されるタイミング\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%96%B0%E8%A6%8F%E4%BD%9C%E6%88%90%E6%9B%B4%E6%96%B0%E3%81%95%E3%82%8C%E3%82%8B%E3%82%BF%E3%82%A4%E3%83%9F%E3%83%B3%E3%82%B0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e新規作成・更新されるタイミング\u003c/h2\u003e\n\n\u003cp\u003epackage-lock.json は \u003ccode\u003enpm install\u003c/code\u003e 実行時に作成・更新されるファイルです。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003enpm install\u003c/code\u003e 実行時は以下のような挙動をしています。\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003epackage.json の内容を更新する\u003c/li\u003e\n\u003cli\u003epackage.json の内容をもとに node_modules のディレクトリにパッケージをインストールする\u003c/li\u003e\n\u003cli\u003enode_modules に実際にインストールされたパッケージのバージョン情報が package-lock.json に記述される\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"packagejson-との比較\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#packagejson-%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003epackage.json との比較\u003c/h2\u003e\n\n\u003cp\u003e以下のように記述内容に差があります。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003epackage.json\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eインストールすべきパッケージのバージョンの範囲\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eその他もろもろ（npm-scripts など）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003epackage-lock.json\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003enpm install\u003c/code\u003e によって実際にインストールしたパッケージのバージョンのみ\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"package-lockjson-を使用する方法\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#package-lockjson-%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003epackage-lock.json を使用する方法\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003enpm install\u003c/code\u003e の代わりに \u003ccode\u003enpm ci\u003c/code\u003e というコマンドを実行すると package-lock.json を元にパッケージをインストールして node_modules を作成してくれます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# package-lock.json のバージョンで node_modules を作成するとき\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm ci\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003e裏を返すと、\u003ccode\u003enpm ci\u003c/code\u003e というコマンドを実行しなければ package-lock.json は使用されません。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"npm-install-と-npm-ci-の違い\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#npm-install-%E3%81%A8-npm-ci-%E3%81%AE%E9%81%95%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enpm install と npm ci の違い\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003enpm ci\u003c/code\u003e と \u003ccode\u003enpm install\u003c/code\u003e の要点をまとめると以下のようなことがあげられます。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003enpm ci\u003c/code\u003e は \u003ccode\u003enpm install\u003c/code\u003e と同じように全ての依存パッケージをインストールする\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003enpm install\u003c/code\u003e コマンド実行によって package-lock.json を更新することがある\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003enpm ci\u003c/code\u003e コマンド実行によって package-lock.json は更新されない\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003enpm ci\u003c/code\u003e コマンド実行すると node_modules をすべて削除してからパッケージをインストールする\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"npm-ci-の使い所\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#npm-ci-%E3%81%AE%E4%BD%BF%E3%81%84%E6%89%80\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enpm ci の使い所\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003enpm ci\u003c/code\u003e の使用頻度の高いユースケースとしては CI 実行時があげられます。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e理由としては、package-lock.json が勝手に更新されるのを防いだり、package-lock.json を参照することでインストールするバージョンを固定して node_modules の内容を同じにするためです。\u003c/p\u003e\n\n\u003cp\u003e同様の理由から、新規参画者が \u003ccode\u003egit clone\u003c/code\u003e して動作を確認する場合なども \u003ccode\u003enpm ci\u003c/code\u003e が用いられます。\u003c/p\u003e\n\n\u003cp\u003e（※ ただし CI の速度を求めるなら \u003ccode\u003enpm ci\u003c/code\u003e は実行時間がやや長いため node_modules をキャッシュして \u003ccode\u003enpm install\u003c/code\u003e を用いることもあるらしいです。ですが、最初からキャッシュする仕組みを作るよりは、実行時間が長くて困るというような問題が発生してから、そのような対応をすればいいと思います。）\u003c/p\u003e\n\n\u003cp\u003eよくある使われどころは以下の通りになります。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCI 実行時\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003egit clone\u003c/code\u003e 直後の動作確認\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e何かのトラブルで node_modules を空にしてやり直すとき\u003c/li\u003e\n\u003cli\u003e過去の状態を復元するとき\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"git-で管理すべきファイル\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#git-%E3%81%A7%E7%AE%A1%E7%90%86%E3%81%99%E3%81%B9%E3%81%8D%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eGit で管理すべきファイル？\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e答えは Yes です。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e上記のように \u003ccode\u003enpm ci\u003c/code\u003e コマンドを使用して、パッケージをインストールする用途があるので、package-lock.json は Git で管理すべきファイルになります。\u003c/p\u003e\n\n\u003cp\u003eちなみにインストールするパッケージに何か変更があると、マージリクエスト（プルリクエスト）時に、package-lock.json に大量の差分が出てくるかと思いますが、それが、\u003ccode\u003enpm install\u003c/code\u003e 時に自動的に更新された変更であれば、基本的に無視して大丈夫です。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003epackage-lock.json は \u003ccode\u003enpm install\u003c/code\u003e 実行時に新規作成・更新される\u003c/li\u003e\n\u003cli\u003epackage-lock.json には \u003ccode\u003enpm install\u003c/code\u003e で実際にインストールしたパッケージ情報が記載されている\u003c/li\u003e\n\u003cli\u003epackage-lock.json を使用してパッケージをインストールする際には \u003ccode\u003enpm ci\u003c/code\u003e コマンドを実行する\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003enpm ci\u003c/code\u003e コマンドを実行する主なユースケースとしては CI 実行時や \u003ccode\u003egit clone\u003c/code\u003e 後の動作確認などで使用する\u003c/li\u003e\n\u003cli\u003e上記の用途があるので package-lock.json は Git で管理したほうがいいファイルである\u003c/li\u003e\n\u003c/ul\u003e\n","body":"# 初心者に向けての答え\n\npackage-lock.json について、とりあえず以下を守ればプロジェクトに迷惑をかけません。\n\n- **直接編集してはいけません**\n- 基本的に無視していいファイルです\n- 削除してはいけません\n- `npm install` コマンド実行時に変更されることもありますが、そのときに発生する変更は気にしなくて大丈夫です\n- マージリクエスト（プルリクエスト）する際に package-lock.json に変更があった場合は、その変更も含めて提出します\n\n※ これは package.json についても同じことが言えます。\n\n# もうちょっと知りたい人に向けての\b答え\n\n- package-lock.json は `npm install` 実行時に新規作成・更新される\n- package-lock.json には `npm install` で実際にインストールしたパッケージ情報が記載されている\n- package-lock.json を使用してパッケージをインストールする際には `npm ci` コマンドを実行する\n- `npm ci` コマンドを実行する主なユースケースとしては CI 実行時や `git clone` 後の動作確認などで使用する\n- 上記の用途があるので package-lock.json は Git で管理したほうがいいファイルである\n\n# 解説\n\n## 新規作成・更新されるタイミング\n\npackage-lock.json は `npm install` 実行時に作成・更新されるファイルです。\n\n`npm install` 実行時は以下のような挙動をしています。\n\n1. package.json の内容を更新する\n2. package.json の内容をもとに node_modules のディレクトリにパッケージをインストールする\n3. node_modules に実際にインストールされたパッケージのバージョン情報が package-lock.json に記述される\n\n## package.json との比較\n\n以下のように記述内容に差があります。\n\n- package.json\n  - **インストールすべきパッケージのバージョンの範囲**\n  - その他もろもろ（npm-scripts など）\n- package-lock.json\n  - **`npm install` によって実際にインストールしたパッケージのバージョンのみ**\n\n\n## package-lock.json を使用する方法\n\n`npm install` の代わりに `npm ci` というコマンドを実行すると package-lock.json を元にパッケージをインストールして node_modules を作成してくれます。\n\n```shell\n# package-lock.json のバージョンで node_modules を作成するとき\n$ npm ci\n```\n\n**裏を返すと、`npm ci` というコマンドを実行しなければ package-lock.json は使用されません。**\n\n## npm install と npm ci の違い\n\n`npm ci` と `npm install` の要点をまとめると以下のようなことがあげられます。\n\n- `npm ci` は `npm install` と同じように全ての依存パッケージをインストールする\n- `npm install` コマンド実行によって package-lock.json を更新することがある\n- `npm ci` コマンド実行によって package-lock.json は更新されない\n- `npm ci` コマンド実行すると node_modules をすべて削除してからパッケージをインストールする\n\n## npm ci の使い所\n\n**`npm ci` の使用頻度の高いユースケースとしては CI 実行時があげられます。**\n\n理由としては、package-lock.json が勝手に更新されるのを防いだり、package-lock.json を参照することでインストールするバージョンを固定して node_modules の内容を同じにするためです。\n\n同様の理由から、新規参画者が `git clone` して動作を確認する場合なども `npm ci` が用いられます。\n\n（※ ただし CI の速度を求めるなら `npm ci` は実行時間がやや長いため node_modules をキャッシュして `npm install` を用いることもあるらしいです。ですが、最初からキャッシュする仕組みを作るよりは、実行時間が長くて困るというような問題が発生してから、そのような対応をすればいいと思います。）\n\n\nよくある使われどころは以下の通りになります。\n\n- **CI 実行時**\n- **`git clone` 直後の動作確認**\n- 何かのトラブルで node_modules を空にしてやり直すとき\n- 過去の状態を復元するとき\n\n## Git で管理すべきファイル？\n\n**答えは Yes です。**\n\n上記のように `npm ci` コマンドを使用して、パッケージをインストールする用途があるので、package-lock.json は Git で管理すべきファイルになります。\n\nちなみにインストールするパッケージに何か変更があると、マージリクエスト（プルリクエスト）時に、package-lock.json に大量の差分が出てくるかと思いますが、それが、`npm install` 時に自動的に更新された変更であれば、基本的に無視して大丈夫です。\n\n# \bまとめ\n\n- package-lock.json は `npm install` 実行時に新規作成・更新される\n- package-lock.json には `npm install` で実際にインストールしたパッケージ情報が記載されている\n- package-lock.json を使用してパッケージをインストールする際には `npm ci` コマンドを実行する\n- `npm ci` コマンドを実行する主なユースケースとしては CI 実行時や `git clone` 後の動作確認などで使用する\n- 上記の用途があるので package-lock.json は Git で管理したほうがいいファイルである\n\n\n","coediting":false,"comments_count":0,"created_at":"2020-10-19T04:38:36+09:00","group":null,"id":"1f6bb7a372b8263500e5","likes_count":148,"private":false,"reactions_count":0,"tags":[{"name":"npm","versions":[]},{"name":"package.json","versions":[]},{"name":"package-lock.json","versions":[]}],"title":"package-lock.json ってなに？","updated_at":"2021-01-05T15:35:43+09:00","url":"https://qiita.com/ikuraikura/items/1f6bb7a372b8263500e5","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"npm-list\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#npm-list\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003enpm list\u003c/code\u003e\n\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003enpm list\u003c/code\u003e によってパッケージのインストール先の確認をすることができます。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eローカルインストールの場合\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# ローカルインストールされたパッケージの確認\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm list \u003cspan class=\"nt\"\u003e--depth\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eグローバルインストールの場合\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# グローバルインストール先の確認\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm list \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e | \u003cspan class=\"nb\"\u003ehead\u003c/span\u003e \u003cspan class=\"nt\"\u003e-1\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# グローバルインストールされたパッケージの確認\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm list \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e \u003cspan class=\"nt\"\u003e--depth\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"実行例\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E8%A1%8C%E4%BE%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実行例\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ローカルインストールの場合\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%AE%E5%A0%B4%E5%90%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eローカルインストールの場合\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# typescript のインストール\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm \u003cspan class=\"nb\"\u003einstall \u003c/span\u003etypescript\n+ typescript@4.0.3\n\n\u003cspan class=\"c\"\u003e# node_modules に typescript のパッケージが存在していることの確認\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els \u003c/span\u003enode_modules\ntypescript\n\n\u003cspan class=\"c\"\u003e# ローカルインストールされたパッケージの確認\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm list \u003cspan class=\"nt\"\u003e--depth\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\ntypescript-node-base@1.0.0 /Users/sugurutakahashi/git/typescript-node-base\n└── typescript@4.0.3\n\n\u003cspan class=\"c\"\u003e# node_modules のない適当なディレクトリに移動\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ../\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els \u003c/span\u003enode_modules\n標準出力なし（＝ node_modules が空）\n\n\u003cspan class=\"c\"\u003e# ローカルインストールされたパッケージの確認\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm list \u003cspan class=\"nt\"\u003e--depth\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\n/Users/sugurutakahashi/git\n└── \u003cspan class=\"o\"\u003e(\u003c/span\u003eempty\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこのようにローカルインストールされたパッケージはカレントディレクトリの node_modules の内容を確認していることがわかります。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"グローバルインストールの場合\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%AE%E5%A0%B4%E5%90%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eグローバルインストールの場合\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# （前提その1）nodebrew で複数のバージョンの Node.js のバージョンを管理している状態（v14.13.1 を使用）\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enodebrew \u003cspan class=\"nb\"\u003els\n\u003c/span\u003ev12.6.0\nv14.13.1\n\ncurrent: v14.13.1\n\n\u003cspan class=\"c\"\u003e# グローバルインストール先の確認（npm list -g | head -1）\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm list \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e | \u003cspan class=\"nb\"\u003ehead\u003c/span\u003e \u003cspan class=\"nt\"\u003e-1\u003c/span\u003e\n/Users/sugurutakahashi/.nodebrew/node/v14.13.1/lib\n\n\u003cspan class=\"c\"\u003e# グローバルインストールされたパッケージの確認（npm list -g --depth=0）\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm list \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e \u003cspan class=\"nt\"\u003e--depth\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\n/Users/sugurutakahashi/.nodebrew/node/v14.13.1/lib\n├── npm@6.14.8\n├── typescript@4.0.3\n└── yarn@1.22.10\n\n\u003cspan class=\"c\"\u003e# v12.6.0 に切り替え\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enodebrew use v12.6.0\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enodebrew \u003cspan class=\"nb\"\u003els\n\u003c/span\u003ev12.6.0\nv14.13.1\n\ncurrent: v12.6.0\n\n\u003cspan class=\"c\"\u003e# グローバルインストール先の確認\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm list \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e | \u003cspan class=\"nb\"\u003ehead\u003c/span\u003e \u003cspan class=\"nt\"\u003e-1\u003c/span\u003e\n/Users/sugurutakahashi/.nodebrew/node/v12.6.0/lib\n\n\u003cspan class=\"c\"\u003e# グローバルインストールされたパッケージの確認\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm list \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e \u003cspan class=\"nt\"\u003e--depth\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\n/Users/sugurutakahashi/.nodebrew/node/v12.6.0/lib\n├── @vue/cli@4.4.6\n├── @vue/cli-service-global@4.4.6\n├── express@4.17.1\n├── firebase-tools@8.6.0\n├── gatsby-cli@2.12.66\n├── gitbook-cli@2.3.2\n├── multi-file-swagger@2.3.0\n├── npm@6.14.8\n└── yarn@1.22.10\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこのように Node.js のバージョンを切り替えるとグローバルインストールされたパッケージの内容が異なることがわかります。\u003c/p\u003e\n\n\u003cp\u003eつまり、グローバルインストールしても \u003ccode\u003enodebrew\u003c/code\u003e などで複数の Node.js のバージョンを管理している場合は、\u003ccode\u003enpm install -g \u0026lt;package\u0026gt;\u003c/code\u003e したパッケージが、それぞれのバージョンで別のものとして管理されるということになります。\u003c/p\u003e\n","body":"# `npm list`\n\n`npm list` によってパッケージのインストール先の確認をすることができます。\n\n**ローカルインストールの場合**\n\n```shell\n# ローカルインストールされたパッケージの確認\n$ npm list --depth=0\n```\n\n**グローバルインストールの場合**\n\n```shell\n# グローバルインストール先の確認\n$ npm list -g | head -1\n\n# グローバルインストールされたパッケージの確認\n$ npm list -g --depth=0\n```\n\n# 実行例\n\n## ローカルインストールの場合\n\n```shell\n# typescript のインストール\n$ npm install typescript\n+ typescript@4.0.3\n\n# node_modules に typescript のパッケージが存在していることの確認\n$ ls node_modules\ntypescript\n\n# ローカルインストールされたパッケージの確認\n$ npm list --depth=0\ntypescript-node-base@1.0.0 /Users/sugurutakahashi/git/typescript-node-base\n└── typescript@4.0.3\n\n# node_modules のない適当なディレクトリに移動\n$ cd ../\n$ ls node_modules\n標準出力なし（＝ node_modules が空）\n\n# ローカルインストールされたパッケージの確認\n$ npm list --depth=0\n/Users/sugurutakahashi/git\n└── (empty)\n```\n\nこのようにローカルインストールされたパッケージはカレントディレクトリの node_modules の内容を確認していることがわかります。\n\n\n## グローバルインストールの場合\n\n```shell\n# （前提その1）nodebrew で複数のバージョンの Node.js のバージョンを管理している状態（v14.13.1 を使用）\n$ nodebrew ls\nv12.6.0\nv14.13.1\n\ncurrent: v14.13.1\n\n# グローバルインストール先の確認（npm list -g | head -1）\n$ npm list -g | head -1\n/Users/sugurutakahashi/.nodebrew/node/v14.13.1/lib\n\n# グローバルインストールされたパッケージの確認（npm list -g --depth=0）\n$ npm list -g --depth=0\n/Users/sugurutakahashi/.nodebrew/node/v14.13.1/lib\n├── npm@6.14.8\n├── typescript@4.0.3\n└── yarn@1.22.10\n\n# v12.6.0 に切り替え\n$ nodebrew use v12.6.0\n$ nodebrew ls\nv12.6.0\nv14.13.1\n\ncurrent: v12.6.0\n\n# グローバルインストール先の確認\n$ npm list -g | head -1\n/Users/sugurutakahashi/.nodebrew/node/v12.6.0/lib\n\n# グローバルインストールされたパッケージの確認\n$ npm list -g --depth=0\n/Users/sugurutakahashi/.nodebrew/node/v12.6.0/lib\n├── @vue/cli@4.4.6\n├── @vue/cli-service-global@4.4.6\n├── express@4.17.1\n├── firebase-tools@8.6.0\n├── gatsby-cli@2.12.66\n├── gitbook-cli@2.3.2\n├── multi-file-swagger@2.3.0\n├── npm@6.14.8\n└── yarn@1.22.10\n```\n\nこのように Node.js のバージョンを切り替えるとグローバルインストールされたパッケージの内容が異なることがわかります。\n\nつまり、グローバルインストールしても `nodebrew` などで複数の Node.js のバージョンを管理している場合は、`npm install -g \u003cpackage\u003e` したパッケージが、それぞれのバージョンで別のものとして管理されるということになります。\n","coediting":false,"comments_count":0,"created_at":"2020-10-19T03:40:44+09:00","group":null,"id":"8820b09db0dc1507f563","likes_count":6,"private":false,"reactions_count":0,"tags":[{"name":"npm","versions":[]}],"title":"【npm】 パッケージのインストール先の確認（npm list）","updated_at":"2020-11-05T13:50:00+09:00","url":"https://qiita.com/ikuraikura/items/8820b09db0dc1507f563","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"セマンティック-バージョング\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%BB%E3%83%9E%E3%83%B3%E3%83%86%E3%82%A3%E3%83%83%E3%82%AF-%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%B0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eセマンティック バージョング\u003c/h1\u003e\n\n\u003cp\u003eAPI のバージョンの付け方に関するルールに \u003ccode\u003eセマンティック バージョング\u003c/code\u003e = \u003cstrong\u003eSemver\u003c/strong\u003e (Semantic Versioning) というガイドラインが存在する。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eセマンティック バージョニング 2.0.0\u003c/strong\u003e  \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e概要\u003c/strong\u003e  \u003c/p\u003e\n\n\u003cp\u003eバージョンナンバーは、メジャー.マイナー.パッチ とし、バージョンを上げるには、  \u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAPIの変更に互換性のない場合はメジャーバージョンを、\u003c/li\u003e\n\u003cli\u003e後方互換性があり機能性を追加した場合はマイナーバージョンを、\u003c/li\u003e\n\u003cli\u003e後方互換性を伴うバグ修正をした場合はパッチバージョンを上げます。\n　プレリリースやビルドナンバーなどのラベルに関しては、メジャー.マイナー.パッチ の形式を拡張する形で利用することができます。\u003cbr\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003ca href=\"https://semver.org/lang/ja/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e出典：セマンティック バージョニング\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e適当にバージョンをふってしまう前に、こちらを参照したほうがよさそう。（戒め）\u003c/p\u003e\n","body":"# セマンティック バージョング\n\nAPI のバージョンの付け方に関するルールに `セマンティック バージョング` = **Semver** (Semantic Versioning) というガイドラインが存在する。\n\n\u003e **セマンティック バージョニング 2.0.0**  \n\u003e \n\u003e **概要**  \n\u003e\n\u003e バージョンナンバーは、メジャー.マイナー.パッチ とし、バージョンを上げるには、  \n\u003e\n\u003e 1. APIの変更に互換性のない場合はメジャーバージョンを、\n\u003e 2. 後方互換性があり機能性を追加した場合はマイナーバージョンを、\n\u003e 3. 後方互換性を伴うバグ修正をした場合はパッチバージョンを上げます。\n\u003e 　プレリリースやビルドナンバーなどのラベルに関しては、メジャー.マイナー.パッチ の形式を拡張する形で利用することができます。  \n\u003e \n\u003e [出典：セマンティック バージョニング](https://semver.org/lang/ja/)\n\n適当にバージョンをふってしまう前に、こちらを参照したほうがよさそう。（戒め）\n","coediting":false,"comments_count":0,"created_at":"2020-10-18T23:19:29+09:00","group":null,"id":"68e9dfb11e84d20acc6d","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"semver","versions":[]},{"name":"SemanticVersioning","versions":[]}],"title":"セマンティック バージョングについてのメモ","updated_at":"2020-10-18T23:19:29+09:00","url":"https://qiita.com/ikuraikura/items/68e9dfb11e84d20acc6d","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"チルダ--と-キャレット-\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%81%E3%83%AB%E3%83%80--%E3%81%A8-%E3%82%AD%E3%83%A3%E3%83%AC%E3%83%83%E3%83%88-\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eチルダ \u003ccode\u003e^\u003c/code\u003e と キャレット \u003ccode\u003e~\u003c/code\u003e\n\u003c/h1\u003e\n\n\u003cp\u003epackage.json に記述されているバージョン情報の チルダ \u003ccode\u003e^\u003c/code\u003e や キャレット \u003ccode\u003e~\u003c/code\u003e は以下の意味になります。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eバージョン固定\n\n\u003cul\u003e\n\u003cli\u003eex) \u003ccode\u003e3.2.1\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eチルダ \u003ccode\u003e~\u003c/code\u003e： マイナーバージョンまでの挙動を保証\n\n\u003cul\u003e\n\u003cli\u003eex) \u003ccode\u003e~3.2.1\u003c/code\u003e = \u003ccode\u003e3.2.x\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eキャレット \u003ccode\u003e^\u003c/code\u003e： メジャーバージョンまでの挙動を保証\n\n\u003cul\u003e\n\u003cli\u003eex) \u003ccode\u003e^3.2.1\u003c/code\u003e = \u003ccode\u003e3.x.x\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003elatest： 全てのバージョンでの挙動を保証\n\n\u003cul\u003e\n\u003cli\u003eex) \u003ccode\u003e*\u003c/code\u003e = \u003ccode\u003ex.x.x\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"npm-install-時の挙動\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#npm-install-%E6%99%82%E3%81%AE%E6%8C%99%E5%8B%95\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enpm install 時の挙動\u003c/h1\u003e\n\n\u003cp\u003eサンプルとして \u003ccode\u003e3.2.1\u003c/code\u003e, \u003ccode\u003e3.2.2\u003c/code\u003e, \u003ccode\u003e3.3.0\u003c/code\u003e, \u003ccode\u003e4.0.0\u003c/code\u003e のバージョンがリリースされている npm パッケージ（a, b, c, d）があるとします。\u003c/p\u003e\n\n\u003cp\u003eそして、package.json を以下のように記述されているとします。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"json\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003epackage.json\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"err\"\u003e（省略）\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"dependencies\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"a\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"3.2.1\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"b\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"~3.2.1\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"c\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"^3.2.1\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"d\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"*\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"err\"\u003e（省略）\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこのときに \u003ccode\u003enpm install\u003c/code\u003e コマンドを実行した場合、インストールされるバージョンは以下のようになります。\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: left\"\u003e記述方法\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003ekey\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003evalue\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003e理解しやすい表記\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eインストールするバージョン\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003eバージョン固定\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003ea\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ccode\u003e3.2.1\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ccode\u003e3.2.1\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ccode\u003e3.2.1\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003eチルダ指定\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003eb\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ccode\u003e~3.2.1\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ccode\u003e3.2.x\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ccode\u003e3.2.2\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003eキャレット指定\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003ec\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ccode\u003e^3.2.1\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ccode\u003e3.x.x\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ccode\u003e3.3.0\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003elatest\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003ed\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ccode\u003ex.x.x\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ccode\u003e4.0.0\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e※ 前提として a, b, c, d のリリースされているパッケージのバージョンは \u003ccode\u003e3.2.1\u003c/code\u003e, \u003ccode\u003e3.2.2\u003c/code\u003e, \u003ccode\u003e3.3.0\u003c/code\u003e, \u003ccode\u003e4.0.0\u003c/code\u003e とした時。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"豆知識\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%B1%86%E7%9F%A5%E8%AD%98\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e豆知識\u003c/h1\u003e\n\n\u003cp\u003eちなみに npm のバージョン管理は \u003cstrong\u003eセマンティック バージョニング\u003c/strong\u003e に準拠しているはずのため、ほとんどがキャレット \u003ccode\u003e^\u003c/code\u003e 指定のバージョンが package.json に記述されます。\u003c/p\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/68e9dfb11e84d20acc6d\" id=\"reference-d0923faa1bceabc4b7e2\"\u003eセマンティック バージョングについてのメモ\u003c/a\u003e\u003c/p\u003e\n","body":"# チルダ `^` と キャレット `~`\n\npackage.json に記述されているバージョン情報の チルダ `^` や キャレット `~` は以下の意味になります。\n\n- バージョン固定\n  - ex) `3.2.1`\n- チルダ `~`： マイナーバージョンまでの挙動を保証\n  - ex) `~3.2.1` = `3.2.x`\n- キャレット `^`： メジャーバージョンまでの挙動を保証\n  - ex) `^3.2.1` = `3.x.x`\n- latest： 全てのバージョンでの挙動を保証\n  - ex) `*` = `x.x.x`\n\n\n# npm install 時の挙動\n\nサンプルとして `3.2.1`, `3.2.2`, `3.3.0`, `4.0.0` のバージョンがリリースされている npm パッケージ（a, b, c, d）があるとします。\n\nそして、package.json を以下のように記述されているとします。\n\n```json:package.json\n{\n  （省略）\n  \"dependencies\": {\n    \"a\": \"3.2.1\",\n    \"b\": \"~3.2.1\",\n    \"c\": \"^3.2.1\",\n    \"d\": \"*\"\n  },\n  （省略）\n}\n```\n\nこのときに `npm install` コマンドを実行した場合、インストールされるバージョンは以下のようになります。\n\n\n|記述方法|key|value|理解しやすい表記|インストールするバージョン|\n|:----|:----|:----|:----|:----|\n|バージョン固定|a|`3.2.1`|`3.2.1`|`3.2.1`|\n|チルダ指定|b|`~3.2.1`|`3.2.x`|`3.2.2`|\n|キャレット指定|c|`^3.2.1`|`3.x.x`|`3.3.0`|\n|latest|d|`*`|`x.x.x`|`4.0.0`|\n\n※ 前提として a, b, c, d のリリースされているパッケージのバージョンは `3.2.1`, `3.2.2`, `3.3.0`, `4.0.0` とした時。\n\n# 豆知識\n\nちなみに npm のバージョン管理は **セマンティック バージョニング** に準拠しているはずのため、ほとんどがキャレット `^` 指定のバージョンが package.json に記述されます。\n\n【参考】\n[セマンティック バージョングについてのメモ](https://qiita.com/sugurutakahashi12345/items/68e9dfb11e84d20acc6d)\n","coediting":false,"comments_count":0,"created_at":"2020-10-18T23:13:47+09:00","group":null,"id":"0876ce674587515c66ba","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"npm","versions":[]},{"name":"package.json","versions":[]}],"title":"package.json に記述される チルダ ^ や キャレット ~ について","updated_at":"2020-10-19T01:42:40+09:00","url":"https://qiita.com/ikuraikura/items/0876ce674587515c66ba","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003epackage.json に記載されているパッケージのバージョンアップには npm-check-updates というツールがとても便利なので紹介したいと思います。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"結論\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E8%AB%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結論\u003c/h1\u003e\n\n\u003cp\u003epackage.json に記載されているパッケージのバージョンアップ方法は以下の 2 つの方法があります。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e方法 1 : npm outdated コマンドを使う\n\n\u003cul\u003e\n\u003cli\u003enpm outdated コマンドを実行し、アップデート情報を確認して、パッケージをひとつひとつ丁寧にアップデートする\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e方法 2 : npm-check-updates パッケージをつかう ← \u003cstrong\u003eおすすめ！\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003enpm-check-updates パッケージを利用して、アップデート情報を確認して、すべてパッケージをまとめてアップデートする\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e手間を考えると npm-check-updates の方が楽です。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"そもそもバージョンアップなら-npm-update-でいいのでは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%83%E3%83%97%E3%81%AA%E3%82%89-npm-update-%E3%81%A7%E3%81%84%E3%81%84%E3%81%AE%E3%81%A7%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eそもそもバージョンアップなら npm update でいいのでは？\u003c/h1\u003e\n\n\u003cp\u003eたしかに \u003ccode\u003enpm update\u003c/code\u003e や \u003ccode\u003enpm update \u0026lt;package\u0026gt;\u003c/code\u003e のコマンド実行によって package.json の内容から依存関係のバージョンの記載の範囲内の最新版をインストールして package-lock.json や node_modules を更新します。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eしかし、package.json の \u003ccode\u003edependencies\u003c/code\u003e や \u003ccode\u003edevDependencies\u003c/code\u003e に記載されている範囲の中での最新のバージョンでアップデートするので、package.json に記載されているバージョンが低ければ、世の中に更新されている最新のバージョンには更新されません。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e例：\u003ccode\u003e^3.2.1\u003c/code\u003e と記載されている場合、\u003ccode\u003e4.0.0\u003c/code\u003e が世の中にリリースされても \u003ccode\u003enpm update\u003c/code\u003e では気づけない。\u003c/p\u003e\n\n\u003cp\u003e（正直、グローバルインストールしたパッケージをバージョンアップする場合を除いて \u003ccode\u003enpm update\u003c/code\u003e が必要となるケースがあまりわかりません。基本的に \u003ccode\u003enpm install\u003c/code\u003e でこと足りると思ってます。）\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"方法-1--npm-outdated-コマンドを使う\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%96%B9%E6%B3%95-1--npm-outdated-%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e方法 1 : npm outdated コマンドを使う\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"npm-outdated-の挙動\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#npm-outdated-%E3%81%AE%E6%8C%99%E5%8B%95\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003enpm outdated の挙動\u003c/h2\u003e\n\n\u003cp\u003eインストールしたパッケージに新しいバージョンが存在するかどうか確認することができる \u003ccode\u003enpm outdated\u003c/code\u003e というコマンドがあります。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003enpm outdated\u003c/code\u003e と実行すると package.json に記載されているパッケージのアップデート情報を教えてくれます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# あえて古いバージョンの cowsay をインストールする\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm \u003cspan class=\"nb\"\u003einstall \u003c/span\u003ecowsay@1.2.0\n+ cowsay@1.2.0\n\n\u003cspan class=\"c\"\u003e# package.json の確認\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003epackage.json\n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  （省略）\n  \u003cspan class=\"s2\"\u003e\"dependencies\"\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\"cowsay\"\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\"^1.2.0\"\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n  （省略）\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# npm outdated の実行で 1.2.0 → 1.4.0 のアップデートが可能なことを教えてくる\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm outdated            \nPackage  Current  Wanted  Latest  Location\ncowsay     1.2.0   1.4.0   1.4.0  typescript-node-base\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eしかし、\u003ccode\u003enpm outdated\u003c/code\u003e は最新バージョンがあることを教えてくれるだけで、\u003cstrong\u003eバージョンアップまではしてくれません。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"バージョンアップ手順\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%83%E3%83%97%E6%89%8B%E9%A0%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eバージョンアップ手順\u003c/h2\u003e\n\n\u003cp\u003epackage.json に記載されているパッケージのバージョン情報をアップデートしたい場合は以下の手順を踏む必要があります。\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003enpm outdated\u003c/code\u003e で新しいバージョンがリリースされてないか確認する\u003c/li\u003e\n\u003cli\u003e新しいバージョンがリリースされていた場合、該当のパッケージをアンインストールする\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003enpm install \u0026lt;package\u0026gt;\u003c/code\u003e で再度パッケージをインストールする\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eしかし、この手順では、たくさんのパッケージを管理していると 2. の手順でバージョンアップのあるパッケージに対して1つ1つパッケージを再インストールしなければならないので大変です。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"方法-2--npm-check-updates-を使う\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%96%B9%E6%B3%95-2--npm-check-updates-%E3%82%92%E4%BD%BF%E3%81%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e方法 2 : npm-check-updates を使う\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003enpm-check-updates\u003c/code\u003e というパッケージを使用すればとても以下のコマンドだけの手順でアップデートが可能です。\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003encu\u003c/code\u003e コマンドの実行 （アップデート情報の確認）\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003encu -u\u003c/code\u003e コマンドの実行（package.json の更新）\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003enpm install\u003c/code\u003e コマンドの実行（更新された package.json をもとにパッケージをインストール）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e実行例は以下の通りです。\u003ccode\u003ecowsay\u003c/code\u003e の古いパッケージを package.json ごとアップデートします。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# package.json の状況\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003epackage.json\n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  （省略）\n  \u003cspan class=\"s2\"\u003e\"dependencies\"\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\"cowsay\"\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\"^1.2.0\"\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n  （省略）\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# ncu でアップデート可能なパッケージの確認（ほとんどの記事ではグローバルインストールしていますが使用頻度は多くないと思うので npx での実行でもいいと思います）\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpx \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e npm-check-updates  \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"ncu\"\u003c/span\u003e\nnpx: 285個のパッケージを6.971秒でインストールしました。\nChecking package.json\n\u003cspan class=\"o\"\u003e[====================]\u003c/span\u003e 2/2 100%\n\n cowsay  ^1.2.0  →  ^1.4.0   \n\nRun ncu \u003cspan class=\"nt\"\u003e-u\u003c/span\u003e to upgrade package.json\n\n\n\u003cspan class=\"c\"\u003e# ncu -u を実行すると package.json が更新される\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpx \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e npm-check-updates  \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"ncu -u\"\u003c/span\u003e\nnpx: 285個のパッケージを6.971秒でインストールしました。\nChecking package.json\n\u003cspan class=\"o\"\u003e[====================]\u003c/span\u003e 2/2 100%\n\n cowsay  ^1.2.0  →  ^1.4.0   \n\nRun npm \u003cspan class=\"nb\"\u003einstall \u003c/span\u003eto \u003cspan class=\"nb\"\u003einstall \u003c/span\u003enew versions.\n\n\n\u003cspan class=\"c\"\u003e# package.json が更新していることの確認\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003epackage.json\n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  （省略）\n  \u003cspan class=\"s2\"\u003e\"dependencies\"\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\"cowsay\"\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\"^1.4.0\"\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n  （省略）\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n\n\u003cspan class=\"c\"\u003e# 更新された package.json をもとに npm install の実行\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpm \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eサンプルはわかりやすいように1つのパッケージしか入っていませんが、複数のパッケージが入っていても \u003ccode\u003encu -u\u003c/code\u003e ですべてのパッケージが一度にアップデートされます。\u003c/p\u003e\n\n\u003cp\u003eまた、特定のパッケージだけを指定できたり、正規表現で複数のパッケージも指定できたり、マイナーバージョン以上、またはパッチバージョン以上のバージョンアップを指定できたり、いろいろとできるようです（詳しくは公式リファレンス参照）。\u003c/p\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\n\u003ca href=\"https://dackdive.hateblo.jp/entry/2016/10/10/095800\" rel=\"nofollow noopener\" target=\"_blank\"\u003enpm installしたパッケージの更新確認とアップデート(npm-check-updates)\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"参考-depcheck\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8F%82%E8%80%83-depcheck\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e【参考】 depcheck\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/depcheck/depcheck\" rel=\"nofollow noopener\" target=\"_blank\"\u003edepcheck\u003c/a\u003e という使用されていないパッケージを教えてくれるツールもありました。\u003cbr\u003e\nアップデートの検討を考える前にこのツールを使って不要なパッケージは削除してしまった方がいいと思います。\u003c/p\u003e\n\n\u003cp\u003e使い方は \u003ccode\u003enpx depcheck\u003c/code\u003e とコマンド実行するだけです。\u003c/p\u003e\n\n\u003cp\u003e使用例：\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# 未使用パッケージ削除前\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpx depcheck\nnpx: 108個のパッケージを6.778秒でインストールしました。\nUnused dependencies\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e bootstrap\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e jquery\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e path\nUnused devDependencies\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e babel-eslint\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e casperjs\n\n\u003cspan class=\"c\"\u003e# 未使用パッケージ削除後\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003enpx depcheck\nnpx: 108個のパッケージを4.581秒でインストールしました。\nNo depcheck issue\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e【参考】\u003cbr\u003e\nnpx については以下の記事で解説しています。\u003cbr\u003e\n・ \u003ca href=\"https://qiita.com/sugurutakahashi12345/items/b814a09b65d8852226ad\" id=\"reference-2631082f33e5450a402e\"\u003enpm でローカルインストールしたパッケージを CLI でコマンド実行する方法（npm-srcipts, npx）\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"公式リファレンス\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%85%AC%E5%BC%8F%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e公式リファレンス\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003enpm outdated\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://docs.npmjs.com/cli/outdated\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://docs.npmjs.com/cli/outdated\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003enpm-check-updates\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/tjunnone/npm-check-updates\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/tjunnone/npm-check-updates\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eオプション一覧：\u003ca href=\"https://github.com/tjunnone/npm-check-updates#options\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/tjunnone/npm-check-updates#options\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n","body":"# はじめに\npackage.json に記載されているパッケージのバージョンアップには npm-check-updates というツールがとても便利なので紹介したいと思います。\n\n# 結論\n\npackage.json に記載されているパッケージのバージョンアップ方法は以下の 2 つの方法があります。\n\n- 方法 1 : npm outdated コマンドを使う\n  - npm outdated コマンドを実行し、アップデート情報を確認して、パッケージをひとつひとつ丁寧にアップデートする\n- 方法 2 : npm-check-updates パッケージをつかう ← **おすすめ！**\n  - npm-check-updates パッケージを利用して、アップデート情報を確認して、すべてパッケージをまとめてアップデートする\n\n**手間を考えると npm-check-updates の方が楽です。**\n\n# そもそもバージョンアップなら npm update でいいのでは？\n\nたしかに `npm update` や `npm update \u003cpackage\u003e` のコマンド実行によって package.json の内容から依存関係のバージョンの記載の範囲内の最新版をインストールして package-lock.json や node_modules を更新します。\n\n**しかし、package.json の `dependencies` や `devDependencies` に記載されている範囲の中での最新のバージョンでアップデートするので、package.json に記載されているバージョンが低ければ、世の中に更新されている最新のバージョンには更新されません。**\n\n例：`^3.2.1` と記載されている場合、`4.0.0` が世の中にリリースされても `npm update` では気づけない。\n\n（正直、グローバルインストールしたパッケージをバージョンアップする場合を除いて `npm update` が必要となるケースがあまりわかりません。基本的に `npm install` でこと足りると思ってます。）\n\n# 方法 1 : npm outdated コマンドを使う\n\n## npm outdated の挙動\n\nインストールしたパッケージに新しいバージョンが存在するかどうか確認することができる `npm outdated` というコマンドがあります。\n\n`npm outdated` と実行すると package.json に記載されているパッケージのアップデート情報を教えてくれます。\n\n\n```shell\n# あえて古いバージョンの cowsay をインストールする\n$ npm install cowsay@1.2.0\n+ cowsay@1.2.0\n\n# package.json の確認\n$ cat package.json\n{\n  （省略）\n  \"dependencies\": {\n    \"cowsay\": \"^1.2.0\"\n  },\n  （省略）\n}\n\n# npm outdated の実行で 1.2.0 → 1.4.0 のアップデートが可能なことを教えてくる\n$ npm outdated            \nPackage  Current  Wanted  Latest  Location\ncowsay     1.2.0   1.4.0   1.4.0  typescript-node-base\n```\n\nしかし、`npm outdated` は最新バージョンがあることを教えてくれるだけで、**バージョンアップまではしてくれません。**\n\n## バージョンアップ手順\n\npackage.json に記載されているパッケージのバージョン情報をアップデートしたい場合は以下の手順を踏む必要があります。\n\n1. `npm outdated` で新しいバージョンがリリースされてないか確認する\n2. 新しいバージョンがリリースされていた場合、該当のパッケージをアンインストールする\n3. `npm install \u003cpackage\u003e` で再度パッケージをインストールする\n\nしかし、この手順では、たくさんのパッケージを管理していると 2. の手順でバージョンアップのあるパッケージに対して1つ1つパッケージを再インストールしなければならないので大変です。\n\n\n# 方法 2 : npm-check-updates を使う\n\n`npm-check-updates` というパッケージを使用すればとても以下のコマンドだけの手順でアップデートが可能です。\n\n1. `ncu` コマンドの実行 （アップデート情報の確認）\n2. `ncu -u` コマンドの実行（package.json の更新）\n3. `npm install` コマンドの実行（更新された package.json をもとにパッケージをインストール）\n\n実行例は以下の通りです。`cowsay` の古いパッケージを package.json ごとアップデートします。\n\n```shell\n# package.json の状況\n$ cat package.json\n{\n  （省略）\n  \"dependencies\": {\n    \"cowsay\": \"^1.2.0\"\n  },\n  （省略）\n}\n\n# ncu でアップデート可能なパッケージの確認（ほとんどの記事ではグローバルインストールしていますが使用頻度は多くないと思うので npx での実行でもいいと思います）\n$ npx -p npm-check-updates  -c \"ncu\"\nnpx: 285個のパッケージを6.971秒でインストールしました。\nChecking package.json\n[====================] 2/2 100%\n\n cowsay  ^1.2.0  →  ^1.4.0   \n\nRun ncu -u to upgrade package.json\n\n\n# ncu -u を実行すると package.json が更新される\n$ npx -p npm-check-updates  -c \"ncu -u\"\nnpx: 285個のパッケージを6.971秒でインストールしました。\nChecking package.json\n[====================] 2/2 100%\n\n cowsay  ^1.2.0  →  ^1.4.0   \n\nRun npm install to install new versions.\n\n\n# package.json が更新していることの確認\n$ cat package.json\n{\n  （省略）\n  \"dependencies\": {\n    \"cowsay\": \"^1.4.0\"\n  },\n  （省略）\n}\n\n\n# 更新された package.json をもとに npm install の実行\n$ npm install\n```\n\nサンプルはわかりやすいように1つのパッケージしか入っていませんが、複数のパッケージが入っていても `ncu -u` ですべてのパッケージが一度にアップデートされます。\n\nまた、特定のパッケージだけを指定できたり、正規表現で複数のパッケージも指定できたり、マイナーバージョン以上、またはパッチバージョン以上のバージョンアップを指定できたり、いろいろとできるようです（詳しくは公式リファレンス参照）。\n\n\n【参考】\n[npm installしたパッケージの更新確認とアップデート(npm-check-updates)](https://dackdive.hateblo.jp/entry/2016/10/10/095800)\n\n# 【参考】 depcheck\n\n\n\n[depcheck](https://github.com/depcheck/depcheck) という使用されていないパッケージを教えてくれるツールもありました。\nアップデートの検討を考える前にこのツールを使って不要なパッケージは削除してしまった方がいいと思います。\n\n使い方は `npx depcheck` とコマンド実行するだけです。\n\n使用例：\n\n```shell\n# 未使用パッケージ削除前\n$ npx depcheck\nnpx: 108個のパッケージを6.778秒でインストールしました。\nUnused dependencies\n* bootstrap\n* jquery\n* path\nUnused devDependencies\n* babel-eslint\n* casperjs\n\n# 未使用パッケージ削除後\n$ npx depcheck\nnpx: 108個のパッケージを4.581秒でインストールしました。\nNo depcheck issue\n```\n\n【参考】\nnpx については以下の記事で解説しています。\n・ [npm でローカルインストールしたパッケージを CLI でコマンド実行する方法（npm-srcipts, npx）](https://qiita.com/sugurutakahashi12345/items/b814a09b65d8852226ad)\n\n# 公式リファレンス\n\n- npm outdated\n  - https://docs.npmjs.com/cli/outdated\n- npm-check-updates\n  - https://github.com/tjunnone/npm-check-updates\n  - オプション一覧：https://github.com/tjunnone/npm-check-updates#options\n","coediting":false,"comments_count":0,"created_at":"2020-10-18T19:32:48+09:00","group":null,"id":"df736ddaf65c244e1b4f","likes_count":49,"private":false,"reactions_count":0,"tags":[{"name":"npm","versions":[]},{"name":"npm-check-updates","versions":[]}],"title":"package.json に記載されているパッケージのバージョンアップ方法 【 npm-check-updates, outdated 】","updated_at":"2021-02-22T16:20:44+09:00","url":"https://qiita.com/ikuraikura/items/df736ddaf65c244e1b4f","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null}]