[{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"1-はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#1-%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e1. はじめに\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/sugurutakahashi12345/items/3cc26f23b82f344fa188\" id=\"reference-6d44583433ab8ad842db\"\u003eWebページが表示される仕組み\u003c/a\u003eの続編になります。（別に読まなくても大丈夫なように記事は執筆しました。）\u003c/p\u003e\n\n\u003cp\u003e本記事では、「Web サイトが表示される原理」、「Docker での Web サーバーの構築」、「Web サイトの作成」の順に説明して、自ら作成した Web サイトが表示されるところまでを体験することが目標になります。\u003c/p\u003e\n\n\u003cp\u003eかなり初心者向けの記事になります。\u003cbr\u003e\n(結果的に、自作の Web サイトを表示することが目的なのに、Docker の使い方の記事みたいになってしまいました、、、)\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"1-1-why-docker\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#1-1-why-docker\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e1-1. Why Docker？\u003c/h2\u003e\n\n\u003cp\u003eWeb サイトを作成するためには Web サーバーが必要になりますが、今回の目標を達成するには凝った機能は必要なく、ただ URL でアクセスしたときにコンテンツを返却してくれるだけで十分であるため、手軽に Web サーバーを構築できるを利用できる Docker を使ってみようと思いました。\u003c/p\u003e\n\n\u003cp\u003e（なお、筆者は Docker は初めて触ります。）\u003c/p\u003e\n\n\u003cp\u003e本記事を投稿する上で、以下の記事がとても参考になりました。\u003cbr\u003e\n\u003ca href=\"https://weblabo.oscasierra.net/docker-httpd-usage/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eDocker 公式 httpd イメージを利用して Docker を体験してみよう\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e結局、本記事は、ほぼその記事の丸写しになってしまいましたが、備忘録もかねて投稿いたします。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"2-事前に知っておきたい知識\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#2-%E4%BA%8B%E5%89%8D%E3%81%AB%E7%9F%A5%E3%81%A3%E3%81%A6%E3%81%8A%E3%81%8D%E3%81%9F%E3%81%84%E7%9F%A5%E8%AD%98\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e2. 事前に知っておきたい知識\u003c/h1\u003e\n\n\u003cp\u003eご存知の方は飛ばしていただいて結構です。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"2-1-web-ページが表示される仕組み\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#2-1-web-%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%82%8B%E4%BB%95%E7%B5%84%E3%81%BF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e2-1. Web ページが表示される仕組み\u003c/h2\u003e\n\n\u003cp\u003e細かい説明は省きますが、図で表すと以下のようになります。（\u003ca href=\"https://daeuwordpress.com/homepage-system/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e参照元ページ\u003c/a\u003e）\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/c77c5e79ec6f35dddc6c8fcda223b4179c0c024d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f30373835383132622d383033342d643235322d383636302d6266666362396136323338312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F0785812b-8034-d252-8660-bffcb9a62381.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=e6789a61a2f0b9ddc4fa058a827b80a2\" alt=\"https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_259125_f56984d6-5c04-531f-ac96-fbb00b5a8470.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/0785812b-8034-d252-8660-bffcb9a62381.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F0785812b-8034-d252-8660-bffcb9a62381.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=46f15a14ae9547e896d7aa4da4961702 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n本記事では図の右側のWebサーバーをローカル PC 上の Docker のコンテナ上で稼働させます。\u003c/p\u003e\n\n\u003cp\u003eなお、今回はローカル PC 上のコンテナに直接アクセスするため、DNS サーバーによる名前解決は行いません。\u003cbr\u003e\n（つまり、今回は ① と ② は扱いません。いきなり ③ → ④ となります。）\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"2-2-webサーバー\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#2-2-web%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e2-2. Webサーバー\u003c/h2\u003e\n\n\u003cp\u003eWeb サーバーとはクライアントからの要求に対し、Web ページを閲覧するために必要なデータを転送するサーバーのことです。\u003c/p\u003e\n\n\u003cp\u003e「クライアントからの要求」とは、\u003cstrong\u003eHTTP リクエスト\u003c/strong\u003e のことで、ブラウザでアクセスする URL をみると「https://〜」となっていると思いますが、その頭文字の http とは \u003cstrong\u003eHTTP リクエスト\u003c/strong\u003e であることを意味しております。\u003c/p\u003e\n\n\u003cp\u003eつまり、Web サーバーに対して、\u003cstrong\u003eHTTPリクエスト\u003c/strong\u003e をすると Web ページを閲覧するために必要なデータ（HTML、CSS、JavaScript、動画、写真など）を転送してくれます。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"2-3-ドキュメントルート\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#2-3-%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%83%AB%E3%83%BC%E3%83%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e2-3. ドキュメントルート\u003c/h2\u003e\n\n\u003cp\u003eドキュメントルートとは、Web サイトで外部から公開される HTML ファイルや画像データなどが設置される場所のことを指します。\u003c/p\u003e\n\n\u003cp\u003eもし、仮にドメインが「http://example.com」である場合、ドキュメントルートに指定したディレクトリに「hogehoge.html」というHTMLファイルを設置していると「http://example.com/hogehoge.html」とブラウザからアクセスすると、Webサーバーはhogehoge.htmlを返却して、ブラウザにhogehoge.htmlの内容が表示されます。\u003c/p\u003e\n\n\u003cp\u003eまた、「http://example.com」とアクセスした場合、デフォルトでその階層の\u003cstrong\u003e「index.html」\u003c/strong\u003eを返却するようになっています。\u003cbr\u003e\n（これを知らないと 「index.html」って何だろう？ となってしまうため結構大事かも。。。）\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"2-4-web-サーバーの種類\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#2-4-web-%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AE%E7%A8%AE%E9%A1%9E\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e2-4. Web サーバーの種類\u003c/h2\u003e\n\n\u003cp\u003eWeb サーバーにも種類があります。\u003cbr\u003e\n世界的にシェアが高いのは\u003cstrong\u003e「Apache」「Nginx」「IIS」\u003c/strong\u003eの3種類です。\u003c/p\u003e\n\n\u003cp\u003eまず、IIS は Windows サーバー縛りという環境でなければ使うことがないでしょう。\u003c/p\u003e\n\n\u003cp\u003eそうなると「Apache」と「Nginx」の2択になりますが、Nginx の方が処理が軽く大量のリクエストを処理するのに向いていおり、さらにリバーシプロキシ機能までついているおまけ付きであり、現在では Nginx の方が人気らしいです。\u003c/p\u003e\n\n\u003cp\u003eどちらを使うかは case-by-case であるので状況に応じて使い分けてください。\u003cbr\u003e\n比較する記事がネットには溢れていました。（個人的には\u003ca href=\"https://qiita.com/kamihork/items/49e2a363da7d840a4149\" id=\"reference-abe91761732de25a6812\"\u003eこちら\u003c/a\u003eがわかりやすかったです。）\u003c/p\u003e\n\n\u003cp\u003e今回は単に手元で Web サーバーとして動けば何でもよかったので、Apache でも Nginx でもどちらでもよかったのですが、参考にした記事が Apache の httpd の Docker イメージを使用していたので、そちらを採用しました。\u003c/p\u003e\n\n\u003cp\u003e「httpd」って何？って思う方もいらっしゃると思いますが、「Apache で Web サーバーとしての機能をする常駐のプログラムのこと」だと思っていただければ大丈夫です。（\u003ca href=\"https://wa3.i-3-i.info/word13579.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e参考記事\u003c/a\u003e）\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"2-5-docker\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#2-5-docker\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e2-5. Docker\u003c/h2\u003e\n\n\u003cp\u003eDocker についてここでは詳しく説明しませんが、Docker とはコンテナ型の仮想化環境を提供するプラットフォームのことです。\u003cbr\u003e\nとりあえず、Docker を使えば簡単に開発環境を構築することができるということだけ抑えてもらえれば大丈夫です。\u003c/p\u003e\n\n\u003cp\u003e今回は Docker を使用して自身の環境に Web サーバーを構築します。\u003c/p\u003e\n\n\u003cp\u003eまた、Docker を使用するには自身の環境にインストールする必要があるので、以下の記事などを参考にインストールしてください。\u003cbr\u003e\n\u003ca href=\"https://qiita.com/kurkuru/items/127fa99ef5b2f0288b81\" id=\"reference-7c810a8486f7c3847a98\"\u003eDocker を Mac にインストールする（更新: 2019/7/13）\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eそもそも Docker について知りたいという方は以下の記事がとても勉強になりましたのでご参考まで。\u003cbr\u003e\n\u003ca href=\"https://www.tech-training.jp/blog/entries/28\" rel=\"nofollow noopener\" target=\"_blank\"\u003eDocker 入門の前に知っておきたい基礎知識 - 週末勉強会レポート\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"3-docker-での-web-サーバーの構築\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#3-docker-%E3%81%A7%E3%81%AE-web-%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AE%E6%A7%8B%E7%AF%89\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e3. Docker での Web サーバーの構築\u003c/h1\u003e\n\n\u003cp\u003eWebサーバーとして有名な Apache httpd だけを含んでいる httpd という Docker イメージが公式の Docker Hub リポジトリで公開されています。\u003cbr\u003e\n今回は\u003ca href=\"https://hub.docker.com/_/httpd/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eこちら\u003c/a\u003eを使用します。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/d61c4a1e719353100e66a51ed36e4d51fd54d33d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f65616635333134642d303362642d646335312d333635322d6663623939366135613561302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"782\" alt=\"スクリーンショット 2020-07-25 22.00.03.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Feaf5314d-03bd-dc51-3652-fcb996a5a5a0.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=8c42fa4aa49d67d7d06c219120f1f986\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/eaf5314d-03bd-dc51-3652-fcb996a5a5a0.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Feaf5314d-03bd-dc51-3652-fcb996a5a5a0.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bdd04a38d734015a5593f1036fc19929 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eまた今から使用する Docker のコマンドは大きく以下のようになります。（\u003ca href=\"https://morizyun.github.io/docker/about-docker-command.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e参照元\u003c/a\u003e）\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/182befb24908b189374ad9df1d9af694c8bcb4d5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f36383166313765652d363637622d366134302d303366382d6232343237636236346461312e6a706567\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F681f17ee-667b-6a40-03f8-b2427cb64da1.jpeg?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=220906b5d1425a3ed28dc8ab20a57c90\" alt=\"docker-command-outline.jpg\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/681f17ee-667b-6a40-03f8-b2427cb64da1.jpeg\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F681f17ee-667b-6a40-03f8-b2427cb64da1.jpeg?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bfe0cad15c2c7469cf66cd7450d5aaf9 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"3-1-httpd-イメージのダウンロード確認docker-image-pulldocker-image-ls\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#3-1-httpd-%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%81%AE%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E7%A2%BA%E8%AA%8Ddocker-image-pulldocker-image-ls\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e3-1. httpd イメージのダウンロード・確認（docker image pull、docker image ls）\u003c/h2\u003e\n\n\u003cp\u003eまずはローカル環境に Docker イメージを持っておく必要があります。 現在ローカルで持っているイメージを確認するには\u003ccode\u003edocker image ls\u003c/code\u003e コマンドを実行します。 \u003cbr\u003e\n初期状態では一つも Docker イメージがないはずなので以下のように表示されます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eダウンロードされているDockerイメージの確認\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker image \u003cspan class=\"nb\"\u003els\n\n\u003c/span\u003eREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eDocker Hub からイメージを取得するには、\u003ccode\u003edocker image pull [サービス名]:[タグ名]\u003c/code\u003eとコマンド入力します。\u003cbr\u003e\nhttpd のイメージを pull する際に指定できるタグ名は、Docker Hub の\u003ca href=\"https://hub.docker.com/_/httpd?tab=tags\" rel=\"nofollow noopener\" target=\"_blank\"\u003eタグ一覧のページ\u003c/a\u003eから確認することができます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/17d401f38d45c1c4b048721270b4cc187653edb2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f38653835393439342d326230652d666465372d306364342d3434343264313737666134342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"711\" alt=\"スクリーンショット 2020-07-25 22.11.34.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F8e859494-2b0e-fde7-0cd4-4442d177fa44.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=7a36a48a5a9cb0c1b79628840c4fe5c5\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/8e859494-2b0e-fde7-0cd4-4442d177fa44.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F8e859494-2b0e-fde7-0cd4-4442d177fa44.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=e560d2f0490d302090f1d81ad314399d 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003edocker image pull [サービス名]:[タグ名]\u003c/code\u003eと入力する際に、タグ名を省略した場合はデフォルトで \u003cstrong\u003elatest\u003c/strong\u003e を指定したことになります。\u003cbr\u003e\n今回は Apache httpd の最新版をインストールできればよいのでタグ名を指定せずに実行します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ehttpdイメージのダウンロード\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker image pull httpd\n\nUsing default tag: latest\nlatest: Pulling from library/httpd\n6ec8c9369e08: Pull \u003cspan class=\"nb\"\u003ecomplete\n\u003c/span\u003e819d6e0b29e7: Pull \u003cspan class=\"nb\"\u003ecomplete\n\u003c/span\u003e6a237d0d4aa4: Pull \u003cspan class=\"nb\"\u003ecomplete\n\u003c/span\u003ecd9a987eec32: Pull \u003cspan class=\"nb\"\u003ecomplete\n\u003c/span\u003efdec8f3f8485: Pull \u003cspan class=\"nb\"\u003ecomplete\n\u003c/span\u003eDigest: sha256:2a9ae199b5efc3e818cdb41c790638fc043ffe1aba6bc61ada28ab6356d044c6\nStatus: Downloaded newer image \u003cspan class=\"k\"\u003efor \u003c/span\u003ehttpd:latest\ndocker.io/library/httpd:latest\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003edocker image ls\u003c/code\u003eコマンドでダウントー度されていることを確認します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ehttpdイメージがダウンロードされたことの確認\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker image \u003cspan class=\"nb\"\u003els\n\n\u003c/span\u003eREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhttpd               latest              9d2a0c6e5b57        2 days ago          166MB\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003ehttpd のサービスがあることが確認できるかとおもいます。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"3-2-httpd-イメージからコンテナを作成起動するdocker-container-run\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#3-2-httpd-%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%81%8B%E3%82%89%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%92%E4%BD%9C%E6%88%90%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8Bdocker-container-run\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e3-2. httpd イメージからコンテナを作成・起動する（docker container run）\u003c/h2\u003e\n\n\u003cp\u003eDocker イメージの取得ができたら、次は実行させます。 \u003cbr\u003e\nイメージからコンテナを作成して起動するには、\u003ccode\u003edocker container run (オプション) [イメージ名]\u003c/code\u003eとコマンドを実行します。 \u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eコンテナの作成・起動\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container run \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 8080:80 httpd\n\nd2e80c20cfbdcf7aee76772a790821e529bbbdfe07329e9179ea32939cb85797\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e今回\u003ccode\u003edocker container run\u003c/code\u003eコマンドで指定したオプションは\u003ccode\u003e-d\u003c/code\u003e と \u003ccode\u003e-p 8080:80\u003c/code\u003e のオプションです。\u003cbr\u003e\nこれらについて解説します。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e-d\u003c/code\u003e オプションは、コンテナの実行をバックグラウンドで行うオプションです。 このオプションを指定しなかった場合は、ターミナルのコマンド操作が Ctrl+C を実行するまでコンテナに奪われてしまいます。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e-p 8080:80\u003c/code\u003e オプションは、コンテナのポート番号とローカルのコンピュータのポート番号を紐づけるオプションです。\u003c/p\u003e\n\n\u003cp\u003e今回実行したコンテナは httpd の機能を持っておりコンテナの80番ポートで httpd サービスが開始されるので、ローカルマシンの8080番ポートをコンテナの80番ポートに紐づけたことになります。\u003c/p\u003e\n\n\u003cp\u003e一旦、これで Web サーバーである httpd コンテナの実行が完了しましたので、ブラウザで \u003ca href=\"http://localhost:8080\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://localhost:8080\u003c/a\u003e にアクセスしてみてください。\u003cbr\u003e\n「It work!」の表示がされるはずです。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/1640e6037af459fe8d5e8b54bdd75b65149b0218/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f38326263626431342d303061332d616166622d663830332d3366306232386466303435392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"417\" alt=\"スクリーンショット 2020-07-25 18.45.53.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F82bcbd14-00a3-aafb-f803-3f0b28df0459.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=e537ac717f25afc19a163bc0a7c44c76\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/82bcbd14-00a3-aafb-f803-3f0b28df0459.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F82bcbd14-00a3-aafb-f803-3f0b28df0459.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=9d9d8faa2669eb591bf983e87be19843 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこれは、Web サーバーのドキュメントルートにデフォルトでおいてある index.html （あとで確認します）が返却されてその内容がブラウザに表示されているということです。\u003c/p\u003e\n\n\u003cp\u003eたったこれだけで Web サーバーを立てることができるとは、Docker はほんとに素晴らしいですね。　\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"ポート番号についてちょっとした解説\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%9D%E3%83%BC%E3%83%88%E7%95%AA%E5%8F%B7%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E3%81%97%E3%81%9F%E8%A7%A3%E8%AA%AC\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eポート番号についてちょっとした解説\u003c/h3\u003e\n\n\u003cp\u003eWebサーバーは一般的に80番ポートで http 通信を待ち受けています。\u003cbr\u003e\nまた、ポート8080番は代替 HTTP ポートと呼ばれ、大抵のプロキシサーバは8080番でサービスを待ち受けています。\u003c/p\u003e\n\n\u003cp\u003e以下の図で表すと、クライアントAがブラウザ、プロキシサーバーBが自身の Mac の PC、Web サーバーCが Docker コンテナ上で動いている httpd というイメージです。（\u003ca href=\"https://www.fe-siken.com/kakomon/01_aki/q34.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e参照元\u003c/a\u003e）\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/fbb70c2c427bfa24dc06df0a4baf0a8cb909fed3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f34643861393934612d343239382d613739612d663832652d3433383532613464643239332e676966\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F4d8a994a-4298-a79a-f82e-43852a4dd293.gif?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=25c190f1dbdadc2abbb5fa04f234ecf9\" alt=\"34.gif\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/4d8a994a-4298-a79a-f82e-43852a4dd293.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F4d8a994a-4298-a79a-f82e-43852a4dd293.gif?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=50338b3632c5ba3f1d8889544396aef0 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"3-3-実行中のコンテナを確認するdocker-container-ls\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#3-3-%E5%AE%9F%E8%A1%8C%E4%B8%AD%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8Bdocker-container-ls\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e3-3. 実行中のコンテナを確認する（docker container ls）\u003c/h2\u003e\n\n\u003cp\u003e現在実行中の docker のコンテナの確認は\u003ccode\u003edocker container ls\u003c/code\u003eのコマンド実行によって確認ができます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e実行中のコンテナの確認\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container \u003cspan class=\"nb\"\u003els\n\n\u003c/span\u003eCONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS                  NAMES\nd2e80c20cfbd        httpd               \u003cspan class=\"s2\"\u003e\"httpd-foreground\"\u003c/span\u003e   4 minutes ago       Up 4 minutes        0.0.0.0:8080-\u0026gt;80/tcp   clever_chatelet\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003ehttpdのコンテナプロセスが起動していることが確認できます。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"3-4-コンテナの停止起動docker-container-stopdocker-container-start\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#3-4-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E5%81%9C%E6%AD%A2%E8%B5%B7%E5%8B%95docker-container-stopdocker-container-start\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e3-4. コンテナの停止・起動（docker container stop、docker container start）\u003c/h2\u003e\n\n\u003cp\u003e実行中のコンテナを一時的に停止したい場合、\u003ccode\u003edocker container stop\u003c/code\u003eコマンドを利用します。 コマンドの引数として、コンテナのIDを指定する必要があります。\u003cbr\u003e\nコンテナのIDは上記で説明した\u003ccode\u003edocker container ls\u003c/code\u003eのコマンドで確認できます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eコンテナの停止\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003edocker container stop d2e80c20cfbd\n\nd2e80c20cfbd\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003edocker container ls\u003c/code\u003e のコマンドで先ほど \u003ccode\u003edocker container stop\u003c/code\u003eコマンドで指定したプロセスが起動していないことを確認します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e実行中のコンテナの確認\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container \u003cspan class=\"nb\"\u003els\n\n\u003c/span\u003eCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e停止させたコンテナも表示させたい場合は、\u003ccode\u003edocker container ls\u003c/code\u003e コマンドに \u003ccode\u003e-a\u003c/code\u003e オプションをつけて実行します。 表示された結果の STATUS の欄に Exited と表示されている点に着目してください。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e停止中のコンテナの確認\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container \u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e\n\nCONTAINER ID        IMAGE               COMMAND              CREATED             STATUS                          PORTS               NAMES\nd2e80c20cfbd        httpd               \u003cspan class=\"s2\"\u003e\"httpd-foreground\"\u003c/span\u003e   7 minutes ago       Exited \u003cspan class=\"o\"\u003e(\u003c/span\u003e0\u003cspan class=\"o\"\u003e)\u003c/span\u003e About a minute ago                       clever_chatelet\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこの停止したコンテナを再度起動したい場合は、\u003ccode\u003edocker container start\u003c/code\u003e コマンドにコンテナIDを指定して実行します。ポイントは一度\u003ccode\u003edocker container run\u003c/code\u003eしたコンテナは、再び\u003ccode\u003edocker container run\u003c/code\u003eするのではなく\u003ccode\u003edocker container start\u003c/code\u003e コマンドによって再起動させます。\u003cbr\u003e\nそうしないと\u003ccode\u003edocker container run\u003c/code\u003eする度に別のコンテナが生成されて、httpd のコンテナが複数作られることになります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e停止中のコンテナの起動\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container start d2e80c20cfbd\n\nd2e80c20cfbd\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e起動後にまた \u003ccode\u003edocker container ls\u003c/code\u003e コマンドを実行すれば、再度実行中であることがわかります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e起動中のコンテナの確認\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container \u003cspan class=\"nb\"\u003els\n\n\u003c/span\u003eCONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS                  NAMES\nd2e80c20cfbd        httpd               \u003cspan class=\"s2\"\u003e\"httpd-foreground\"\u003c/span\u003e   9 minutes ago       Up About a minute   0.0.0.0:8080-\u0026gt;80/tcp   clever_chatelet\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"3-5-コンテナへのログイン\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#3-5-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%B8%E3%81%AE%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e3-5. コンテナへのログイン\u003c/h2\u003e\n\n\u003cp\u003e実際にコンテナにログインしてみて、httpd のドキュメントルートの状況を確認してみたいと思います。\u003c/p\u003e\n\n\u003cp\u003eコンテナには \u003ccode\u003edocker exec -it [コンテナID] /bin/bash\u003c/code\u003e とコマンド実行すると、そのコンテナにログインすることができ、コマンド操作をすることができます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eコンテナへのログイン\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e d2e80c20cfbd /bin/bash\n\nroot@d2e80c20cfbd:/usr/local/apache2# \u003cspan class=\"o\"\u003e(\u003c/span\u003e指定したコンテナ内のコンソール\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003ehttpd イメージでは、Apache httpd のドキュメントルート(DocumentRoot)は、\u003ccode\u003e/usr/local/apache2/htdocs/\u003c/code\u003eとなっていますので、そこを確認してみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eドキュメントルートの確認\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003eroot@d2e80c20cfbd:/usr/local/apache2# \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /usr/local/apache2/htdocs/\nroot@d2e80c20cfbd:/usr/local/apache2/htdocs# \u003cspan class=\"nb\"\u003els\n\u003c/span\u003eindex.html\nroot@d2e80c20cfbd:/usr/local/apache2/htdocs# \u003cspan class=\"nb\"\u003ecat \u003c/span\u003eindex.html\n\u0026lt;html\u0026gt;\u0026lt;body\u0026gt;\u0026lt;h1\u0026gt;It works!\u0026lt;/h1\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eドキュメントルートには「It works!」と書かれた index.html という HTML ファイルがあることが確認できますね。\u003cbr\u003e\nこれがさきほど、ブラウザで \u003ca href=\"http://localhost:8080\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://localhost:8080\u003c/a\u003e にアクセスしたときに表示されたものになります。\u003c/p\u003e\n\n\u003cp\u003eちなみに、ログインしたコンテナからは \u003ccode\u003eexit\u003c/code\u003e コマンドでログアウトできます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eログインしたコンテナからのログアウト\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003eroot@d2e80c20cfbd:/usr/local/apache2/htdocs# \u003cspan class=\"nb\"\u003eexit\nexit\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eMacのコンソール\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"4-自作の-web-サイトを作成する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#4-%E8%87%AA%E4%BD%9C%E3%81%AE-web-%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e4. 自作の Web サイトを作成する\u003c/h1\u003e\n\n\u003cp\u003eさて、ここまでで Docker を利用して Apache httpd を実行できることはお分かり頂けたでしょう。 しかし一つ問題は、表示できた WEB サイトは Apache httpd デフォルトの「It work!」という画面だということです。 \u003c/p\u003e\n\n\u003cp\u003eここでは、もうひと頑張りして、自作の HTML を作成して、それを表示してみようということになります。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"自作する-html-ファイルの保存場所についての考察\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%87%AA%E4%BD%9C%E3%81%99%E3%82%8B-html-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BF%9D%E5%AD%98%E5%A0%B4%E6%89%80%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E8%80%83%E5%AF%9F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e自作する HTML ファイルの保存場所についての考察\u003c/h2\u003e\n\n\u003cp\u003eまず、自作する HTML ファイルの保存場所について考察します。それには Docker コンテナの生存期間について考える必要があります。\u003c/p\u003e\n\n\u003cp\u003eそもそも Docker コンテナのような技術はポータビリティの考え方が重要で、「必要な時にコピーして持ってきて起動し、必要なくなったら破棄する」という考え方が根底にあります。「破棄する」とはコンテナやサーバーごと削除してしまうことを指し、その破棄をする時にファイルのバックアップなどの煩わしい事を考える必要がないことも重要です。\u003c/p\u003e\n\n\u003cp\u003eよって、コンテナやサーバー内にバックアップしたいようなコンテンツを保存してしまうと面倒となってしまいます。\u003c/p\u003e\n\n\u003cp\u003eこのような考え方から、いつ破棄されてしまうか分からないコンテナにはコンテンツやログなどの動的なファイルを保存せず、常時起動されていることが確約されているマシンにコンテンツや動的なファイルを保存するのが良いでしょう。\u003c/p\u003e\n\n\u003cp\u003e裏を返すと httpd の Docker コンテナのドキュメントルートに直接保存していくということはしないということになります。\u003c/p\u003e\n\n\u003cp\u003e今回は起動した Docker コンテナに HTML を保存するのではなく、Docker を起動しているローカルマシン側に HTML を作成して、起動した Docker コンテナからそれを参照するようにします。 そうすることで、Docker コンテナは破棄されても、ローカルマシンにある HTML ファイルには影響がありません。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"4-1-web-ページ作成用のディレクトリの作成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#4-1-web-%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E6%88%90%E7%94%A8%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AE%E4%BD%9C%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e4-1. Web ページ作成用のディレクトリの作成\u003c/h2\u003e\n\n\u003cp\u003eローカル環境に適当なディレクトリ（今回の場合は\u003ccode\u003e/tmp/httpdHtdocs\u003c/code\u003e）にHTMLファイルを配置します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /tmp\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir \u003c/span\u003ehttpdHtdocs\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003ehttpdHtdocs\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"This is test page.\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e index.html\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\n\u003c/span\u003eindex.html\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eindex.html\nThis is \u003cspan class=\"nb\"\u003etest \u003c/span\u003epage.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e今回、index.html の中身は適当でよいのでとりあえず、「This is test page.」 としました。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"4-2-httpd-コンテナのドキュメントルートの指定docker-container-run--v\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#4-2-httpd-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%83%AB%E3%83%BC%E3%83%88%E3%81%AE%E6%8C%87%E5%AE%9Adocker-container-run--v\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e4-2. httpd コンテナのドキュメントルートの指定（docker container run -v）\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003edocker run\u003c/code\u003e コマンドでコンテナを起動する際に、\u003ccode\u003e-v \"[ホストディレクトリの絶対パス]:[コンテナの絶対パス]\"\u003c/code\u003e のオプションを指定することでコンテナにローカルマシンのディレクトリをマウントすることができます。\u003c/p\u003e\n\n\u003cp\u003e先ほど確認したように、httpd イメージでは、Apache httpd のドキュメントルート(DocumentRoot)は、\u003ccode\u003e/usr/local/apache2/htdocs/\u003c/code\u003eとなっています。\u003c/p\u003e\n\n\u003cp\u003eなので、ホストディレクトリの絶対パスに\u003ccode\u003e/tmp/httpdHtdocs\u003c/code\u003e、コンテナの絶対パスに \u003ccode\u003e/usr/local/apache2/htdocs/\u003c/code\u003eを指定して、\u003ccode\u003edocker container run\u003c/code\u003e コマンドを実行します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eホストのディレクトリをマウントしながらコンテナの作成・起動\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container run \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 8080:80 \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"/tmp/httpdHtdocs:/usr/local/apache2/htdocs/\"\u003c/span\u003e httpd\n\nc789395b6476f694ac991f7b207d4d1007229f6c5a41f4af8d2dd2bf14ee88f2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003edocker container ls\u003c/code\u003e コマンドによってコンテナが起動していることの確認します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eコンテナが起動していることの確認\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container \u003cspan class=\"nb\"\u003els\n\n\u003c/span\u003eCONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS                  NAMES\nec4edd39d7ff        httpd               \u003cspan class=\"s2\"\u003e\"httpd-foreground\"\u003c/span\u003e   16 minutes ago      Up 16 minutes       0.0.0.0:8080-\u0026gt;80/tcp   happy_hoover\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこの状態でブラウザで \u003ca href=\"http://localhost:8080\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://localhost:8080\u003c/a\u003e にアクセスしてみてください。\u003cbr\u003e\nマウントする前では、「It work!」とデフォルトのページが表示されていましたが、マウント先の\u003ccode\u003e/tmp/httpdHtdocs\u003c/code\u003eがドキュメントルートになっているため、さきほど index.html に記述した「This is test page.」の表示がされるはずです。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/d18d2b5748009a6b04162279d8dd556b15644d39/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f39343935353735642d383334362d353937622d626139352d6533613236386433316535662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"418\" alt=\"スクリーンショット 2020-07-25 19.21.14.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F9495575d-8346-597b-ba95-e3a268d31e5f.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=3620514ea0ead1317c7ea0d2ffca79fb\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/9495575d-8346-597b-ba95-e3a268d31e5f.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F9495575d-8346-597b-ba95-e3a268d31e5f.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=95ea6a80104b400fe79d96dd82c0260e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこれにて自作 Web サイトの完成です。\u003cbr\u003e\nおめでとうございます。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"5-web-サイトの拡張\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#5-web-%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AE%E6%8B%A1%E5%BC%B5\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e5. Web サイトの拡張\u003c/h1\u003e\n\n\u003cp\u003eこれからどうやってWebサイトを拡張していくかはおまかせします。\u003c/p\u003e\n\n\u003cp\u003e試しに HTML、CSS、JavaScript のそれぞれのファイルを作成して、HTMLからCSSとJavaScriptのファイルを読み込ませたサンプルを GitHub に投稿してみたので参考にしてみてください。\u003cbr\u003e\n（\u003ca\u003eこちら\u003c/a\u003eになります。）\u003c/p\u003e\n\n\u003cp\u003eもっとこだわっていくと\u003ca href=\"https://kore1server.com/323/%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%A8URL%E7%94%9F%E6%88%90\" rel=\"nofollow noopener\" target=\"_blank\"\u003eルーティング\u003c/a\u003eや、今後ファイルがどんどん増えていくと思うのでディレクトリ構成なども考えていく必要があります。\u003c/p\u003e\n\n\u003cp\u003e実際はサンプルのような形でWebサイトを書いていくということなく、フレームワークの React / Vue / Angular を用いてもっといい感じにやっていると思います。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"6-docrker-の後片付け\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#6-docrker-%E3%81%AE%E5%BE%8C%E7%89%87%E4%BB%98%E3%81%91\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e6. Docrker の後片付け\u003c/h1\u003e\n\n\u003cp\u003eコンテナを無意味に起動しておく必要はないため、必要に応じて以下のコマンドでコンテナの停止・削除、イメージの削除を行ってください。\u003cbr\u003e\nDocker は簡単に同じ環境を構築することができるので、コマンドの練習も兼ねてためらわずに消してしまいましょう。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"6-1-コンテナの停止\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#6-1-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E5%81%9C%E6%AD%A2\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e6-1. コンテナの停止\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003edocker container stop\u003c/code\u003eコマンドによってコンテナを停止します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e起動中のコンテナの確認\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container \u003cspan class=\"nb\"\u003els\n\n\u003c/span\u003eCONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS                  NAMES\nc789395b6476        httpd               \u003cspan class=\"s2\"\u003e\"httpd-foreground\"\u003c/span\u003e   43 minutes ago      Up 43 minutes       0.0.0.0:8080-\u0026gt;80/tcp   focused_ptolemy\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eコンテナの停止\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container stop c789395b6476\n\nc789395b6476\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e起動中のコンテナがないことの確認\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container \u003cspan class=\"nb\"\u003els\n\n\u003c/span\u003eCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"6-2-コンテナの削除\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#6-2-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E5%89%8A%E9%99%A4\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e6-2. コンテナの削除\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003edocker container rm\u003c/code\u003eコマンドによってコンテナを停止します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eすべてのコンテナの確認\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container \u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e\n\nCONTAINER ID        IMAGE               COMMAND              CREATED             STATUS                         PORTS               NAMES\nc789395b6476        httpd               \u003cspan class=\"s2\"\u003e\"httpd-foreground\"\u003c/span\u003e   2 hours ago         Exited \u003cspan class=\"o\"\u003e(\u003c/span\u003e0\u003cspan class=\"o\"\u003e)\u003c/span\u003e About an hour ago                       focused_ptolemy\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eコンテナの停止\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container \u003cspan class=\"nb\"\u003erm \u003c/span\u003ec789395b6476\n\nc789395b6476\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e指定したコンテナが削除されていることの確認\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker container \u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e\n\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"6-3-イメージの削除\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#6-3-%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%81%AE%E5%89%8A%E9%99%A4\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e6-3. イメージの削除\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003edocker image rm\u003c/code\u003eコマンドによってダウンロードしたDockerイメージは削除できます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eダウンロードしたimageの確認\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker image \u003cspan class=\"nb\"\u003els\n\n\u003c/span\u003eREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhttpd               latest              9d2a0c6e5b57        2 days ago          166MB\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ermコマンドによるDockerイメージの削除\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker image \u003cspan class=\"nb\"\u003erm \u003c/span\u003ehttpd\n\nUntagged: httpd:latest\nUntagged: httpd@sha256:2a9ae199b5efc3e818cdb41c790638fc043ffe1aba6bc61ada28ab6356d044c6\nDeleted: sha256:9d2a0c6e5b5714303c7b72793311d155b1652d270a785c25b88197069ba78734\nDeleted: sha256:d501b5ad5ac59deebf3d002fda60014429d851340ee8f80dfe745e525aaba281\nDeleted: sha256:c0ffe105e5d8c201ddc0fa3aa0d75d1f77c88632a5dabe196b1fb837ac83dd73\nDeleted: sha256:58da7575a150b2378511246c3d1091d24319d25db05319a07bcda674d089e3a1\nDeleted: sha256:5e73f7688a03b2696608629be23d77a75183cc9ac2a5b622b513a8df5ee04573\nDeleted: sha256:95ef25a3204339de1edf47feaa00f60b5ac157a498964790c58c921494ce7ffd\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e削除されたことの確認\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker image \u003cspan class=\"nb\"\u003els\n\n\u003c/span\u003eREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"6-4-mac-上での-docker-のサービスの停止\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#6-4-mac-%E4%B8%8A%E3%81%A7%E3%81%AE-docker-%E3%81%AE%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E5%81%9C%E6%AD%A2\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e6-4. Mac 上での Docker のサービスの停止\u003c/h2\u003e\n\n\u003cp\u003eデスクトップ上部のタスクバーの Docker のアイコンから停止することが可能です。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/1863d922d659db26ab19fb6259b0a518fed8bbae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f38393066616437352d643031362d363734372d666262352d3534346138623737313364642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"299\" alt=\"スクリーンショット 2020-07-25 21.52.40.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F890fad75-d016-6747-fbb5-544a8b7713dd.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=b667b6f375f3a81f9c2a3e5d7b65a17f\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/890fad75-d016-6747-fbb5-544a8b7713dd.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F890fad75-d016-6747-fbb5-544a8b7713dd.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=befbb94c9be018e4882186d1228f4108 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\nまた、『起動しててもよいがメモリをリソースは最小限に抑えたい!』ということであれば、タスクバーの Docker のアイコンから Preferences -\u0026gt; Resources でリソースを調整することができます。\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/1efb282c6f6616757b61fdad672a1a3cb60cf79b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f38613138366631362d633937372d363266352d376239302d3638653134383766393430612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg width=\"1042\" alt=\"スクリーンショット 2020-07-25 21.52.31.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F8a186f16-c977-62f5-7b90-68e1487f940a.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=059f63c5e0baf94b0edf2f8db10d20b0\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/8a186f16-c977-62f5-7b90-68e1487f940a.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2F8a186f16-c977-62f5-7b90-68e1487f940a.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=55e353a277a0aa9c89cc16c22184d932 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"7-最後に\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#7-%E6%9C%80%E5%BE%8C%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e7. 最後に\u003c/h1\u003e\n\n\u003cp\u003e意外と知ってたようで、知らないことが多く記事を書いていてとても勉強になりました。\u003cbr\u003e\n知識不足を痛感しました。。。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"参考\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8F%82%E8%80%83\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e参考\u003c/h1\u003e\n\n\u003cp\u003eDocker 公式 httpd イメージを利用して Docker を体験してみよう\u003cbr\u003e\n\u003ca href=\"https://weblabo.oscasierra.net/docker-httpd-usage/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://weblabo.oscasierra.net/docker-httpd-usage/\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003ehttpdとは|「分かりそう」で「分からない」でも「分かった」気になれるIT用語辞典\u003cbr\u003e\n\u003ca href=\"https://wa3.i-3-i.info/word13579.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://wa3.i-3-i.info/word13579.html\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eルーティングとURL生成\u003cbr\u003e\n\u003ca href=\"https://kore1server.com/323/%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%A8URL%E7%94%9F%E6%88%90\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://kore1server.com/323/%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%A8URL%E7%94%9F%E6%88%90\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eWebページ表示の仕組みと表示までの流れ\u003cbr\u003e\n\u003ca href=\"https://daeuwordpress.com/homepage-system/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://daeuwordpress.com/homepage-system/\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eWebサーバはどのように動いているのだろう？～HTTP・URL・クッキー編～\u003cbr\u003e\n\u003ca href=\"https://www.jtp.co.jp/techport/2017-02-08-002/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://www.jtp.co.jp/techport/2017-02-08-002/\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eApacheとNginxについて比較\u003cbr\u003e\n\u003ca href=\"https://qiita.com/kamihork/items/49e2a363da7d840a4149\" class=\"autolink\"\u003ehttps://qiita.com/kamihork/items/49e2a363da7d840a4149\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eDocker入門の前に知っておきたい基礎知識 - 週末勉強会レポート\u003cbr\u003e\n\u003ca href=\"https://www.tech-training.jp/blog/entries/28\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://www.tech-training.jp/blog/entries/28\u003c/a\u003e\u003c/p\u003e\n","body":"# 1. はじめに\n[Webページが表示される仕組み](https://qiita.com/sugurutakahashi12345/items/3cc26f23b82f344fa188)の続編になります。（別に読まなくても大丈夫なように記事は執筆しました。）\n\n本記事では、「Web サイトが表示される原理」、「Docker での Web サーバーの構築」、「Web サイトの作成」の順に説明して、自ら作成した Web サイトが表示されるところまでを体験することが目標になります。\n\nかなり初心者向けの記事になります。\n(結果的に、自作の Web サイトを表示することが目的なのに、Docker の使い方の記事みたいになってしまいました、、、)\n\n## 1-1. Why Docker？\nWeb サイトを作成するためには Web サーバーが必要になりますが、今回の目標を達成するには凝った機能は必要なく、ただ URL でアクセスしたときにコンテンツを返却してくれるだけで十分であるため、手軽に Web サーバーを構築できるを利用できる Docker を使ってみようと思いました。\n\n（なお、筆者は Docker は初めて触ります。）\n\n本記事を投稿する上で、以下の記事がとても参考になりました。\n[Docker 公式 httpd イメージを利用して Docker を体験してみよう](https://weblabo.oscasierra.net/docker-httpd-usage/)\n\n結局、本記事は、ほぼその記事の丸写しになってしまいましたが、備忘録もかねて投稿いたします。\n\n# 2. 事前に知っておきたい知識\nご存知の方は飛ばしていただいて結構です。\n## 2-1. Web ページが表示される仕組み\n細かい説明は省きますが、図で表すと以下のようになります。（[参照元ページ](https://daeuwordpress.com/homepage-system/)）\n![https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_259125_f56984d6-5c04-531f-ac96-fbb00b5a8470.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/0785812b-8034-d252-8660-bffcb9a62381.png)\n本記事では図の右側のWebサーバーをローカル PC 上の Docker のコンテナ上で稼働させます。\n\nなお、今回はローカル PC 上のコンテナに直接アクセスするため、DNS サーバーによる名前解決は行いません。\n（つまり、今回は ① と ② は扱いません。いきなり ③ → ④ となります。）\n\n## 2-2. Webサーバー\nWeb サーバーとはクライアントからの要求に対し、Web ページを閲覧するために必要なデータを転送するサーバーのことです。\n\n「クライアントからの要求」とは、**HTTP リクエスト** のことで、ブラウザでアクセスする URL をみると「https://〜」となっていると思いますが、その頭文字の http とは **HTTP リクエスト** であることを意味しております。\n\nつまり、Web サーバーに対して、**HTTPリクエスト** をすると Web ページを閲覧するために必要なデータ（HTML、CSS、JavaScript、動画、写真など）を転送してくれます。\n\n## 2-3. ドキュメントルート\nドキュメントルートとは、Web サイトで外部から公開される HTML ファイルや画像データなどが設置される場所のことを指します。\n\nもし、仮にドメインが「http\\://example.com」である場合、ドキュメントルートに指定したディレクトリに「hogehoge.html」というHTMLファイルを設置していると「http\\://example.com/hogehoge.html」とブラウザからアクセスすると、Webサーバーはhogehoge.htmlを返却して、ブラウザにhogehoge.htmlの内容が表示されます。\n\nまた、「http\\://example.com」とアクセスした場合、デフォルトでその階層の**「index.html」**を返却するようになっています。\n（これを知らないと 「index.html」って何だろう？ となってしまうため結構大事かも。。。）\n\n## 2-4. Web サーバーの種類\nWeb サーバーにも種類があります。\n世界的にシェアが高いのは**「Apache」「Nginx」「IIS」**の3種類です。\n\nまず、IIS は Windows サーバー縛りという環境でなければ使うことがないでしょう。\n\nそうなると「Apache」と「Nginx」の2択になりますが、Nginx の方が処理が軽く大量のリクエストを処理するのに向いていおり、さらにリバーシプロキシ機能までついているおまけ付きであり、現在では Nginx の方が人気らしいです。\n\nどちらを使うかは case-by-case であるので状況に応じて使い分けてください。\n比較する記事がネットには溢れていました。（個人的には[こちら](https://qiita.com/kamihork/items/49e2a363da7d840a4149)がわかりやすかったです。）\n\n今回は単に手元で Web サーバーとして動けば何でもよかったので、Apache でも Nginx でもどちらでもよかったのですが、参考にした記事が Apache の httpd の Docker イメージを使用していたので、そちらを採用しました。\n\n「httpd」って何？って思う方もいらっしゃると思いますが、「Apache で Web サーバーとしての機能をする常駐のプログラムのこと」だと思っていただければ大丈夫です。（[参考記事](https://wa3.i-3-i.info/word13579.html)）\n\n## 2-5. Docker\n\nDocker についてここでは詳しく説明しませんが、Docker とはコンテナ型の仮想化環境を提供するプラットフォームのことです。\nとりあえず、Docker を使えば簡単に開発環境を構築することができるということだけ抑えてもらえれば大丈夫です。\n\n今回は Docker を使用して自身の環境に Web サーバーを構築します。\n\nまた、Docker を使用するには自身の環境にインストールする必要があるので、以下の記事などを参考にインストールしてください。\n[Docker を Mac にインストールする（更新: 2019/7/13）](https://qiita.com/kurkuru/items/127fa99ef5b2f0288b81)\n\nそもそも Docker について知りたいという方は以下の記事がとても勉強になりましたのでご参考まで。\n[Docker 入門の前に知っておきたい基礎知識 - 週末勉強会レポート](https://www.tech-training.jp/blog/entries/28)\n\n# 3. Docker での Web サーバーの構築\nWebサーバーとして有名な Apache httpd だけを含んでいる httpd という Docker イメージが公式の Docker Hub リポジトリで公開されています。\n今回は[こちら](https://hub.docker.com/_/httpd/)を使用します。\n\n\u003cimg width=\"782\" alt=\"スクリーンショット 2020-07-25 22.00.03.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/eaf5314d-03bd-dc51-3652-fcb996a5a5a0.png\"\u003e\n\nまた今から使用する Docker のコマンドは大きく以下のようになります。（[参照元](https://morizyun.github.io/docker/about-docker-command.html)）\n\n![docker-command-outline.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/681f17ee-667b-6a40-03f8-b2427cb64da1.jpeg)\n\n\n## 3-1. httpd イメージのダウンロード・確認（docker image pull、docker image ls）\nまずはローカル環境に Docker イメージを持っておく必要があります。 現在ローカルで持っているイメージを確認するには`docker image ls` コマンドを実行します。 \n初期状態では一つも Docker イメージがないはずなので以下のように表示されます。\n\n```shell:ダウンロードされているDockerイメージの確認\n$ docker image ls\n\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n```\nDocker Hub からイメージを取得するには、`docker image pull [サービス名]:[タグ名]`とコマンド入力します。\nhttpd のイメージを pull する際に指定できるタグ名は、Docker Hub の[タグ一覧のページ](https://hub.docker.com/_/httpd?tab=tags)から確認することができます。\n\u003cimg width=\"711\" alt=\"スクリーンショット 2020-07-25 22.11.34.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/8e859494-2b0e-fde7-0cd4-4442d177fa44.png\"\u003e\n\n`docker image pull [サービス名]:[タグ名]`と入力する際に、タグ名を省略した場合はデフォルトで **latest** を指定したことになります。\n今回は Apache httpd の最新版をインストールできればよいのでタグ名を指定せずに実行します。\n\n```shell:httpdイメージのダウンロード\n$ docker image pull httpd\n\nUsing default tag: latest\nlatest: Pulling from library/httpd\n6ec8c9369e08: Pull complete\n819d6e0b29e7: Pull complete\n6a237d0d4aa4: Pull complete\ncd9a987eec32: Pull complete\nfdec8f3f8485: Pull complete\nDigest: sha256:2a9ae199b5efc3e818cdb41c790638fc043ffe1aba6bc61ada28ab6356d044c6\nStatus: Downloaded newer image for httpd:latest\ndocker.io/library/httpd:latest\n```\n`docker image ls`コマンドでダウントー度されていることを確認します。\n\n```shell:httpdイメージがダウンロードされたことの確認\n$ docker image ls\n\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhttpd               latest              9d2a0c6e5b57        2 days ago          166MB\n```\n\nhttpd のサービスがあることが確認できるかとおもいます。\n\n## 3-2. httpd イメージからコンテナを作成・起動する（docker container run）\n\nDocker イメージの取得ができたら、次は実行させます。 \nイメージからコンテナを作成して起動するには、`docker container run (オプション) [イメージ名]`とコマンドを実行します。 \n\n```shell:コンテナの作成・起動\n$ docker container run -d -p 8080:80 httpd\n\nd2e80c20cfbdcf7aee76772a790821e529bbbdfe07329e9179ea32939cb85797\n```\n\n今回`docker container run`コマンドで指定したオプションは`-d` と `-p 8080:80` のオプションです。\nこれらについて解説します。\n\n`-d` オプションは、コンテナの実行をバックグラウンドで行うオプションです。 このオプションを指定しなかった場合は、ターミナルのコマンド操作が Ctrl+C を実行するまでコンテナに奪われてしまいます。\n\n `-p 8080:80` オプションは、コンテナのポート番号とローカルのコンピュータのポート番号を紐づけるオプションです。\n\n今回実行したコンテナは httpd の機能を持っておりコンテナの80番ポートで httpd サービスが開始されるので、ローカルマシンの8080番ポートをコンテナの80番ポートに紐づけたことになります。\n\n\n一旦、これで Web サーバーである httpd コンテナの実行が完了しましたので、ブラウザで http://localhost:8080 にアクセスしてみてください。\n「It work!」の表示がされるはずです。\n\n\u003cimg width=\"417\" alt=\"スクリーンショット 2020-07-25 18.45.53.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/82bcbd14-00a3-aafb-f803-3f0b28df0459.png\"\u003e\n\n\nこれは、Web サーバーのドキュメントルートにデフォルトでおいてある index.html （あとで確認します）が返却されてその内容がブラウザに表示されているということです。\n\nたったこれだけで Web サーバーを立てることができるとは、Docker はほんとに素晴らしいですね。　\n\n### ポート番号についてちょっとした解説\nWebサーバーは一般的に80番ポートで http 通信を待ち受けています。\nまた、ポート8080番は代替 HTTP ポートと呼ばれ、大抵のプロキシサーバは8080番でサービスを待ち受けています。\n\n以下の図で表すと、クライアントAがブラウザ、プロキシサーバーBが自身の Mac の PC、Web サーバーCが Docker コンテナ上で動いている httpd というイメージです。（[参照元](https://www.fe-siken.com/kakomon/01_aki/q34.html)）\n\n![34.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/4d8a994a-4298-a79a-f82e-43852a4dd293.gif)\n\n## 3-3. 実行中のコンテナを確認する（docker container ls）\n\n現在実行中の docker のコンテナの確認は`docker container ls`のコマンド実行によって確認ができます。\n\n```shell:実行中のコンテナの確認\n$ docker container ls\n\nCONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS                  NAMES\nd2e80c20cfbd        httpd               \"httpd-foreground\"   4 minutes ago       Up 4 minutes        0.0.0.0:8080-\u003e80/tcp   clever_chatelet\n```\nhttpdのコンテナプロセスが起動していることが確認できます。\n\n## 3-4. コンテナの停止・起動（docker container stop、docker container start）\n実行中のコンテナを一時的に停止したい場合、`docker container stop`コマンドを利用します。 コマンドの引数として、コンテナのIDを指定する必要があります。\nコンテナのIDは上記で説明した`docker container ls`のコマンドで確認できます。\n\n```shell:コンテナの停止\ndocker container stop d2e80c20cfbd\n\nd2e80c20cfbd\n```\n`docker container ls` のコマンドで先ほど `docker container stop`コマンドで指定したプロセスが起動していないことを確認します。\n\n```shell:実行中のコンテナの確認\n$ docker container ls\n\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n```\n停止させたコンテナも表示させたい場合は、`docker container ls` コマンドに `-a` オプションをつけて実行します。 表示された結果の STATUS の欄に Exited と表示されている点に着目してください。\n\n```shell:停止中のコンテナの確認\n$ docker container ls -a\n\nCONTAINER ID        IMAGE               COMMAND              CREATED             STATUS                          PORTS               NAMES\nd2e80c20cfbd        httpd               \"httpd-foreground\"   7 minutes ago       Exited (0) About a minute ago                       clever_chatelet\n```\nこの停止したコンテナを再度起動したい場合は、`docker container start` コマンドにコンテナIDを指定して実行します。ポイントは一度`docker container run`したコンテナは、再び`docker container run`するのではなく`docker container start` コマンドによって再起動させます。\nそうしないと`docker container run`する度に別のコンテナが生成されて、httpd のコンテナが複数作られることになります。\n\n```shell:停止中のコンテナの起動\n$ docker container start d2e80c20cfbd\n\nd2e80c20cfbd\n```\n\n起動後にまた `docker container ls` コマンドを実行すれば、再度実行中であることがわかります。\n\n```shell:起動中のコンテナの確認\n$ docker container ls\n\nCONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS                  NAMES\nd2e80c20cfbd        httpd               \"httpd-foreground\"   9 minutes ago       Up About a minute   0.0.0.0:8080-\u003e80/tcp   clever_chatelet\n```\n\n## 3-5. コンテナへのログイン\n実際にコンテナにログインしてみて、httpd のドキュメントルートの状況を確認してみたいと思います。\n\nコンテナには `docker exec -it [コンテナID] /bin/bash` とコマンド実行すると、そのコンテナにログインすることができ、コマンド操作をすることができます。\n\n```shell:コンテナへのログイン\n$ docker exec -it d2e80c20cfbd /bin/bash\n\nroot@d2e80c20cfbd:/usr/local/apache2# (指定したコンテナ内のコンソール)\n```\n\nhttpd イメージでは、Apache httpd のドキュメントルート(DocumentRoot)は、`/usr/local/apache2/htdocs/`となっていますので、そこを確認してみます。\n\n```shell:ドキュメントルートの確認\nroot@d2e80c20cfbd:/usr/local/apache2# cd /usr/local/apache2/htdocs/\nroot@d2e80c20cfbd:/usr/local/apache2/htdocs# ls\nindex.html\nroot@d2e80c20cfbd:/usr/local/apache2/htdocs# cat index.html\n\u003chtml\u003e\u003cbody\u003e\u003ch1\u003eIt works!\u003c/h1\u003e\u003c/body\u003e\u003c/html\u003e\n```\n\nドキュメントルートには「It works!」と書かれた index.html という HTML ファイルがあることが確認できますね。\nこれがさきほど、ブラウザで http://localhost:8080 にアクセスしたときに表示されたものになります。\n\n\nちなみに、ログインしたコンテナからは `exit` コマンドでログアウトできます。\n\n```shell:ログインしたコンテナからのログアウト\nroot@d2e80c20cfbd:/usr/local/apache2/htdocs# exit\nexit\n\n$ (Macのコンソール)\n```\n\n# 4. 自作の Web サイトを作成する\nさて、ここまでで Docker を利用して Apache httpd を実行できることはお分かり頂けたでしょう。 しかし一つ問題は、表示できた WEB サイトは Apache httpd デフォルトの「It work!」という画面だということです。 \n\nここでは、もうひと頑張りして、自作の HTML を作成して、それを表示してみようということになります。\n\n## 自作する HTML ファイルの保存場所についての考察\nまず、自作する HTML ファイルの保存場所について考察します。それには Docker コンテナの生存期間について考える必要があります。\n\nそもそも Docker コンテナのような技術はポータビリティの考え方が重要で、「必要な時にコピーして持ってきて起動し、必要なくなったら破棄する」という考え方が根底にあります。「破棄する」とはコンテナやサーバーごと削除してしまうことを指し、その破棄をする時にファイルのバックアップなどの煩わしい事を考える必要がないことも重要です。\n\nよって、コンテナやサーバー内にバックアップしたいようなコンテンツを保存してしまうと面倒となってしまいます。\n\nこのような考え方から、いつ破棄されてしまうか分からないコンテナにはコンテンツやログなどの動的なファイルを保存せず、常時起動されていることが確約されているマシンにコンテンツや動的なファイルを保存するのが良いでしょう。\n\n裏を返すと httpd の Docker コンテナのドキュメントルートに直接保存していくということはしないということになります。\n\n今回は起動した Docker コンテナに HTML を保存するのではなく、Docker を起動しているローカルマシン側に HTML を作成して、起動した Docker コンテナからそれを参照するようにします。 そうすることで、Docker コンテナは破棄されても、ローカルマシンにある HTML ファイルには影響がありません。\n\n## 4-1. Web ページ作成用のディレクトリの作成\nローカル環境に適当なディレクトリ（今回の場合は`/tmp/httpdHtdocs`）にHTMLファイルを配置します。\n\n```bash:\n$ cd /tmp\n$ mkdir httpdHtdocs\n$ cd httpdHtdocs\n$ echo \"This is test page.\" \u003e index.html\n$ ls\nindex.html\n$ cat index.html\nThis is test page.\n```\n今回、index.html の中身は適当でよいのでとりあえず、「This is test page.」 としました。\n\n## 4-2. httpd コンテナのドキュメントルートの指定（docker container run -v）\n\n`docker run` コマンドでコンテナを起動する際に、`-v \"[ホストディレクトリの絶対パス]:[コンテナの絶対パス]\"` のオプションを指定することでコンテナにローカルマシンのディレクトリをマウントすることができます。\n\n先ほど確認したように、httpd イメージでは、Apache httpd のドキュメントルート(DocumentRoot)は、`/usr/local/apache2/htdocs/`となっています。\n\nなので、ホストディレクトリの絶対パスに`/tmp/httpdHtdocs`、コンテナの絶対パスに `/usr/local/apache2/htdocs/`を指定して、`docker container run` コマンドを実行します。\n\n```shell:ホストのディレクトリをマウントしながらコンテナの作成・起動\n$ docker container run -d -p 8080:80 -v \"/tmp/httpdHtdocs:/usr/local/apache2/htdocs/\" httpd\n\nc789395b6476f694ac991f7b207d4d1007229f6c5a41f4af8d2dd2bf14ee88f2\n```\n`docker container ls` コマンドによってコンテナが起動していることの確認します。\n\n```shell:コンテナが起動していることの確認\n$ docker container ls\n\nCONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS                  NAMES\nec4edd39d7ff        httpd               \"httpd-foreground\"   16 minutes ago      Up 16 minutes       0.0.0.0:8080-\u003e80/tcp   happy_hoover\n```\n\nこの状態でブラウザで http://localhost:8080 にアクセスしてみてください。\nマウントする前では、「It work!」とデフォルトのページが表示されていましたが、マウント先の`/tmp/httpdHtdocs`がドキュメントルートになっているため、さきほど index.html に記述した「This is test page.」の表示がされるはずです。\n\n\u003cimg width=\"418\" alt=\"スクリーンショット 2020-07-25 19.21.14.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/9495575d-8346-597b-ba95-e3a268d31e5f.png\"\u003e\n\nこれにて自作 Web サイトの完成です。\nおめでとうございます。\n\n# 5. Web サイトの拡張\n\nこれからどうやってWebサイトを拡張していくかはおまかせします。\n\n試しに HTML、CSS、JavaScript のそれぞれのファイルを作成して、HTMLからCSSとJavaScriptのファイルを読み込ませたサンプルを GitHub に投稿してみたので参考にしてみてください。\n（[こちら]((https://github.com/suguruTakahashi-1234/sample_web_page\n))になります。）\n\nもっとこだわっていくと[ルーティング](https://kore1server.com/323/%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%A8URL%E7%94%9F%E6%88%90)や、今後ファイルがどんどん増えていくと思うのでディレクトリ構成なども考えていく必要があります。\n\n実際はサンプルのような形でWebサイトを書いていくということなく、フレームワークの React / Vue / Angular を用いてもっといい感じにやっていると思います。\n\n# 6. Docrker の後片付け\nコンテナを無意味に起動しておく必要はないため、必要に応じて以下のコマンドでコンテナの停止・削除、イメージの削除を行ってください。\nDocker は簡単に同じ環境を構築することができるので、コマンドの練習も兼ねてためらわずに消してしまいましょう。\n\n## 6-1. コンテナの停止\n\n`docker container stop`コマンドによってコンテナを停止します。\n\n```shell:起動中のコンテナの確認\n$ docker container ls\n\nCONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS                  NAMES\nc789395b6476        httpd               \"httpd-foreground\"   43 minutes ago      Up 43 minutes       0.0.0.0:8080-\u003e80/tcp   focused_ptolemy\n```\n\n```shell:コンテナの停止\n$ docker container stop c789395b6476\n\nc789395b6476\n```\n\n```shell:起動中のコンテナがないことの確認\n$ docker container ls\n\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n```\n\n## 6-2. コンテナの削除\n\n`docker container rm`コマンドによってコンテナを停止します。\n\n```shell:すべてのコンテナの確認\n$ docker container ls -a\n\nCONTAINER ID        IMAGE               COMMAND              CREATED             STATUS                         PORTS               NAMES\nc789395b6476        httpd               \"httpd-foreground\"   2 hours ago         Exited (0) About an hour ago                       focused_ptolemy\n```\n\n```shell:コンテナの停止\n$ docker container rm c789395b6476\n\nc789395b6476\n```\n\n```shell:指定したコンテナが削除されていることの確認\n$ docker container ls -a\n\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n```\n\n## 6-3. イメージの削除\n`docker image rm`コマンドによってダウンロードしたDockerイメージは削除できます。\n\n```shell:ダウンロードしたimageの確認\n$ docker image ls\n\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhttpd               latest              9d2a0c6e5b57        2 days ago          166MB\n```\n\n```shell:rmコマンドによるDockerイメージの削除\n$ docker image rm httpd\n\nUntagged: httpd:latest\nUntagged: httpd@sha256:2a9ae199b5efc3e818cdb41c790638fc043ffe1aba6bc61ada28ab6356d044c6\nDeleted: sha256:9d2a0c6e5b5714303c7b72793311d155b1652d270a785c25b88197069ba78734\nDeleted: sha256:d501b5ad5ac59deebf3d002fda60014429d851340ee8f80dfe745e525aaba281\nDeleted: sha256:c0ffe105e5d8c201ddc0fa3aa0d75d1f77c88632a5dabe196b1fb837ac83dd73\nDeleted: sha256:58da7575a150b2378511246c3d1091d24319d25db05319a07bcda674d089e3a1\nDeleted: sha256:5e73f7688a03b2696608629be23d77a75183cc9ac2a5b622b513a8df5ee04573\nDeleted: sha256:95ef25a3204339de1edf47feaa00f60b5ac157a498964790c58c921494ce7ffd\n```\n\n```shell:削除されたことの確認\n$ docker image ls\n\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n```\n\n## 6-4. Mac 上での Docker のサービスの停止\nデスクトップ上部のタスクバーの Docker のアイコンから停止することが可能です。\n\u003cimg width=\"299\" alt=\"スクリーンショット 2020-07-25 21.52.40.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/890fad75-d016-6747-fbb5-544a8b7713dd.png\"\u003e\nまた、『起動しててもよいがメモリをリソースは最小限に抑えたい!』ということであれば、タスクバーの Docker のアイコンから Preferences -\u003e Resources でリソースを調整することができます。\n\u003cimg width=\"1042\" alt=\"スクリーンショット 2020-07-25 21.52.31.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/8a186f16-c977-62f5-7b90-68e1487f940a.png\"\u003e\n\n# 7. 最後に\n意外と知ってたようで、知らないことが多く記事を書いていてとても勉強になりました。\n知識不足を痛感しました。。。\n\n# 参考\nDocker 公式 httpd イメージを利用して Docker を体験してみよう\nhttps://weblabo.oscasierra.net/docker-httpd-usage/\n\nhttpdとは|「分かりそう」で「分からない」でも「分かった」気になれるIT用語辞典\nhttps://wa3.i-3-i.info/word13579.html\n\nルーティングとURL生成\nhttps://kore1server.com/323/%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%A8URL%E7%94%9F%E6%88%90\n\nWebページ表示の仕組みと表示までの流れ\nhttps://daeuwordpress.com/homepage-system/\n\nWebサーバはどのように動いているのだろう？～HTTP・URL・クッキー編～\nhttps://www.jtp.co.jp/techport/2017-02-08-002/\n\nApacheとNginxについて比較\nhttps://qiita.com/kamihork/items/49e2a363da7d840a4149\n\nDocker入門の前に知っておきたい基礎知識 - 週末勉強会レポート\nhttps://www.tech-training.jp/blog/entries/28\n","coediting":false,"comments_count":0,"created_at":"2020-07-23T17:38:30+09:00","group":null,"id":"dc23dab2613b0e6103e8","likes_count":30,"private":false,"reactions_count":0,"tags":[{"name":"Web","versions":[]},{"name":"Docker","versions":[]}],"title":"【超初心者】Docker を使用して自作 Web サイトを表示してみた","updated_at":"2021-03-02T23:33:21+09:00","url":"https://qiita.com/ikuraikura/items/dc23dab2613b0e6103e8","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"1-はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#1-%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e1. はじめに\u003c/h1\u003e\n\n\u003cp\u003e新入社員向けに説明することになったので、Webページが表示される仕組みについて初学者向けにまとめてみました。\u003cbr\u003e\nプログラミングについて詳しいことは説明しません。最低限触れる程度になります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"2-結論\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#2-%E7%B5%90%E8%AB%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e2. 結論\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003eWebページは主に3つのプログラム（HTML、CSS、JavaScript）によって表現されます。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: left\"\u003e構成要素\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003e役割\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ca href=\"#3-html\"\u003eHTML\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eテキストの内容や構造を表現\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ca href=\"#4-css\"\u003eCSS\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e見た目を制御\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003ca href=\"#5-javascript\"\u003eJavaScript\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e挙動を制御\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\u003cstrong\u003eまた、これらのHTML、CSS、JavaScriptのプログラムは、ブラウザからURLにアクセスした結果、色々あったのちに最終的にWebサーバーからそれらのプログラムが転送されきて、それをブラウザが解釈することでWebページが表示されます。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e- 完 -\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eといってもいきなり理解することは難しいので、HTML、CSS、JavaScriptの概要や、これらのプログラムがどのようにブラウザに表示されるのか、大まかな全体の流れについて説明したいと思います。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"3-html\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#3-html\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e3. HTML\u003c/h1\u003e\n\n\u003cp\u003eHyperText Markup Language の略。HTMLとは\u003ca href=\"#3-1-%E3%83%8F%E3%82%A4%E3%83%91%E3%83%BC%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%A8%E3%81%AF\"\u003eハイパーテキスト\u003c/a\u003e (HyperText) を記述するための\u003ca href=\"#3-2-%E3%83%9E%E3%83%BC%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E8%A8%80%E8%AA%9E%E3%81%A8%E3%81%AF\"\u003eマークアップ言語\u003c/a\u003e (Markup Language) の一つになります。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eWebページでのテキストを表現するために用いられる言語になります。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"#3-1-%E3%83%8F%E3%82%A4%E3%83%91%E3%83%BC%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%A8%E3%81%AF\"\u003eハイパーテキスト\u003c/a\u003e、\u003ca href=\"#3-2-%E3%83%9E%E3%83%BC%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E8%A8%80%E8%AA%9E%E3%81%A8%E3%81%AF\"\u003eマークアップ言語\u003c/a\u003e についてはこれから説明しますが、一旦、例を書くと以下のような記述になります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"html\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eHTMLの例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;h1\u0026gt;\u003c/span\u003e1. はじめに\u003cspan class=\"nt\"\u003e\u0026lt;/h1\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003e新入社員向けに説明することになったので、Webページが表示される仕組みについて初学者向けにまとめてみました。\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"3-1-ハイパーテキストとは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#3-1-%E3%83%8F%E3%82%A4%E3%83%91%E3%83%BC%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e3-1. ハイパーテキストとは？\u003c/h2\u003e\n\n\u003cp\u003eそもそも「Web」という言葉は「クモの巣（spider web）」が元になっているというのはよく聞く話かと思われます。\u003c/p\u003e\n\n\u003cp\u003eそのクモの巣が何を表しているかというと、テキスト（Webページ）とテキスト（Webページ）の繋がりを表しています。\u003c/p\u003e\n\n\u003cp\u003e現実世界の物理的なテキストに参照先が書いてあっても、その参照先のテキストが急にやってきたり、テキストが入れ変わったりはしません。\u003c/p\u003e\n\n\u003cp\u003eしかし、Webでなら例えば、リンクからその先のリンクへと次々に参照先のページに遷移することができます。\u003c/p\u003e\n\n\u003cp\u003eそのような現実世界のテキストを超えたテキスト、つまり、\u003cstrong\u003e『ハイパーテキスト』\u003c/strong\u003eという概念が誕生しました。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eつまり、ハイパーテキストとは複数のテキストを相互に関連付け、結び付ける仕組みのことです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"3-2-マークアップ言語とは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#3-2-%E3%83%9E%E3%83%BC%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E8%A8%80%E8%AA%9E%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e3-2. マークアップ言語とは？\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eタグで囲む（マークをつける）ことで構造を表現する言語のことをマークアップ言語と呼びます。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e以下はマークアップ言語での1つであるHTMLのサンプルになりますが、ここでのポイントは\u003cstrong\u003eタグで囲って構造を表す\u003c/strong\u003eところです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"html\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eHTMLの例（タグに注目）\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;h1\u0026gt;\u003c/span\u003e大きなタイトル\u003cspan class=\"nt\"\u003e\u0026lt;/h1\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;h2\u0026gt;\u003c/span\u003e中くらいのタイトル\u003cspan class=\"nt\"\u003e\u0026lt;/h2\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;h3\u0026gt;\u003c/span\u003e小さいタイトル\u003cspan class=\"nt\"\u003e\u0026lt;/h3\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eHTMLの他に有名なマークアップ言語として、XML（eXtensible Markup Language）があります。\u003c/p\u003e\n\n\u003cp\u003eもちろん、XMLもタグで囲う記述方法をとります。\u003cbr\u003e\n（ML = Markup Language って覚えれば、○○ML は マークアップ言語 ってすぐわかる！やったね！）\u003c/p\u003e\n\n\u003cp\u003eQ. 先生！質問です。マークアップがあるということは、マークダウンもあるということでしょうか？\u003cbr\u003e\n\u003ca href=\"#3-3-markdown%E3%83%9E%E3%83%BC%E3%82%AF%E3%83%80%E3%82%A6%E3%83%B3%E3%81%A8%E3%81%AF\"\u003eA. あります！\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"3-3-markdownマークダウンとは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#3-3-markdown%E3%83%9E%E3%83%BC%E3%82%AF%E3%83%80%E3%82%A6%E3%83%B3%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e3-3. Markdown（マークダウン）とは？\u003c/h2\u003e\n\n\u003cp\u003eMarkdown（マークダウン）とは文章を記述するための記法である\u003cstrong\u003eマークアップ言語\u003c/strong\u003eの一つです。\u003cbr\u003e\n\u003cdel\u003e（なんだよ！ お前もマークアップ言語の一味かよ！ 紛らわしいわ！）\u003c/del\u003e\u003c/p\u003e\n\n\u003cp\u003eHTMLなどのマークアップ言語は記述や種類が多く、また覚えることも多いので、専門的な知識を持たない人でも扱いやすいように簡略化したものが、\u003cstrong\u003eMarkdown(マークダウン)記法\u003c/strong\u003eになります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"markdown\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eMarkdown記法の例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"gh\"\u003e# 大きなタイトル\u003c/span\u003e\n\u003cspan class=\"gu\"\u003e## 中くらいのタイトル\u003c/span\u003e\n\u003cspan class=\"gu\"\u003e### 小さいタイトル\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eHTMLと違って、『\u003cstrong\u003e\u0026lt;h1\u0026gt;\u003c/strong\u003e』などのタグで囲うよりも、馴染みのある『\u003cstrong\u003e#\u003c/strong\u003e』になって少しは読みやすくなり、また、記述量も減っているところがポイントになります。 \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eとりあえず、テキストを表す方法はHTML以外にもいろいろあるんだな〜ということがわかればOKです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"3-4-どうしてwebページで用いられるテキストは-html-なのか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#3-4-%E3%81%A9%E3%81%86%E3%81%97%E3%81%A6web%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%A7%E7%94%A8%E3%81%84%E3%82%89%E3%82%8C%E3%82%8B%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%AF-html-%E3%81%AA%E3%81%AE%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e3-4. どうしてWebページで用いられるテキストは HTML なのか？\u003c/h2\u003e\n\n\u003cp\u003eテキストを表す方法はいろいろある中で、どうしてWebページで用いられるテキストは HTML なのかというと、\u003cstrong\u003e『HTML は Web ページで使用されることを目的とした言語だから』\u003c/strong\u003e の一言に尽きます。\u003c/p\u003e\n\n\u003cp\u003eHTMLは時代に合わせてバージョンアップしていくことで、Webページで表すために便利な機能が次々に追加されており、例えば、PC・タブレット・スマートフォンなどのマルチデバイスでの記述がシンプルになったり、音楽や動画の埋め込みも標準対応されて、2020年現在はHTML 5.2までバージョンアップしています。\u003c/p\u003e\n\n\u003cp\u003eもちろんこのようなことは、Markdown記述では対応していません。\u003c/p\u003e\n\n\u003cp\u003eそういった理由から、Webページでテキストを表示することに特化したHTMLが用いられているということになります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"4-css\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#4-css\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e4. CSS\u003c/h1\u003e\n\n\u003cp\u003eCascating Style Sheets の略。CSSとはHTMLの要素をどのように修飾（表示）するかを指示するスタイルシートの仕様の一つになります。\u003c/p\u003e\n\n\u003cp\u003e『スタイルシート』とは、文書の \u003cstrong\u003e（1）構造（HTMLで記述される部分）\u003c/strong\u003e と \u003cstrong\u003e（2）体裁（CSSで記述される部分）\u003c/strong\u003e を \u003cstrong\u003e分離させる\u003c/strong\u003e という理念を実現するために提唱された仕様のことです。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCSS は HTML を修飾するのに特化したスタイルシートになります。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHTMLで構造化された文書に対して、CSS を適用させることによって文字のフォント、色、大きさ、背景などの見た目を修飾することができます。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e例えば、HTMLによって記述された \u0026lt;h1\u0026gt; タグで囲われた文字の色を赤くしたい場合は以下のように記述します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"css\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eh1タグの文字列を赤色にするCSSの例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e;}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eまた、HTMLのタグの中には、見た目を修飾するタグも存在しますが、HTML4 から HTML5 への変更でも見た目を修飾するようなタグ（例えば \u0026lt;font\u0026gt; タグなど）が一部廃止になるなど、構造と体裁の分離はより進んできている傾向にあります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"5-javascript\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#5-javascript\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e5. JavaScript\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003e「ブラウザ上で動く」\u003c/strong\u003eプログラミング言語の一つです。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eJavaScriptはサーバー側との通信を行ったり、動的にコンテンツを更新したり、Webページの様々な挙動を制御します。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e例えば、なにかエラーが発生したアラートを出すには以下のように記述します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"javascript\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eJavaScriptによるアラートの例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003ealert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eエラー\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"5-1-javascriptはブラウザ上で動く\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#5-1-javascript%E3%81%AF%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E4%B8%8A%E3%81%A7%E5%8B%95%E3%81%8F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e5-1. JavaScriptは「ブラウザ上で動く」\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e実はブラウザ上で動くプログラミング言語は少なく、2020年現在、どのブラウザでもある程度の動きが保証されているのはJavaScriptのみです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e例えば、Javaで書かれたプログラミングはブラウザ上では動かすことはできません。\u003c/p\u003e\n\n\u003cp\u003eよって、「ブラウザ上で値を計算させる」、「画面に入力されたデータをサーバー側に送信する」、「サーバー側から送られてきたデータを適する場所に表示する」といった処理はJavaScriptで記述することになります。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eというよりも他にJavaScript以外の選択肢がありません。よって、そのような処理は全てJavaScriptによって行われます。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"6-webページ表示の仕組み\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#6-web%E3%83%9A%E3%83%BC%E3%82%B8%E8%A1%A8%E7%A4%BA%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e6. Webページ表示の仕組み\u003c/h1\u003e\n\n\u003cp\u003e一旦、Webページは HTML と CSS と JavaScript の3つで構成されることはなんとなく理解していただいたと思いますが、それらがどこからやってくるのか、それらをどのように処理(レンダリング)しているのかについて説明します。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"6-1-htmlcssjavascript-はどこからやってくるのか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#6-1-htmlcssjavascript-%E3%81%AF%E3%81%A9%E3%81%93%E3%81%8B%E3%82%89%E3%82%84%E3%81%A3%E3%81%A6%E3%81%8F%E3%82%8B%E3%81%AE%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e6-1. HTML、CSS、JavaScript はどこからやってくるのか？\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eその答えはWebサーバーからです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eという回答だけでは不親切なので、もし少し順を追って説明します。\u003c/p\u003e\n\n\u003cp\u003eブラウザでURLを入力してWebページにアクセスすると以下のような順で処理が走ります。\u003c/p\u003e\n\n\u003cp\u003e① DNSサーバーへのIPアドレスの問い合わせ\u003cbr\u003e\n② IPアドレスの返答\u003cbr\u003e\n③ Webサーバーへデータ要求\u003cbr\u003e\n④ 要求されたページのデータ転送\u003c/p\u003e\n\n\u003cp\u003e図にすると以下のようになります。（\u003ca href=\"https://daeuwordpress.com/homepage-system/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e参照元ページ\u003c/a\u003e）\u003cbr\u003e\n\u003ca href=\"https://camo.qiitausercontent.com/06d211195bf50f5ed5629a0961a859bda8b619e4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235393132352f66353639383464362d356330342d353331662d616339362d6662623030623561383437302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Ff56984d6-5c04-531f-ac96-fbb00b5a8470.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=654d445700f3125e132b448232f43ad0\" alt=\"websystem_2.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/f56984d6-5c04-531f-ac96-fbb00b5a8470.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F259125%2Ff56984d6-5c04-531f-ac96-fbb00b5a8470.png?ixlib=rb-4.0.0\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=1125699e126e0cd5c19437ac1d3f2380 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e【用語説明】\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDNSサーバー：ドメイン（qiita.com など）をIPアドレス（192.168.123.4 など）に変換してくれるサーバーのこと。 \u003c/li\u003e\n\u003cli\u003eWebサーバー：クライアントからの要求に対し、Webページを閲覧するために必要なデータを転送するサーバーのこと。\u003c/li\u003e\n\u003cli\u003eクライアント：サーバーにサービスを要求し、そのサービスを受ける側のこと。（今回の場合はブラウザ） \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eここで着目してほしいのは、いろいろ処理が走った結果、\u003cstrong\u003e最終的に④で示されているようにWebサーバーからクライアントに「コンテンツ」が送られるということです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eこの\u003cstrong\u003e「コンテンツ」\u003c/strong\u003eこそが HTML、CSS、JavaScript ということになります。（他にも画像やアニメーションなども含まれます）\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eなので、『HTML、CSS、JavaScript はどこからやってくるのか？』という問いには『Webサーバーからです。』という答えになります。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"6-2-やってきた-htmlcssjavascript-は誰が処理しているのか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#6-2-%E3%82%84%E3%81%A3%E3%81%A6%E3%81%8D%E3%81%9F-htmlcssjavascript-%E3%81%AF%E8%AA%B0%E3%81%8C%E5%87%A6%E7%90%86%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e6-2. やってきた HTML、CSS、JavaScript は誰が処理しているのか？\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eその答えはブラウザです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eブラウザには、HTMLやCSSなどを解析し、実際の画面に描画するための\u003cstrong\u003e「レンダリングエンジン」\u003c/strong\u003eと、JavaScriptを実行するための\u003cstrong\u003e「JavaScriptエンジン」\u003c/strong\u003eを搭載しています。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eこの2つの「レンダリングエンジン」と「JavaScriptエンジン」によって、Webサーバーから転送されてきた HTML、CSS、JavaScript を解析・処理を行い、私たちが普段見ているようなWebページが表示されるということになります。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"7-まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#7-%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e7. まとめ\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eWebページは主に3つのプログラム（HTML、CSS、JavaScript）によって表現されます。\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHTML：テキストの内容や構造を表現\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCSS：見た目を制御\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eJavaScript：挙動を制御\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eそれらのプログラムはブラウザからURLにアクセスした結果、最終的にWebサーバーから転送されます。\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e転送されたプログラムをブラウザが解析・処理を行い、私たちが普段見ているようなWebページが表示されます。\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"8-最後に\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#8-%E6%9C%80%E5%BE%8C%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e8. 最後に\u003c/h1\u003e\n\n\u003cp\u003eいかがったでしょうか？\u003cbr\u003e\nなんとなくでも、雰囲気でもいいのでWebページが表示される仕組みについて理解していただけたなら幸いです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"9-参考\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#9-%E5%8F%82%E8%80%83\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e9. 参考\u003c/h1\u003e\n\n\u003cp\u003eWebページ表示の仕組みと表示までの流れ\u003cbr\u003e\n\u003ca href=\"https://daeuwordpress.com/homepage-system/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://daeuwordpress.com/homepage-system/\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eJAVASCRIPTでできることはとても多い！初心者必見のプログラミング言語\u003cbr\u003e\n\u003ca href=\"https://humalance.com/archives/column/column24\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://humalance.com/archives/column/column24\u003c/a\u003e\u003c/p\u003e\n","body":"# 1. はじめに\n新入社員向けに説明することになったので、Webページが表示される仕組みについて初学者向けにまとめてみました。\nプログラミングについて詳しいことは説明しません。最低限触れる程度になります。\n\n# 2. 結論\n**Webページは主に3つのプログラム（HTML、CSS、JavaScript）によって表現されます。**\n\n| 構成要素 | 役割 | \n|:--|:--|\n|[HTML](#3-html)| **テキストの内容や構造を表現** | \n|[CSS](#4-css)| **見た目を制御** |\n|[JavaScript](#5-javascript)| **挙動を制御** |\n\n**また、これらのHTML、CSS、JavaScriptのプログラムは、ブラウザからURLにアクセスした結果、色々あったのちに最終的にWebサーバーからそれらのプログラムが転送されきて、それをブラウザが解釈することでWebページが表示されます。**\n\n**\\- 完 -**\n\nといってもいきなり理解することは難しいので、HTML、CSS、JavaScriptの概要や、これらのプログラムがどのようにブラウザに表示されるのか、大まかな全体の流れについて説明したいと思います。\n\n# 3. HTML\nHyperText Markup Language の略。HTMLとは[ハイパーテキスト](#3-1-ハイパーテキストとは) (HyperText) を記述するための[マークアップ言語](#3-2-マークアップ言語とは) (Markup Language) の一つになります。\n\n**Webページでのテキストを表現するために用いられる言語になります。**\n\n[ハイパーテキスト](#3-1-ハイパーテキストとは)、[マークアップ言語](#3-2-マークアップ言語とは) についてはこれから説明しますが、一旦、例を書くと以下のような記述になります。\n\n```html:HTMLの例\n\u003ch1\u003e1. はじめに\u003c/h1\u003e\n\u003cp\u003e新入社員向けに説明することになったので、Webページが表示される仕組みについて初学者向けにまとめてみました。\u003c/p\u003e\n```\n\n## 3-1. ハイパーテキストとは？\nそもそも「Web」という言葉は「クモの巣（spider web）」が元になっているというのはよく聞く話かと思われます。\n\nそのクモの巣が何を表しているかというと、テキスト（Webページ）とテキスト（Webページ）の繋がりを表しています。\n\n現実世界の物理的なテキストに参照先が書いてあっても、その参照先のテキストが急にやってきたり、テキストが入れ変わったりはしません。\n\nしかし、Webでなら例えば、リンクからその先のリンクへと次々に参照先のページに遷移することができます。\n\nそのような現実世界のテキストを超えたテキスト、つまり、**『ハイパーテキスト』**という概念が誕生しました。\n\n**つまり、ハイパーテキストとは複数のテキストを相互に関連付け、結び付ける仕組みのことです。**\n\n## 3-2. マークアップ言語とは？\n**タグで囲む（マークをつける）ことで構造を表現する言語のことをマークアップ言語と呼びます。**\n\n以下はマークアップ言語での1つであるHTMLのサンプルになりますが、ここでのポイントは**タグで囲って構造を表す**ところです。\n\n```html:HTMLの例（タグに注目）\n\u003ch1\u003e大きなタイトル\u003c/h1\u003e\n\u003ch2\u003e中くらいのタイトル\u003c/h2\u003e\n\u003ch3\u003e小さいタイトル\u003c/h3\u003e\n```\n\n\nHTMLの他に有名なマークアップ言語として、XML（eXtensible Markup Language）があります。\n\nもちろん、XMLもタグで囲う記述方法をとります。\n（ML = Markup Language って覚えれば、○○ML は マークアップ言語 ってすぐわかる！やったね！）\n\nQ. 先生！質問です。マークアップがあるということは、マークダウンもあるということでしょうか？\n[A. あります！](#3-3-markdownマークダウンとは)\n\n## 3-3. Markdown（マークダウン）とは？\nMarkdown（マークダウン）とは文章を記述するための記法である**マークアップ言語**の一つです。\n~~（なんだよ！ お前もマークアップ言語の一味かよ！ 紛らわしいわ！）~~\n\nHTMLなどのマークアップ言語は記述や種類が多く、また覚えることも多いので、専門的な知識を持たない人でも扱いやすいように簡略化したものが、**Markdown(マークダウン)記法**になります。\n\n```markdown:Markdown記法の例\n# 大きなタイトル\n## 中くらいのタイトル\n### 小さいタイトル\n```\n\nHTMLと違って、『**\\\u003ch1\\\u003e**』などのタグで囲うよりも、馴染みのある『**\\#**』になって少しは読みやすくなり、また、記述量も減っているところがポイントになります。 \n\n**とりあえず、テキストを表す方法はHTML以外にもいろいろあるんだな〜ということがわかればOKです。**\n\n## 3-4. どうしてWebページで用いられるテキストは HTML なのか？\n\nテキストを表す方法はいろいろある中で、どうしてWebページで用いられるテキストは HTML なのかというと、**『HTML は Web ページで使用されることを目的とした言語だから』** の一言に尽きます。\n\nHTMLは時代に合わせてバージョンアップしていくことで、Webページで表すために便利な機能が次々に追加されており、例えば、PC・タブレット・スマートフォンなどのマルチデバイスでの記述がシンプルになったり、音楽や動画の埋め込みも標準対応されて、2020年現在はHTML 5.2までバージョンアップしています。\n\nもちろんこのようなことは、Markdown記述では対応していません。\n\nそういった理由から、Webページでテキストを表示することに特化したHTMLが用いられているということになります。\n\n# 4. CSS\nCascating Style Sheets の略。CSSとはHTMLの要素をどのように修飾（表示）するかを指示するスタイルシートの仕様の一つになります。\n\n\n『スタイルシート』とは、文書の **（1）構造（HTMLで記述される部分）** と **（2）体裁（CSSで記述される部分）** を **分離させる** という理念を実現するために提唱された仕様のことです。\n\n**CSS は HTML を修飾するのに特化したスタイルシートになります。**\n\n**HTMLで構造化された文書に対して、CSS を適用させることによって文字のフォント、色、大きさ、背景などの見た目を修飾することができます。**\n\n例えば、HTMLによって記述された \\\u003ch1\\\u003e タグで囲われた文字の色を赤くしたい場合は以下のように記述します。\n\n```css:h1タグの文字列を赤色にするCSSの例\nh1 {color: red;}\n```\n\nまた、HTMLのタグの中には、見た目を修飾するタグも存在しますが、HTML4 から HTML5 への変更でも見た目を修飾するようなタグ（例えば \\\u003cfont\\\u003e タグなど）が一部廃止になるなど、構造と体裁の分離はより進んできている傾向にあります。\n\n# 5. JavaScript\n**「ブラウザ上で動く」**プログラミング言語の一つです。\n\n**JavaScriptはサーバー側との通信を行ったり、動的にコンテンツを更新したり、Webページの様々な挙動を制御します。**\n\n例えば、なにかエラーが発生したアラートを出すには以下のように記述します。\n\n```javascript:JavaScriptによるアラートの例\nalert('エラー');\n```\n\n## 5-1. JavaScriptは「ブラウザ上で動く」\n**実はブラウザ上で動くプログラミング言語は少なく、2020年現在、どのブラウザでもある程度の動きが保証されているのはJavaScriptのみです。**\n\n例えば、Javaで書かれたプログラミングはブラウザ上では動かすことはできません。\n\nよって、「ブラウザ上で値を計算させる」、「画面に入力されたデータをサーバー側に送信する」、「サーバー側から送られてきたデータを適する場所に表示する」といった処理はJavaScriptで記述することになります。\n\n**というよりも他にJavaScript以外の選択肢がありません。よって、そのような処理は全てJavaScriptによって行われます。**\n\n# 6. Webページ表示の仕組み\n一旦、Webページは HTML と CSS と JavaScript の3つで構成されることはなんとなく理解していただいたと思いますが、それらがどこからやってくるのか、それらをどのように処理(レンダリング)しているのかについて説明します。\n\n## 6-1. HTML、CSS、JavaScript はどこからやってくるのか？\n\n**その答えはWebサーバーからです。**\n\nという回答だけでは不親切なので、もし少し順を追って説明します。\n\nブラウザでURLを入力してWebページにアクセスすると以下のような順で処理が走ります。\n\n① DNSサーバーへのIPアドレスの問い合わせ\n② IPアドレスの返答\n③ Webサーバーへデータ要求\n④ 要求されたページのデータ転送\n\n図にすると以下のようになります。（[参照元ページ](https://daeuwordpress.com/homepage-system/)）\n![websystem_2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/259125/f56984d6-5c04-531f-ac96-fbb00b5a8470.png)\n\n【用語説明】\n\n* DNSサーバー：ドメイン（qiita.com など）をIPアドレス（192.168.123.4 など）に変換してくれるサーバーのこと。 \n* Webサーバー：クライアントからの要求に対し、Webページを閲覧するために必要なデータを転送するサーバーのこと。\n* クライアント：サーバーにサービスを要求し、そのサービスを受ける側のこと。（今回の場合はブラウザ） \n\nここで着目してほしいのは、いろいろ処理が走った結果、**最終的に④で示されているようにWebサーバーからクライアントに「コンテンツ」が送られるということです。**\n\nこの**「コンテンツ」**こそが HTML、CSS、JavaScript ということになります。（他にも画像やアニメーションなども含まれます）\n\n**なので、『HTML、CSS、JavaScript はどこからやってくるのか？』という問いには『Webサーバーからです。』という答えになります。**\n\n## 6-2. やってきた HTML、CSS、JavaScript は誰が処理しているのか？\n\n**その答えはブラウザです。**\n\nブラウザには、HTMLやCSSなどを解析し、実際の画面に描画するための**「レンダリングエンジン」**と、JavaScriptを実行するための**「JavaScriptエンジン」**を搭載しています。\n\n**この2つの「レンダリングエンジン」と「JavaScriptエンジン」によって、Webサーバーから転送されてきた HTML、CSS、JavaScript を解析・処理を行い、私たちが普段見ているようなWebページが表示されるということになります。**\n\n# 7. まとめ\n\n- **Webページは主に3つのプログラム（HTML、CSS、JavaScript）によって表現されます。**\n  - **HTML：テキストの内容や構造を表現**\n  - **CSS：見た目を制御**\n  - **JavaScript：挙動を制御**\n- **それらのプログラムはブラウザからURLにアクセスした結果、最終的にWebサーバーから転送されます。**\n- **転送されたプログラムをブラウザが解析・処理を行い、私たちが普段見ているようなWebページが表示されます。**\n\n\n# 8. 最後に\nいかがったでしょうか？\nなんとなくでも、雰囲気でもいいのでWebページが表示される仕組みについて理解していただけたなら幸いです。\n\n# 9. 参考\n\nWebページ表示の仕組みと表示までの流れ\nhttps://daeuwordpress.com/homepage-system/\n\nJAVASCRIPTでできることはとても多い！初心者必見のプログラミング言語\nhttps://humalance.com/archives/column/column24\n","coediting":false,"comments_count":0,"created_at":"2020-07-19T19:16:22+09:00","group":null,"id":"3cc26f23b82f344fa188","likes_count":11,"private":false,"reactions_count":0,"tags":[{"name":"Web","versions":[]}],"title":"Webページが表示される仕組み","updated_at":"2021-05-06T14:06:04+09:00","url":"https://qiita.com/ikuraikura/items/3cc26f23b82f344fa188","user":{"description":" このサイトへの掲載内容はあくまで私個人の見解であり、所属企業における立場、戦略、意見を代表するものではありません。iOS、Swift、SwiftUI、Flutter、UI/UX、Firebase、AWS、Docker、CI/CD","facebook_id":"","followees_count":7,"followers_count":17,"github_login_name":null,"id":"ikuraikura","items_count":62,"linkedin_id":"","location":"","name":"サーモン イクラ","organization":"","permanent_id":259125,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/259125/c7ab3e80cde8cdcaf1cd12778c0a05209ce30837/x_large.png?1640369132","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null}]